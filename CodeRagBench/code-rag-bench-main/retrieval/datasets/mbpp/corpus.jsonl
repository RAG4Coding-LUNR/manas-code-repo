{"_id": "601_code", "title": "__init__", "text": "# Write a function to find the longest chain which can be formed from the given set of pairs.\nclass Pair(object): \r\n\tdef __init__(self, a, b): \r\n\t\tself.a = a \r\n\t\tself.b = b \r\ndef max_chain_length(arr, n): \r\n\tmax = 0\r\n\tmcl = [1 for i in range(n)] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif (arr[i].a > arr[j].b and\r\n\t\t\t\tmcl[i] < mcl[j] + 1): \r\n\t\t\t\tmcl[i] = mcl[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mcl[i]): \r\n\t\t\tmax = mcl[i] \r\n\treturn max", "metadata": {}}
{"_id": "602_code", "title": "first_repeated_char", "text": "# Write a python function to find the first repeated character in a given string.\ndef first_repeated_char(str1):\r\n  for index,c in enumerate(str1):\r\n    if str1[:index+1].count(c) > 1:\r\n      return c \r\n  return \"None\"", "metadata": {}}
{"_id": "603_code", "title": "get_ludic", "text": "# Write a function to get a lucid number smaller than or equal to n.\ndef get_ludic(n):\r\n\tludics = []\r\n\tfor i in range(1, n + 1):\r\n\t\tludics.append(i)\r\n\tindex = 1\r\n\twhile(index != len(ludics)):\r\n\t\tfirst_ludic = ludics[index]\r\n\t\tremove_index = index + first_ludic\r\n\t\twhile(remove_index < len(ludics)):\r\n\t\t\tludics.remove(ludics[remove_index])\r\n\t\t\tremove_index = remove_index + first_ludic - 1\r\n\t\tindex += 1\r\n\treturn ludics", "metadata": {}}
{"_id": "604_code", "title": "reverse_words", "text": "# Write a function to reverse words in a given string.\ndef reverse_words(s):\r\n        return ' '.join(reversed(s.split()))", "metadata": {}}
{"_id": "605_code", "title": "prime_num", "text": "# Write a function to check if the given integer is a prime number.\ndef prime_num(num):\r\n  if num >=1:\r\n   for i in range(2, num//2):\r\n     if (num % i) == 0:\r\n                return False\r\n     else:\r\n                return True\r\n  else:\r\n          return False", "metadata": {}}
{"_id": "606_code", "title": "radian_degree", "text": "# Write a function to convert degrees to radians.\nimport math\r\ndef radian_degree(degree):\r\n radian = degree*(math.pi/180)\r\n return radian", "metadata": {}}
{"_id": "607_code", "title": "find_literals", "text": "# Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.\nimport re\r\npattern = 'fox'\r\ntext = 'The quick brown fox jumps over the lazy dog.'\r\ndef find_literals(text, pattern):\r\n  match = re.search(pattern, text)\r\n  s = match.start()\r\n  e = match.end()\r\n  return (match.re.pattern, s, e)", "metadata": {}}
{"_id": "608_code", "title": "bell_Number", "text": "# Write a python function to find nth bell number.\ndef bell_Number(n): \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1):\r\n        bell[i][0] = bell[i-1][i-1]\r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \r\n    return bell[n][0] ", "metadata": {}}
{"_id": "609_code", "title": "floor_Min", "text": "# Write a python function to find minimum possible value for the given periodic function.\ndef floor_Min(A,B,N):\r\n    x = max(B - 1,N)\r\n    return (A*x) // B", "metadata": {}}
{"_id": "610_code", "title": "remove_kth_element", "text": "# Write a python function to remove the k'th element from a given list.\ndef remove_kth_element(list1, L):\r\n    return  list1[:L-1] + list1[L:]", "metadata": {}}
{"_id": "611_code", "title": "max_of_nth", "text": "# Write a function to find the maximum of nth column from the given tuple list.\ndef max_of_nth(test_list, N):\r\n  res = max([sub[N] for sub in test_list])\r\n  return (res) ", "metadata": {}}
{"_id": "612_code", "title": "merge", "text": "# Write a python function to merge the first and last elements separately in a list of lists.\ndef merge(lst):  \r\n    return [list(ele) for ele in list(zip(*lst))] ", "metadata": {}}
{"_id": "613_code", "title": "maximum_value", "text": "# Write a function to find the maximum value in record list as tuple attribute in the given tuple list.\ndef maximum_value(test_list):\r\n  res = [(key, max(lst)) for key, lst in test_list]\r\n  return (res) ", "metadata": {}}
{"_id": "614_code", "title": "cummulative_sum", "text": "# Write a function to find the cumulative sum of all the values that are present in the given tuple list.\ndef cummulative_sum(test_list):\r\n  res = sum(map(sum, test_list))\r\n  return (res)", "metadata": {}}
{"_id": "615_code", "title": "average_tuple", "text": "# Write a function to find average value of the numbers in a given tuple of tuples.\ndef average_tuple(nums):\r\n    result = [sum(x) / len(x) for x in zip(*nums)]\r\n    return result", "metadata": {}}
{"_id": "616_code", "title": "tuple_modulo", "text": "# Write a function to perfom the modulo of tuple elements in the given two tuples.\ndef tuple_modulo(test_tup1, test_tup2):\r\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \r\n  return (res) ", "metadata": {}}
{"_id": "617_code", "title": "min_Jumps", "text": "# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\ndef min_Jumps(a, b, d): \r\n    temp = a \r\n    a = min(a, b) \r\n    b = max(temp, b) \r\n    if (d >= b): \r\n        return (d + b - 1) / b \r\n    if (d == 0): \r\n        return 0\r\n    if (d == a): \r\n        return 1\r\n    else:\r\n        return 2", "metadata": {}}
{"_id": "618_code", "title": "div_list", "text": "# Write a function to divide two lists using map and lambda function.\ndef div_list(nums1,nums2):\r\n  result = map(lambda x, y: x / y, nums1, nums2)\r\n  return list(result)", "metadata": {}}
{"_id": "619_code", "title": "move_num", "text": "# Write a function to move all the numbers in it to the given string.\ndef move_num(test_str):\r\n  res = ''\r\n  dig = ''\r\n  for ele in test_str:\r\n    if ele.isdigit():\r\n      dig += ele\r\n    else:\r\n      res += ele\r\n  res += dig\r\n  return (res) ", "metadata": {}}
{"_id": "620_code", "title": "largest_subset", "text": "# Write a function to find the largest subset where each pair is divisible.\ndef largest_subset(a, n):\r\n\tdp = [0 for i in range(n)]\r\n\tdp[n - 1] = 1; \r\n\tfor i in range(n - 2, -1, -1):\r\n\t\tmxm = 0;\r\n\t\tfor j in range(i + 1, n):\r\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\r\n\t\t\t\tmxm = max(mxm, dp[j])\r\n\t\tdp[i] = 1 + mxm\r\n\treturn max(dp)", "metadata": {}}
{"_id": "621_code", "title": "increment_numerics", "text": "# Write a function to increment the numeric values in the given strings by k.\ndef increment_numerics(test_list, K):\r\n  res = [str(int(ele) + K) if ele.isdigit() else ele for ele in test_list]\r\n  return res ", "metadata": {}}
{"_id": "622_code", "title": "get_median", "text": "# Write a function to find the median of two sorted arrays of same size.\ndef get_median(arr1, arr2, n):\r\n  i = 0\r\n  j = 0\r\n  m1 = -1\r\n  m2 = -1\r\n  count = 0\r\n  while count < n + 1:\r\n    count += 1\r\n    if i == n:\r\n      m1 = m2\r\n      m2 = arr2[0]\r\n      break\r\n    elif j == n:\r\n      m1 = m2\r\n      m2 = arr1[0]\r\n      break\r\n    if arr1[i] <= arr2[j]:\r\n      m1 = m2\r\n      m2 = arr1[i]\r\n      i += 1\r\n    else:\r\n      m1 = m2\r\n      m2 = arr2[j]\r\n      j += 1\r\n  return (m1 + m2)/2", "metadata": {}}
{"_id": "623_code", "title": "nth_nums", "text": "# Write a function to find the n-th power of individual elements in a list using lambda function.\ndef nth_nums(nums,n):\r\n nth_nums = list(map(lambda x: x ** n, nums))\r\n return nth_nums", "metadata": {}}
{"_id": "624_code", "title": "is_upper", "text": "# Write a python function to convert the given string to upper case.\ndef is_upper(string):\r\n  return (string.upper())", "metadata": {}}
{"_id": "625_code", "title": "swap_List", "text": "# Write a python function to interchange first and last elements in a given list.\ndef swap_List(newList): \r\n    size = len(newList) \r\n    temp = newList[0] \r\n    newList[0] = newList[size - 1] \r\n    newList[size - 1] = temp   \r\n    return newList ", "metadata": {}}
{"_id": "626_code", "title": "triangle_area", "text": "# Write a python function to find the largest triangle that can be inscribed in the semicircle.\ndef triangle_area(r) :  \r\n    if r < 0 : \r\n        return -1\r\n    return r * r ", "metadata": {}}
{"_id": "627_code", "title": "find_First_Missing", "text": "# Write a python function to find the smallest missing number from the given array.\ndef find_First_Missing(array,start,end): \r\n    if (start > end): \r\n        return end + 1\r\n    if (start != array[start]): \r\n        return start; \r\n    mid = int((start + end) / 2) \r\n    if (array[mid] == mid): \r\n        return find_First_Missing(array,mid+1,end) \r\n    return find_First_Missing(array,start,mid) ", "metadata": {}}
{"_id": "628_code", "title": "replace_spaces", "text": "# Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.\nMAX=1000;\r\ndef replace_spaces(string):\r\n  string=string.strip()\r\n  i=len(string)\r\n  space_count=string.count(' ')\r\n  new_length = i + space_count*2\r\n  if new_length > MAX:\r\n    return -1\r\n  index = new_length-1\r\n  string=list(string)\r\n  for f in range(i-2, new_length-2):\r\n    string.append('0')\r\n  for j in range(i-1, 0, -1):\r\n    if string[j] == ' ':\r\n      string[index] = '0'\r\n      string[index-1] = '2'\r\n      string[index-2] = '%'\r\n      index=index-3\r\n    else:\r\n      string[index] = string[j]\r\n      index -= 1\r\n  return ''.join(string)", "metadata": {}}
{"_id": "629_code", "title": "Split", "text": "# Write a python function to find even numbers from a mixed list.\ndef Split(list): \r\n    ev_li = [] \r\n    for i in list: \r\n        if (i % 2 == 0): \r\n            ev_li.append(i)  \r\n    return ev_li", "metadata": {}}
{"_id": "630_code", "title": "adjac", "text": "# Write a function to extract all the adjacent coordinates of the given coordinate tuple.\ndef adjac(ele, sub = []): \r\n  if not ele: \r\n     yield sub \r\n  else: \r\n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \r\n                for idx in adjac(ele[1:], sub + [j])] \r\ndef get_coordinates(test_tup):\r\n  res = list(adjac(test_tup))\r\n  return (res) ", "metadata": {}}
{"_id": "631_code", "title": "replace_spaces", "text": "# Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.\nimport re\r\ntext = 'Python Exercises'\r\ndef replace_spaces(text):\r\n  text =text.replace (\" \", \"_\")\r\n  return (text)\r\n  text =text.replace (\"_\", \" \")\r\n  return (text)", "metadata": {}}
{"_id": "632_code", "title": "move_zero", "text": "# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list):\r\n    a = [0 for i in range(num_list.count(0))]\r\n    x = [ i for i in num_list if i != 0]\r\n    x.extend(a)\r\n    return (x)", "metadata": {}}
{"_id": "633_code", "title": "pair_OR_Sum", "text": "# Write a python function to find the sum of xor of all pairs of numbers in the given array.\ndef pair_OR_Sum(arr,n) : \r\n    ans = 0 \r\n    for i in range(0,n) :    \r\n        for j in range(i + 1,n) :   \r\n            ans = ans + (arr[i] ^ arr[j])          \r\n    return ans ", "metadata": {}}
{"_id": "634_code", "title": "even_Power_Sum", "text": "# Write a python function to find the sum of fourth power of first n even natural numbers.\ndef even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n + 1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j); \r\n    return sum; ", "metadata": {}}
{"_id": "635_code", "title": "heap_sort", "text": "# Write a function to push all values into a heap and then pop off the smallest values one at a time.\nimport heapq as hq\r\ndef heap_sort(iterable):\r\n    h = []\r\n    for value in iterable:\r\n        hq.heappush(h, value)\r\n    return [hq.heappop(h) for i in range(len(h))]", "metadata": {}}
{"_id": "636_code", "title": "Check_Solution", "text": "# Write a python function to check if roots of a quadratic equation are reciprocal of each other or not.\ndef Check_Solution(a,b,c): \r\n    if (a == c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); ", "metadata": {}}
{"_id": "637_code", "title": "noprofit_noloss", "text": "# Write a function to check whether the given amount has no profit and no loss\ndef noprofit_noloss(actual_cost,sale_amount): \r\n  if(sale_amount == actual_cost):\r\n    return True\r\n  else:\r\n    return False", "metadata": {}}
{"_id": "638_code", "title": "wind_chill", "text": "# Write a function to calculate wind chill index.\nimport math\r\ndef wind_chill(v,t):\r\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\r\n return int(round(windchill, 0))", "metadata": {}}
{"_id": "639_code", "title": "sample_nam", "text": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names):\r\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\r\n  return len(''.join(sample_names))", "metadata": {}}
{"_id": "640_code", "title": "remove_parenthesis", "text": "# Write a function to remove the parenthesis area in a string.\nimport re\r\ndef remove_parenthesis(items):\r\n for item in items:\r\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item))", "metadata": {}}
{"_id": "641_code", "title": "is_nonagonal", "text": "# Write a function to find the nth nonagonal number.\ndef is_nonagonal(n): \r\n\treturn int(n * (7 * n - 5) / 2) ", "metadata": {}}
{"_id": "642_code", "title": "remove_similar_row", "text": "# Write a function to remove similar rows from the given tuple matrix.\ndef remove_similar_row(test_list):\r\n  res = set(sorted([tuple(sorted(set(sub))) for sub in test_list]))\r\n  return (res) ", "metadata": {}}
{"_id": "643_code", "title": "text_match_wordz_middle", "text": "# Write a function that matches a word containing 'z', not at the start or end of the word.\nimport re\r\ndef text_match_wordz_middle(text):\r\n        patterns = '\\Bz\\B'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')", "metadata": {}}
{"_id": "644_code", "title": "reverse_Array_Upto_K", "text": "# Write a python function to reverse an array upto a given position.\ndef reverse_Array_Upto_K(input, k): \r\n  return (input[k-1::-1] + input[k:]) ", "metadata": {}}
{"_id": "645_code", "title": "get_product", "text": "# Write a function to find the product of it’s kth index in the given tuples.\ndef get_product(val) : \r\n\tres = 1\r\n\tfor ele in val: \r\n\t\tres *= ele \r\n\treturn res \r\ndef find_k_product(test_list, K):\r\n  res = get_product([sub[K] for sub in test_list])\r\n  return (res) ", "metadata": {}}
{"_id": "646_code", "title": "No_of_cubes", "text": "# Write a python function to count number of cubes of size k in a cube of size n.\ndef No_of_cubes(N,K):\r\n    No = 0\r\n    No = (N - K + 1)\r\n    No = pow(No, 3)\r\n    return No", "metadata": {}}
{"_id": "647_code", "title": "split_upperstring", "text": "# Write a function to split a string at uppercase letters.\nimport re\r\ndef split_upperstring(text):\r\n return (re.findall('[A-Z][^A-Z]*', text))", "metadata": {}}
{"_id": "648_code", "title": "exchange_elements", "text": "# Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.\nfrom itertools import zip_longest, chain, tee\r\ndef exchange_elements(lst):\r\n    lst1, lst2 = tee(iter(lst), 2)\r\n    return list(chain.from_iterable(zip_longest(lst[1::2], lst[::2])))", "metadata": {}}
{"_id": "649_code", "title": "sum_Range_list", "text": "# Write a python function to calculate the sum of the numbers in a list between the indices of a specified range.\ndef sum_Range_list(nums, m, n):                                                                                                                                                                                                \r\n    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += nums[i]                                                                                                                                                                                                  \r\n    return sum_range   ", "metadata": {}}
{"_id": "650_code", "title": "are_Equal", "text": "# Write a python function to check whether the given two arrays are equal or not.\ndef are_Equal(arr1,arr2,n,m):\r\n    if (n != m):\r\n        return False\r\n    arr1.sort()\r\n    arr2.sort()\r\n    for i in range(0,n - 1):\r\n        if (arr1[i] != arr2[i]):\r\n            return False\r\n    return True", "metadata": {}}
{"_id": "651_code", "title": "check_subset", "text": "# Write a function to check if one tuple is a subset of another tuple.\ndef check_subset(test_tup1, test_tup2):\r\n  res = set(test_tup2).issubset(test_tup1)\r\n  return (res) ", "metadata": {}}
{"_id": "652_code", "title": "matrix_to_list", "text": "# Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.\ndef matrix_to_list(test_list):\r\n  temp = [ele for sub in test_list for ele in sub]\r\n  res = list(zip(*temp))\r\n  return (str(res))", "metadata": {}}
{"_id": "653_code", "title": "grouping_dictionary", "text": "# Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module.\nfrom collections import defaultdict\r\ndef grouping_dictionary(l):\r\n    d = defaultdict(list)\r\n    for k, v in l:\r\n        d[k].append(v)\r\n    return d", "metadata": {}}
{"_id": "654_code", "title": "rectangle_perimeter", "text": "# Write a function to find the perimeter of a rectangle.\ndef rectangle_perimeter(l,b):\r\n  perimeter=2*(l+b)\r\n  return perimeter", "metadata": {}}
{"_id": "655_code", "title": "fifth_Power_Sum", "text": "# Write a python function to find the sum of fifth power of n natural numbers.\ndef fifth_Power_Sum(n) : \r\n    sm = 0 \r\n    for i in range(1,n+1) : \r\n        sm = sm + (i*i*i*i*i) \r\n    return sm ", "metadata": {}}
{"_id": "656_code", "title": "find_Min_Sum", "text": "# Write a python function to find the minimum sum of absolute differences of two arrays.\ndef find_Min_Sum(a,b,n): \r\n    a.sort() \r\n    b.sort() \r\n    sum = 0  \r\n    for i in range(n): \r\n        sum = sum + abs(a[i] - b[i]) \r\n    return sum", "metadata": {}}
{"_id": "657_code", "title": "first_Digit", "text": "# Write a python function to find the first digit in factorial of a given number.\nimport math \r\ndef first_Digit(n) : \r\n    fact = 1\r\n    for i in range(2,n + 1) : \r\n        fact = fact * i \r\n        while (fact % 10 == 0) :  \r\n            fact = int(fact / 10) \r\n    while (fact >= 10) : \r\n        fact = int(fact / 10) \r\n    return math.floor(fact) ", "metadata": {}}
{"_id": "658_code", "title": "max_occurrences", "text": "# Write a function to find the item with maximum occurrences in a given list.\ndef max_occurrences(list1):\r\n    max_val = 0\r\n    result = list1[0] \r\n    for i in list1:\r\n        occu = list1.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result", "metadata": {}}
{"_id": "659_code", "title": "Repeat", "text": "# Write a python function to print duplicants from a list of integers.\ndef Repeat(x): \r\n    _size = len(x) \r\n    repeated = [] \r\n    for i in range(_size): \r\n        k = i + 1\r\n        for j in range(k, _size): \r\n            if x[i] == x[j] and x[i] not in repeated: \r\n                repeated.append(x[i]) \r\n    return repeated ", "metadata": {}}
{"_id": "660_code", "title": "find_Points", "text": "# Write a python function to choose points from two ranges such that no point lies in both the ranges.\ndef find_Points(l1,r1,l2,r2): \r\n    x = min(l1,l2) if (l1 != l2) else -1\r\n    y = max(r1,r2) if (r1 != r2) else -1\r\n    return (x,y)", "metadata": {}}
{"_id": "661_code", "title": "max_sum_of_three_consecutive", "text": "# Write a function to find the maximum sum that can be formed which has no three consecutive elements present.\ndef max_sum_of_three_consecutive(arr, n): \r\n\tsum = [0 for k in range(n)] \r\n\tif n >= 1: \r\n\t\tsum[0] = arr[0] \r\n\tif n >= 2: \r\n\t\tsum[1] = arr[0] + arr[1] \r\n\tif n > 2: \r\n\t\tsum[2] = max(sum[1], max(arr[1] + arr[2], arr[0] + arr[2])) \r\n\tfor i in range(3, n): \r\n\t\tsum[i] = max(max(sum[i-1], sum[i-2] + arr[i]), arr[i] + arr[i-1] + sum[i-3]) \r\n\treturn sum[n-1]", "metadata": {}}
{"_id": "662_code", "title": "sorted_dict", "text": "# Write a function to sort a list in a dictionary.\ndef sorted_dict(dict1):\r\n  sorted_dict = {x: sorted(y) for x, y in dict1.items()}\r\n  return sorted_dict", "metadata": {}}
{"_id": "663_code", "title": "find_max_val", "text": "# Write a function to find the largest possible value of k such that k modulo x is y.\nimport sys \r\ndef find_max_val(n, x, y): \r\n\tans = -sys.maxsize \r\n\tfor k in range(n + 1): \r\n\t\tif (k % x == y): \r\n\t\t\tans = max(ans, k) \r\n\treturn (ans if (ans >= 0 and\r\n\t\t\t\t\tans <= n) else -1) ", "metadata": {}}
{"_id": "664_code", "title": "average_Even", "text": "# Write a python function to find the average of even numbers till a given even number.\ndef average_Even(n) : \r\n    if (n% 2!= 0) : \r\n        return (\"Invalid Input\") \r\n        return -1  \r\n    sm = 0\r\n    count = 0\r\n    while (n>= 2) : \r\n        count = count+1\r\n        sm = sm+n \r\n        n = n-2\r\n    return sm // count ", "metadata": {}}
{"_id": "665_code", "title": "move_last", "text": "# Write a python function to shift first element to the end of given list.\ndef move_last(num_list):\r\n    a = [num_list[0] for i in range(num_list.count(num_list[0]))]\r\n    x = [ i for i in num_list if i != num_list[0]]\r\n    x.extend(a)\r\n    return (x)", "metadata": {}}
{"_id": "666_code", "title": "count_char", "text": "# Write a function to count occurrence of a character in a string.\ndef count_char(string,char):\r\n count = 0\r\n for i in range(len(string)):\r\n    if(string[i] == char):\r\n        count = count + 1\r\n return count", "metadata": {}}
{"_id": "667_code", "title": "Check_Vow", "text": "# Write a python function to count number of vowels in the string.\ndef Check_Vow(string, vowels): \r\n    final = [each for each in string if each in vowels] \r\n    return(len(final)) \r\n", "metadata": {}}
{"_id": "668_code", "title": "replace", "text": "# Write a python function to replace multiple occurence of character by single.\nimport re \r\ndef replace(string, char): \r\n    pattern = char + '{2,}'\r\n    string = re.sub(pattern, char, string) \r\n    return string ", "metadata": {}}
{"_id": "669_code", "title": "check_IP", "text": "# Write a function to check whether the given ip address is valid or not using regex.\nimport re \r\nregex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$'''\r\ndef check_IP(Ip): \r\n\tif(re.search(regex, Ip)): \r\n\t\treturn (\"Valid IP address\") \r\n\telse: \r\n\t\treturn (\"Invalid IP address\") ", "metadata": {}}
{"_id": "670_code", "title": "decreasing_trend", "text": "# Write a python function to check whether a sequence of numbers has a decreasing trend or not.\ndef decreasing_trend(nums):\r\n    if (sorted(nums)== nums):\r\n        return True\r\n    else:\r\n        return False", "metadata": {}}
{"_id": "671_code", "title": "get_Pos_Of_Right_most_Set_Bit", "text": "# Write a python function to set the right most unset bit.\nimport math \r\ndef get_Pos_Of_Right_most_Set_Bit(n): \r\n    return int(math.log2(n&-n)+1)   \r\ndef set_Right_most_Unset_Bit(n): \r\n    if (n == 0): \r\n        return 1\r\n    if ((n & (n + 1)) == 0):     \r\n        return n \r\n    pos = get_Pos_Of_Right_most_Set_Bit(~n)      \r\n    return ((1 << (pos - 1)) | n) ", "metadata": {}}
{"_id": "672_code", "title": "max_of_three", "text": "# Write a function to find maximum of three numbers.\ndef max_of_three(num1,num2,num3): \r\n    if (num1 >= num2) and (num1 >= num3):\r\n       lnum = num1\r\n    elif (num2 >= num1) and (num2 >= num3):\r\n       lnum = num2\r\n    else:\r\n       lnum = num3\r\n    return lnum", "metadata": {}}
{"_id": "673_code", "title": "convert", "text": "# Write a python function to convert a list of multiple integers into a single integer.\ndef convert(list): \r\n    s = [str(i) for i in list] \r\n    res = int(\"\".join(s))  \r\n    return (res) ", "metadata": {}}
{"_id": "674_code", "title": "remove_duplicate", "text": "# Write a function to remove duplicate words from a given string using collections module.\nfrom collections import OrderedDict\r\ndef remove_duplicate(string):\r\n  result = ' '.join(OrderedDict((w,w) for w in string.split()).keys())\r\n  return result", "metadata": {}}
{"_id": "675_code", "title": "sum_nums", "text": "# Write a function to add two integers. however, if the sum is between the given range it will return 20.\ndef sum_nums(x, y,m,n):\r\n    sum_nums= x + y\r\n    if sum_nums in range(m, n):\r\n        return 20\r\n    else:\r\n        return sum_nums", "metadata": {}}
{"_id": "676_code", "title": "remove_extra_char", "text": "# Write a function to remove everything except alphanumeric characters from the given string by using regex.\nimport re\r\ndef remove_extra_char(text1):\r\n  pattern = re.compile('[\\W_]+')\r\n  return (pattern.sub('', text1))", "metadata": {}}
{"_id": "677_code", "title": "validity_triangle", "text": "# Write a function to check if the triangle is valid or not.\ndef validity_triangle(a,b,c):\r\n total = a + b + c\r\n if total == 180:\r\n    return True\r\n else:\r\n    return False", "metadata": {}}
{"_id": "678_code", "title": "remove_spaces", "text": "# Write a python function to remove spaces from a given string.\ndef remove_spaces(str1):\r\n  str1 = str1.replace(' ','')\r\n  return str1", "metadata": {}}
{"_id": "679_code", "title": "access_key", "text": "# Write a function to access dictionary key’s element by index.\ndef access_key(ditionary,key):\r\n  return list(ditionary)[key]", "metadata": {}}
{"_id": "680_code", "title": "increasing_trend", "text": "# Write a python function to check whether a sequence of numbers has an increasing trend or not.\ndef increasing_trend(nums):\r\n    if (sorted(nums)== nums):\r\n        return True\r\n    else:\r\n        return False", "metadata": {}}
{"_id": "681_code", "title": "smallest_Divisor", "text": "# Write a python function to find the smallest prime divisor of a number.\ndef smallest_Divisor(n): \r\n    if (n % 2 == 0): \r\n        return 2; \r\n    i = 3;  \r\n    while (i*i <= n): \r\n        if (n % i == 0): \r\n            return i; \r\n        i += 2; \r\n    return n; ", "metadata": {}}
{"_id": "682_code", "title": "mul_list", "text": "# Write a function to multiply two lists using map and lambda function.\ndef mul_list(nums1,nums2):\r\n  result = map(lambda x, y: x * y, nums1, nums2)\r\n  return list(result)", "metadata": {}}
{"_id": "683_code", "title": "sum_Square", "text": "# Write a python function to check whether the given number can be represented by sum of two squares or not.\ndef sum_Square(n) : \r\n    i = 1 \r\n    while i*i <= n : \r\n        j = 1\r\n        while (j*j <= n) : \r\n            if (i*i+j*j == n) : \r\n                return True\r\n            j = j+1\r\n        i = i+1     \r\n    return False", "metadata": {}}
{"_id": "684_code", "title": "count_Char", "text": "# Write a python function to count occurences of a character in a repeated string.\ndef count_Char(str,x): \r\n    count = 0\r\n    for i in range(len(str)):  \r\n        if (str[i] == x) : \r\n            count += 1\r\n    n = 10\r\n    repititions = n // len(str)  \r\n    count = count * repititions  \r\n    l = n % len(str)  \r\n    for i in range(l): \r\n        if (str[i] == x):  \r\n            count += 1\r\n    return count  ", "metadata": {}}
{"_id": "685_code", "title": "sum_Of_Primes", "text": "# Write a python function to find sum of prime numbers between 1 to n.\ndef sum_Of_Primes(n): \r\n    prime = [True] * (n + 1)  \r\n    p = 2\r\n    while p * p <= n: \r\n        if prime[p] == True:  \r\n            i = p * 2\r\n            while i <= n: \r\n                prime[i] = False\r\n                i += p \r\n        p += 1    \r\n    sum = 0\r\n    for i in range (2,n + 1): \r\n        if(prime[i]): \r\n            sum += i \r\n    return sum", "metadata": {}}
{"_id": "686_code", "title": "freq_element", "text": "# Write a function to find the frequency of each element in the given list.\nfrom collections import defaultdict \r\ndef freq_element(test_tup):\r\n  res = defaultdict(int)\r\n  for ele in test_tup:\r\n    res[ele] += 1\r\n  return (str(dict(res))) ", "metadata": {}}
{"_id": "687_code", "title": "recur_gcd", "text": "# Write a function to find the greatest common divisor (gcd) of two integers by using recursion.\ndef recur_gcd(a, b):\r\n\tlow = min(a, b)\r\n\thigh = max(a, b)\r\n\tif low == 0:\r\n\t\treturn high\r\n\telif low == 1:\r\n\t\treturn 1\r\n\telse:\r\n\t\treturn recur_gcd(low, high%low)", "metadata": {}}
{"_id": "688_code", "title": "len_complex", "text": "# Write a function to get the length of a complex number.\nimport cmath\r\ndef len_complex(a,b):\r\n  cn=complex(a,b)\r\n  length=abs(cn)\r\n  return length", "metadata": {}}
{"_id": "689_code", "title": "min_jumps", "text": "# ## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block\ndef min_jumps(arr, n):\r\n\tjumps = [0 for i in range(n)]\r\n\tif (n == 0) or (arr[0] == 0):\r\n\t\treturn float('inf')\r\n\tjumps[0] = 0\r\n\tfor i in range(1, n):\r\n\t\tjumps[i] = float('inf')\r\n\t\tfor j in range(i):\r\n\t\t\tif (i <= j + arr[j]) and (jumps[j] != float('inf')):\r\n\t\t\t\tjumps[i] = min(jumps[i], jumps[j] + 1)\r\n\t\t\t\tbreak\r\n\treturn jumps[n-1]", "metadata": {}}
{"_id": "690_code", "title": "mul_consecutive_nums", "text": "# Write a function to multiply consecutive numbers of a given list.\ndef mul_consecutive_nums(nums):\r\n    result = [b*a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result", "metadata": {}}
{"_id": "691_code", "title": "group_element", "text": "# Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.\nfrom itertools import groupby \r\ndef group_element(test_list):\r\n  res = dict()\r\n  for key, val in groupby(sorted(test_list, key = lambda ele: ele[1]), key = lambda ele: ele[1]):\r\n    res[key] = [ele[0] for ele in val] \r\n  return (res)\r\n", "metadata": {}}
{"_id": "692_code", "title": "last_Two_Digits", "text": "# Write a python function to find the last two digits in factorial of a given number.\ndef last_Two_Digits(N): \r\n    if (N >= 10): \r\n        return\r\n    fac = 1\r\n    for i in range(1,N + 1): \r\n        fac = (fac * i) % 100\r\n    return (fac) ", "metadata": {}}
{"_id": "693_code", "title": "remove_multiple_spaces", "text": "# Write a function to remove multiple spaces in a string by using regex.\nimport re\r\ndef remove_multiple_spaces(text1):\r\n  return (re.sub(' +',' ',text1))", "metadata": {}}
{"_id": "694_code", "title": "extract_unique", "text": "# Write a function to extract unique values from the given dictionary values.\ndef extract_unique(test_dict):\r\n  res = list(sorted({ele for val in test_dict.values() for ele in val}))\r\n  return res", "metadata": {}}
{"_id": "695_code", "title": "check_greater", "text": "# Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.\ndef check_greater(test_tup1, test_tup2):\r\n  res = all(x < y for x, y in zip(test_tup1, test_tup2))\r\n  return (res) ", "metadata": {}}
{"_id": "696_code", "title": "zip_list", "text": "# Write a function to zip two given lists of lists.\ndef zip_list(list1,list2):  \r\n result = list(map(list.__add__, list1, list2)) \r\n return result", "metadata": {}}
{"_id": "697_code", "title": "count_even", "text": "# Write a function to find number of even elements in the given list using lambda function.\ndef count_even(array_nums):\r\n   count_even = len(list(filter(lambda x: (x%2 == 0) , array_nums)))\r\n   return count_even", "metadata": {}}
{"_id": "698_code", "title": "sort_dict_item", "text": "# Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.\ndef sort_dict_item(test_dict):\r\n  res = {key: test_dict[key] for key in sorted(test_dict.keys(), key = lambda ele: ele[1] * ele[0])}\r\n  return  (res) \r\n", "metadata": {}}
{"_id": "699_code", "title": "min_Swaps", "text": "# Write a python function to find the minimum number of swaps required to convert one binary string to another.\ndef min_Swaps(str1,str2) : \r\n    count = 0\r\n    for i in range(len(str1)) : \r\n        if str1[i] != str2[i] : \r\n            count += 1\r\n    if count % 2 == 0 : \r\n        return (count // 2) \r\n    else : \r\n        return (\"Not Possible\") ", "metadata": {}}
{"_id": "700_code", "title": "count_range_in_list", "text": "# Write a function to count the number of elements in a list which are within a specific range.\ndef count_range_in_list(li, min, max):\r\n\tctr = 0\r\n\tfor x in li:\r\n\t\tif min <= x <= max:\r\n\t\t\tctr += 1\r\n\treturn ctr", "metadata": {}}
{"_id": "701_code", "title": "equilibrium_index", "text": "# Write a function to find the equilibrium index of the given array.\ndef equilibrium_index(arr):\r\n  total_sum = sum(arr)\r\n  left_sum=0\r\n  for i, num in enumerate(arr):\r\n    total_sum -= num\r\n    if left_sum == total_sum:\r\n      return i\r\n    left_sum += num\r\n  return -1", "metadata": {}}
{"_id": "702_code", "title": "find_ind", "text": "# Write a function to find the minimum number of elements that should be removed such that amax-amin<=k.\ndef find_ind(key, i, n, \r\n\t\t\tk, arr):\r\n\tind = -1\r\n\tstart = i + 1\r\n\tend = n - 1;\r\n\twhile (start < end):\r\n\t\tmid = int(start +\r\n\t\t\t\t(end - start) / 2)\r\n\t\tif (arr[mid] - key <= k):\r\n\t\t\tind = mid\r\n\t\t\tstart = mid + 1\r\n\t\telse:\r\n\t\t\tend = mid\r\n\treturn ind\r\ndef removals(arr, n, k):\r\n\tans = n - 1\r\n\tarr.sort()\r\n\tfor i in range(0, n):\r\n\t\tj = find_ind(arr[i], i, \r\n\t\t\t\t\tn, k, arr)\r\n\t\tif (j != -1):\r\n\t\t\tans = min(ans, n -\r\n\t\t\t\t\t\t(j - i + 1))\r\n\treturn ans", "metadata": {}}
{"_id": "703_code", "title": "is_key_present", "text": "# Write a function to check whether the given key is present in the dictionary or not.\ndef is_key_present(d,x):\r\n  if x in d:\r\n    return True\r\n  else:\r\n     return False", "metadata": {}}
{"_id": "704_code", "title": "harmonic_sum", "text": "# Write a function to calculate the harmonic sum of n-1.\ndef harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1))", "metadata": {}}
{"_id": "705_code", "title": "sort_sublists", "text": "# Write a function to sort a list of lists by length and value.\ndef sort_sublists(list1):\r\n      list1.sort()  \r\n      list1.sort(key=len)\r\n      return  list1", "metadata": {}}
{"_id": "706_code", "title": "is_subset", "text": "# Write a function to find whether an array is subset of another array.\ndef is_subset(arr1, m, arr2, n): \r\n\thashset = set() \r\n\tfor i in range(0, m): \r\n\t\thashset.add(arr1[i]) \r\n\tfor i in range(0, n): \r\n\t\tif arr2[i] in hashset: \r\n\t\t\tcontinue\r\n\t\telse: \r\n\t\t\treturn False\r\n\treturn True\t\t", "metadata": {}}
{"_id": "707_code", "title": "count_Set_Bits", "text": "# Write a python function to count the total set bits from 1 to n.\ndef count_Set_Bits(n) :  \r\n    n += 1; \r\n    powerOf2 = 2;   \r\n    cnt = n // 2;  \r\n    while (powerOf2 <= n) : \r\n        totalPairs = n // powerOf2;  \r\n        cnt += (totalPairs // 2) * powerOf2;  \r\n        if (totalPairs & 1) : \r\n            cnt += (n % powerOf2) \r\n        else : \r\n            cnt += 0\r\n        powerOf2 <<= 1;    \r\n    return cnt;  ", "metadata": {}}
{"_id": "708_code", "title": "Convert", "text": "# Write a python function to convert a string to a list.\ndef Convert(string): \r\n    li = list(string.split(\" \")) \r\n    return li ", "metadata": {}}
{"_id": "709_code", "title": "get_unique", "text": "# Write a function to count unique keys for each value present in the tuple.\nfrom collections import defaultdict \r\ndef get_unique(test_list):\r\n  res = defaultdict(list)\r\n  for sub in test_list:\r\n    res[sub[1]].append(sub[0])\r\n  res = dict(res)\r\n  res_dict = dict()\r\n  for key in res:\r\n    res_dict[key] = len(list(set(res[key])))\r\n  return (str(res_dict)) ", "metadata": {}}
{"_id": "710_code", "title": "front_and_rear", "text": "# Write a function to access the initial and last data of the given tuple record.\ndef front_and_rear(test_tup):\r\n  res = (test_tup[0], test_tup[-1])\r\n  return (res) ", "metadata": {}}
{"_id": "711_code", "title": "product_Equal", "text": "# Write a python function to check whether the product of digits of a number at even and odd places is equal or not.\ndef product_Equal(n): \r\n    if n < 10: \r\n        return False\r\n    prodOdd = 1; prodEven = 1\r\n    while n > 0: \r\n        digit = n % 10\r\n        prodOdd *= digit \r\n        n = n//10\r\n        if n == 0: \r\n            break; \r\n        digit = n % 10\r\n        prodEven *= digit \r\n        n = n//10\r\n    if prodOdd == prodEven: \r\n        return True\r\n    return False", "metadata": {}}
{"_id": "712_code", "title": "remove_duplicate", "text": "# Write a function to remove duplicates from a list of lists.\nimport itertools\r\ndef remove_duplicate(list1):\r\n list.sort(list1)\r\n remove_duplicate = list(list1 for list1,_ in itertools.groupby(list1))\r\n return remove_duplicate", "metadata": {}}
{"_id": "713_code", "title": "check_valid", "text": "# Write a function to check if the given tuple contains all valid values or not.\ndef check_valid(test_tup):\r\n  res = not any(map(lambda ele: not ele, test_tup))\r\n  return (res) ", "metadata": {}}
{"_id": "714_code", "title": "count_Fac", "text": "# Write a python function to count the number of distinct power of prime factor of given number.\ndef count_Fac(n):  \r\n    m = n \r\n    count = 0\r\n    i = 2\r\n    while((i * i) <= m): \r\n        total = 0\r\n        while (n % i == 0): \r\n            n /= i \r\n            total += 1 \r\n        temp = 0\r\n        j = 1\r\n        while((temp + j) <= total): \r\n            temp += j \r\n            count += 1\r\n            j += 1 \r\n        i += 1\r\n    if (n != 1): \r\n        count += 1 \r\n    return count ", "metadata": {}}
{"_id": "715_code", "title": "str_to_tuple", "text": "# Write a function to convert the given string of integers into a tuple.\ndef str_to_tuple(test_str):\r\n  res = tuple(map(int, test_str.split(', ')))\r\n  return (res) ", "metadata": {}}
{"_id": "716_code", "title": "rombus_perimeter", "text": "# Write a function to find the perimeter of a rombus.\ndef rombus_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter", "metadata": {}}
{"_id": "717_code", "title": "sd_calc", "text": "# Write a function to calculate the standard deviation.\nimport math\r\nimport sys\r\ndef sd_calc(data):\r\n    n = len(data)\r\n    if n <= 1:\r\n        return 0.0\r\n    mean, sd = avg_calc(data), 0.0\r\n    for el in data:\r\n        sd += (float(el) - mean)**2\r\n    sd = math.sqrt(sd / float(n-1))\r\n    return sd\r\ndef avg_calc(ls):\r\n    n, mean = len(ls), 0.0\r\n    if n <= 1:\r\n        return ls[0]\r\n    for el in ls:\r\n        mean = mean + float(el)\r\n    mean = mean / float(n)\r\n    return mean", "metadata": {}}
{"_id": "718_code", "title": "alternate_elements", "text": "# Write a function to create a list taking alternate elements from another given list.\ndef alternate_elements(list1):\r\n    result=[]\r\n    for item in list1[::2]:\r\n        result.append(item)\r\n    return result ", "metadata": {}}
{"_id": "719_code", "title": "text_match", "text": "# Write a function that matches a string that has an a followed by zero or more b's.\nimport re\r\ndef text_match(text):\r\n        patterns = 'ab*?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')", "metadata": {}}
{"_id": "720_code", "title": "add_dict_to_tuple", "text": "# Write a function to add a dictionary to the tuple.\ndef add_dict_to_tuple(test_tup, test_dict):\r\n  test_tup = list(test_tup)\r\n  test_tup.append(test_dict)\r\n  test_tup = tuple(test_tup)\r\n  return (test_tup) ", "metadata": {}}
{"_id": "721_code", "title": "maxAverageOfPath", "text": "# Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.\nM = 100\r\ndef maxAverageOfPath(cost, N): \r\n\tdp = [[0 for i in range(N + 1)] for j in range(N + 1)] \r\n\tdp[0][0] = cost[0][0] \r\n\tfor i in range(1, N): \r\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0] \r\n\tfor j in range(1, N): \r\n\t\tdp[0][j] = dp[0][j - 1] + cost[0][j] \r\n\tfor i in range(1, N): \r\n\t\tfor j in range(1, N): \r\n\t\t\tdp[i][j] = max(dp[i - 1][j], \r\n\t\t\t\t\t\tdp[i][j - 1]) + cost[i][j] \r\n\treturn dp[N - 1][N - 1] / (2 * N - 1)", "metadata": {}}
{"_id": "722_code", "title": "filter_data", "text": "# Write a function to filter the height and width of students which are stored in a dictionary.\ndef filter_data(students,h,w):\r\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\r\n    return result    ", "metadata": {}}
{"_id": "723_code", "title": "count_same_pair", "text": "# Write a function to count the same pair in two given lists using map function.\nfrom operator import eq\r\ndef count_same_pair(nums1, nums2):\r\n    result = sum(map(eq, nums1, nums2))\r\n    return result", "metadata": {}}
{"_id": "724_code", "title": "power_base_sum", "text": "# Write a function to calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power):\r\n    return sum([int(i) for i in str(pow(base, power))])", "metadata": {}}
{"_id": "725_code", "title": "extract_quotation", "text": "# Write a function to extract values between quotation marks of the given string by using regex.\nimport re\r\ndef extract_quotation(text1):\r\n  return (re.findall(r'\"(.*?)\"', text1))", "metadata": {}}
{"_id": "726_code", "title": "multiply_elements", "text": "# Write a function to multiply the adjacent elements of the given tuple.\ndef multiply_elements(test_tup):\r\n  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) ", "metadata": {}}
{"_id": "727_code", "title": "remove_char", "text": "# Write a function to remove all characters except letters and numbers using regex\nimport re \r\ndef remove_char(S):\r\n  result = re.sub('[\\W_]+', '', S) \r\n  return result", "metadata": {}}
{"_id": "728_code", "title": "sum_list", "text": "# Write a function to sum elements in two lists.\ndef sum_list(lst1,lst2):\r\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \r\n  return res_list", "metadata": {}}
{"_id": "729_code", "title": "add_list", "text": "# Write a function to add two lists using map and lambda function.\ndef add_list(nums1,nums2):\r\n  result = map(lambda x, y: x + y, nums1, nums2)\r\n  return list(result)", "metadata": {}}
{"_id": "730_code", "title": "consecutive_duplicates", "text": "# Write a function to remove consecutive duplicates of a given list.\nfrom itertools import groupby\r\ndef consecutive_duplicates(nums):\r\n    return [key for key, group in groupby(nums)] ", "metadata": {}}
{"_id": "731_code", "title": "lateralsurface_cone", "text": "# Write a function to find the lateral surface area of a cone.\nimport math\r\ndef lateralsurface_cone(r,h):\r\n  l = math.sqrt(r * r + h * h)\r\n  LSA = math.pi * r  * l\r\n  return LSA", "metadata": {}}
{"_id": "732_code", "title": "replace_specialchar", "text": "# Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nimport re\r\ndef replace_specialchar(text):\r\n return (re.sub(\"[ ,.]\", \":\", text))\r", "metadata": {}}
{"_id": "733_code", "title": "find_first_occurrence", "text": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(A, x):\r\n    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            right = mid - 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result", "metadata": {}}
{"_id": "734_code", "title": "sum_Of_Subarray_Prod", "text": "# Write a python function to find sum of products of all possible subarrays.\ndef sum_Of_Subarray_Prod(arr,n):\r\n    ans = 0\r\n    res = 0\r\n    i = n - 1\r\n    while (i >= 0):\r\n        incr = arr[i]*(1 + res)\r\n        ans += incr\r\n        res = incr\r\n        i -= 1\r\n    return (ans)", "metadata": {}}
{"_id": "735_code", "title": "set_middle_bits", "text": "# Write a python function to toggle bits of the number except the first and the last bit.\ndef set_middle_bits(n):  \r\n    n |= n >> 1; \r\n    n |= n >> 2; \r\n    n |= n >> 4; \r\n    n |= n >> 8; \r\n    n |= n >> 16;  \r\n    return (n >> 1) ^ 1\r\ndef toggle_middle_bits(n): \r\n    if (n == 1): \r\n        return 1\r\n    return n ^ set_middle_bits(n) ", "metadata": {}}
{"_id": "736_code", "title": "left_insertion", "text": "# Write a function to locate the left insertion point for a specified value in sorted order.\nimport bisect\r\ndef left_insertion(a, x):\r\n    i = bisect.bisect_left(a, x)\r\n    return i", "metadata": {}}
{"_id": "737_code", "title": "check_str", "text": "# Write a function to check whether the given string is starting with a vowel or not using regex.\nimport re \r\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\r\ndef check_str(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn (\"Valid\") \r\n\telse: \r\n\t\treturn (\"Invalid\") ", "metadata": {}}
{"_id": "738_code", "title": "geometric_sum", "text": "# Write a function to calculate the geometric sum of n-1.\ndef geometric_sum(n):\r\n  if n < 0:\r\n    return 0\r\n  else:\r\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)", "metadata": {}}
{"_id": "739_code", "title": "find_Index", "text": "# Write a python function to find the index of smallest triangular number with n digits.\nimport math \r\ndef find_Index(n): \r\n    x = math.sqrt(2 * math.pow(10,(n - 1))); \r\n    return round(x); ", "metadata": {}}
{"_id": "740_code", "title": "tuple_to_dict", "text": "# Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\ndef tuple_to_dict(test_tup):\r\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\r\n  return (res) ", "metadata": {}}
{"_id": "741_code", "title": "all_Characters_Same", "text": "# Write a python function to check whether all the characters are same or not.\ndef all_Characters_Same(s) :\r\n    n = len(s)\r\n    for i in range(1,n) :\r\n        if s[i] != s[0] :\r\n            return False\r\n    return True", "metadata": {}}
{"_id": "742_code", "title": "area_tetrahedron", "text": "# Write a function to caluclate the area of a tetrahedron.\nimport math\r\ndef area_tetrahedron(side):\r\n  area = math.sqrt(3)*(side*side)\r\n  return area", "metadata": {}}
{"_id": "743_code", "title": "rotate_right", "text": "# Write a function to rotate a given list by specified number of items to the right direction.\ndef rotate_right(list1,m,n):\r\n  result =  list1[-(m):]+list1[:-(n)]\r\n  return result", "metadata": {}}
{"_id": "744_code", "title": "check_none", "text": "# Write a function to check if the given tuple has any none value or not.\ndef check_none(test_tup):\r\n  res = any(map(lambda ele: ele is None, test_tup))\r\n  return (res) ", "metadata": {}}
{"_id": "745_code", "title": "divisible_by_digits", "text": "# Write a function to find numbers within a given range where every number is divisible by every digit it contains.\ndef divisible_by_digits(startnum, endnum):\r\n    return [n for n in range(startnum, endnum+1) \\\r\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]", "metadata": {}}
{"_id": "746_code", "title": "sector_area", "text": "# Write a function to find area of a sector.\ndef sector_area(r,a):\r\n    pi=22/7\r\n    if a >= 360:\r\n        return None\r\n    sectorarea = (pi*r**2) * (a/360)\r\n    return sectorarea", "metadata": {}}
{"_id": "747_code", "title": "lcs_of_three", "text": "# Write a function to find the longest common subsequence for the given three string sequence.\ndef lcs_of_three(X, Y, Z, m, n, o): \r\n\tL = [[[0 for i in range(o+1)] for j in range(n+1)] \r\n\t\tfor k in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tfor k in range(o+1): \r\n\t\t\t\tif (i == 0 or j == 0 or k == 0): \r\n\t\t\t\t\tL[i][j][k] = 0\r\n\t\t\t\telif (X[i-1] == Y[j-1] and\r\n\t\t\t\t\tX[i-1] == Z[k-1]): \r\n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1\r\n\t\t\t\telse: \r\n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], \r\n\t\t\t\t\tL[i][j-1][k]), \r\n\t\t\t\t\t\t\t\t\tL[i][j][k-1]) \r\n\treturn L[m][n][o]", "metadata": {}}
{"_id": "748_code", "title": "capital_words_spaces", "text": "# Write a function to put spaces between words starting with capital letters in a given string by using regex.\nimport re\r\ndef capital_words_spaces(str1):\r\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)", "metadata": {}}
{"_id": "749_code", "title": "sort_numeric_strings", "text": "# Write a function to sort a given list of strings of numbers numerically.\ndef sort_numeric_strings(nums_str):\r\n    result = [int(x) for x in nums_str]\r\n    result.sort()\r\n    return result", "metadata": {}}
{"_id": "750_code", "title": "add_tuple", "text": "# Write a function to add the given tuple to the given list.\ndef add_tuple(test_list, test_tup):\r\n  test_list += test_tup\r\n  return (test_list) ", "metadata": {}}
{"_id": "751_code", "title": "check_min_heap", "text": "# Write a function to check if the given array represents min heap or not.\ndef check_min_heap(arr, i):\r\n    if 2 * i + 2 > len(arr):\r\n        return True\r\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap(arr, 2 * i + 1)\r\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \r\n                                      and check_min_heap(arr, 2 * i + 2))\r\n    return left_child and right_child", "metadata": {}}
{"_id": "752_code", "title": "jacobsthal_num", "text": "# Write a function to find the nth jacobsthal number.\ndef jacobsthal_num(n): \r\n\tdp = [0] * (n + 1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \r\n\treturn dp[n]", "metadata": {}}
{"_id": "753_code", "title": "min_k", "text": "# Write a function to find minimum k records from tuple list.\ndef min_k(test_list, K):\r\n  res = sorted(test_list, key = lambda x: x[1])[:K]\r\n  return (res) ", "metadata": {}}
{"_id": "754_code", "title": "extract_index_list", "text": "# Write a function to find common index elements from three lists.\ndef extract_index_list(l1, l2, l3):\r\n    result = []\r\n    for m, n, o in zip(l1, l2, l3):\r\n        if (m == n == o):\r\n            result.append(m)\r\n    return result", "metadata": {}}
{"_id": "755_code", "title": "second_smallest", "text": "# Write a function to find the second smallest number in a list.\ndef second_smallest(numbers):\r\n  if (len(numbers)<2):\r\n    return\r\n  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):\r\n    return\r\n  dup_items = set()\r\n  uniq_items = []\r\n  for x in numbers:\r\n    if x not in dup_items:\r\n      uniq_items.append(x)\r\n      dup_items.add(x)\r\n  uniq_items.sort()    \r\n  return  uniq_items[1] ", "metadata": {}}
{"_id": "756_code", "title": "text_match_zero_one", "text": "# Write a function that matches a string that has an a followed by zero or one 'b'.\nimport re\r\ndef text_match_zero_one(text):\r\n        patterns = 'ab?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')", "metadata": {}}
{"_id": "757_code", "title": "count_reverse_pairs", "text": "# Write a function to count the pairs of reverse strings in the given string list.\ndef count_reverse_pairs(test_list):\r\n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( \r\n\ttest_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) \r\n  return str(res)", "metadata": {}}
{"_id": "758_code", "title": "unique_sublists", "text": "# Write a function to count number of unique lists within a list.\ndef unique_sublists(list1):\r\n    result ={}\r\n    for l in  list1: \r\n        result.setdefault(tuple(l), list()).append(1) \r\n    for a, b in result.items(): \r\n        result[a] = sum(b)\r\n    return result", "metadata": {}}
{"_id": "759_code", "title": "is_decimal", "text": "# Write a function to check a decimal with a precision of 2.\ndef is_decimal(num):\r\n    import re\r\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n    result = dnumre.search(num)\r\n    return bool(result)", "metadata": {}}
{"_id": "760_code", "title": "unique_Element", "text": "# Write a python function to check whether an array contains only one distinct element or not.\ndef unique_Element(arr,n):\r\n    s = set(arr)\r\n    if (len(s) == 1):\r\n        return ('YES')\r\n    else:\r\n        return ('NO')", "metadata": {}}
{"_id": "761_code", "title": "arc_length", "text": "# Write a function to caluclate arc length of an angle.\ndef arc_length(d,a):\r\n    pi=22/7\r\n    if a >= 360:\r\n        return None\r\n    arclength = (pi*d) * (a/360)\r\n    return arclength", "metadata": {}}
{"_id": "762_code", "title": "check_monthnumber_number", "text": "# Write a function to check whether the given month number contains 30 days or not.\ndef check_monthnumber_number(monthnum3):\r\n  if(monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11):\r\n    return True\r\n  else:\r\n    return False", "metadata": {}}
{"_id": "763_code", "title": "find_Min_Diff", "text": "# Write a python function to find the minimum difference between any two elements in a given array.\ndef find_Min_Diff(arr,n): \r\n    arr = sorted(arr) \r\n    diff = 10**20 \r\n    for i in range(n-1): \r\n        if arr[i+1] - arr[i] < diff: \r\n            diff = arr[i+1] - arr[i]  \r\n    return diff ", "metadata": {}}
{"_id": "764_code", "title": "number_ctr", "text": "# Write a python function to count numeric values in a given string.\ndef number_ctr(str):\r\n      number_ctr= 0\r\n      for i in range(len(str)):\r\n          if str[i] >= '0' and str[i] <= '9': number_ctr += 1     \r\n      return  number_ctr", "metadata": {}}
{"_id": "765_code", "title": "is_polite", "text": "# Write a function to find nth polite number.\nimport math \r\ndef is_polite(n): \r\n\tn = n + 1\r\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) ", "metadata": {}}
{"_id": "766_code", "title": "pair_wise", "text": "# Write a function to iterate over all pairs of consecutive items in a given list.\ndef pair_wise(l1):\r\n    temp = []\r\n    for i in range(len(l1) - 1):\r\n        current_element, next_element = l1[i], l1[i + 1]\r\n        x = (current_element, next_element)\r\n        temp.append(x)\r\n    return temp", "metadata": {}}
{"_id": "767_code", "title": "get_Pairs_Count", "text": "# Write a python function to count the number of pairs whose sum is equal to ‘sum’.\ndef get_Pairs_Count(arr,n,sum):\r\n    count = 0  \r\n    for i in range(0,n):\r\n        for j in range(i + 1,n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count", "metadata": {}}
{"_id": "768_code", "title": "check_Odd_Parity", "text": "# Write a python function to check for odd parity of a given number.\ndef check_Odd_Parity(x): \r\n    parity = 0\r\n    while (x != 0): \r\n        x = x & (x - 1) \r\n        parity += 1\r\n    if (parity % 2 == 1): \r\n        return True\r\n    else: \r\n        return False", "metadata": {}}
{"_id": "769_code", "title": "Diff", "text": "# Write a python function to get the difference between two lists.\ndef Diff(li1,li2):\r\n    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\r\n ", "metadata": {}}
{"_id": "770_code", "title": "odd_Num_Sum", "text": "# Write a python function to find the sum of fourth power of first n odd natural numbers.\ndef odd_Num_Sum(n) : \r\n    j = 0\r\n    sm = 0\r\n    for i in range(1,n + 1) : \r\n        j = (2*i-1) \r\n        sm = sm + (j*j*j*j)   \r\n    return sm ", "metadata": {}}
{"_id": "771_code", "title": "check_expression", "text": "# Write a function to check if the given expression is balanced or not.\nfrom collections import deque\r\ndef check_expression(exp):\r\n    if len(exp) & 1:\r\n        return False\r\n    stack = deque()\r\n    for ch in exp:\r\n        if ch == '(' or ch == '{' or ch == '[':\r\n            stack.append(ch)\r\n        if ch == ')' or ch == '}' or ch == ']':\r\n            if not stack:\r\n                return False\r\n            top = stack.pop()\r\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\r\n                return False\r\n    return not stack", "metadata": {}}
{"_id": "772_code", "title": "remove_length", "text": "# Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\r\n  temp = test_str.split()\r\n  res = [ele for ele in temp if len(ele) != K]\r\n  res = ' '.join(res)\r\n  return (res) ", "metadata": {}}
{"_id": "773_code", "title": "occurance_substring", "text": "# Write a function to find the occurrence and position of the substrings within a string.\nimport re\r\ndef occurance_substring(text,pattern):\r\n for match in re.finditer(pattern, text):\r\n    s = match.start()\r\n    e = match.end()\r\n    return (text[s:e], s, e)", "metadata": {}}
{"_id": "774_code", "title": "check_email", "text": "# Write a function to check if the string is a valid email address or not using regex.\nimport re \r\nregex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\r\ndef check_email(email): \r\n\tif(re.search(regex,email)): \r\n\t\treturn (\"Valid Email\") \r\n\telse: \r\n\t\treturn (\"Invalid Email\") ", "metadata": {}}
{"_id": "775_code", "title": "odd_position", "text": "# Write a python function to check whether every odd index contains odd numbers of a given list.\ndef odd_position(nums):\r\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))", "metadata": {}}
{"_id": "776_code", "title": "count_vowels", "text": "# Write a function to count those characters which have vowels as their neighbors in the given string.\ndef count_vowels(test_str):\r\n  res = 0\r\n  vow_list = ['a', 'e', 'i', 'o', 'u']\r\n  for idx in range(1, len(test_str) - 1):\r\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\r\n      res += 1\r\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\r\n    res += 1\r\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\r\n    res += 1\r\n  return (res) ", "metadata": {}}
{"_id": "777_code", "title": "find_Sum", "text": "# Write a python function to find the sum of non-repeated elements in a given array.\ndef find_Sum(arr,n): \r\n    arr.sort() \r\n    sum = arr[0] \r\n    for i in range(0,n-1): \r\n        if (arr[i] != arr[i+1]): \r\n            sum = sum + arr[i+1]   \r\n    return sum", "metadata": {}}
{"_id": "778_code", "title": "pack_consecutive_duplicates", "text": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\nfrom itertools import groupby\r\ndef pack_consecutive_duplicates(list1):\r\n    return [list(group) for key, group in groupby(list1)]", "metadata": {}}
{"_id": "779_code", "title": "unique_sublists", "text": "# Write a function to count the number of unique lists within a list.\ndef unique_sublists(list1):\r\n    result ={}\r\n    for l in list1: \r\n        result.setdefault(tuple(l), list()).append(1) \r\n    for a, b in result.items(): \r\n        result[a] = sum(b)\r\n    return result", "metadata": {}}
{"_id": "780_code", "title": "find_combinations", "text": "# Write a function to find the combinations of sums with tuples in the given tuple list.\nfrom itertools import combinations \r\ndef find_combinations(test_list):\r\n  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\r\n  return (res) ", "metadata": {}}
{"_id": "781_code", "title": "count_Divisors", "text": "# Write a python function to check whether the count of divisors is even or odd.\nimport math \r\ndef count_Divisors(n) : \r\n    count = 0\r\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \r\n        if (n % i == 0) : \r\n            if( n // i == i) : \r\n                count = count + 1\r\n            else : \r\n                count = count + 2\r\n    if (count % 2 == 0) : \r\n        return (\"Even\") \r\n    else : \r\n        return (\"Odd\") ", "metadata": {}}
{"_id": "782_code", "title": "Odd_Length_Sum", "text": "# Write a python function to find the sum of all odd length subarrays.\ndef Odd_Length_Sum(arr):\r\n    Sum = 0\r\n    l = len(arr)\r\n    for i in range(l):\r\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\r\n    return Sum", "metadata": {}}
{"_id": "783_code", "title": "rgb_to_hsv", "text": "# Write a function to convert rgb color to hsv color.\ndef rgb_to_hsv(r, g, b):\r\n    r, g, b = r/255.0, g/255.0, b/255.0\r\n    mx = max(r, g, b)\r\n    mn = min(r, g, b)\r\n    df = mx-mn\r\n    if mx == mn:\r\n        h = 0\r\n    elif mx == r:\r\n        h = (60 * ((g-b)/df) + 360) % 360\r\n    elif mx == g:\r\n        h = (60 * ((b-r)/df) + 120) % 360\r\n    elif mx == b:\r\n        h = (60 * ((r-g)/df) + 240) % 360\r\n    if mx == 0:\r\n        s = 0\r\n    else:\r\n        s = (df/mx)*100\r\n    v = mx*100\r\n    return h, s, v", "metadata": {}}
{"_id": "784_code", "title": "mul_even_odd", "text": "# Write a function to find the product of first even and odd number of a given list.\ndef mul_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even*first_odd)", "metadata": {}}
{"_id": "785_code", "title": "tuple_str_int", "text": "# Write a function to convert tuple string to integer tuple.\ndef tuple_str_int(test_str):\r\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\r\n  return (res) ", "metadata": {}}
{"_id": "786_code", "title": "right_insertion", "text": "# Write a function to locate the right insertion point for a specified value in sorted order.\nimport bisect\r\ndef right_insertion(a, x):\r\n    i = bisect.bisect_right(a, x)\r\n    return i", "metadata": {}}
{"_id": "787_code", "title": "text_match_three", "text": "# Write a function that matches a string that has an a followed by three 'b'.\nimport re\r\ndef text_match_three(text):\r\n        patterns = 'ab{3}?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')", "metadata": {}}
{"_id": "788_code", "title": "new_tuple", "text": "# Write a function to create a new tuple from the given string and list.\ndef new_tuple(test_list, test_str):\r\n  res = tuple(test_list + [test_str])\r\n  return (res) ", "metadata": {}}
{"_id": "789_code", "title": "perimeter_polygon", "text": "# Write a function to calculate the perimeter of a regular polygon.\nfrom math import tan, pi\r\ndef perimeter_polygon(s,l):\r\n  perimeter = s*l\r\n  return perimeter", "metadata": {}}
{"_id": "790_code", "title": "even_position", "text": "# Write a python function to check whether every even index contains even numbers of a given list.\ndef even_position(nums):\r\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))", "metadata": {}}
{"_id": "791_code", "title": "remove_nested", "text": "# Write a function to remove the nested record from the given tuple.\ndef remove_nested(test_tup):\r\n  res = tuple()\r\n  for count, ele in enumerate(test_tup):\r\n    if not isinstance(ele, tuple):\r\n      res = res + (ele, )\r\n  return (res) ", "metadata": {}}
{"_id": "792_code", "title": "count_list", "text": "# Write a python function to count the number of lists in a given number of lists.\ndef count_list(input_list): \r\n    return len(input_list)", "metadata": {}}
{"_id": "793_code", "title": "last", "text": "# Write a python function to find the last position of an element in a sorted array.\ndef last(arr,x,n):\r\n    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            low = mid + 1\r\n    return res", "metadata": {}}
{"_id": "794_code", "title": "text_starta_endb", "text": "# Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nimport re\r\ndef text_starta_endb(text):\r\n        patterns = 'a.*?b$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')", "metadata": {}}
{"_id": "795_code", "title": "cheap_items", "text": "# Write a function to find the n - cheap price items from a given dataset using heap queue algorithm.\nimport heapq\r\ndef cheap_items(items,n):\r\n  cheap_items = heapq.nsmallest(n, items, key=lambda s: s['price'])\r\n  return cheap_items", "metadata": {}}
{"_id": "796_code", "title": "return_sum", "text": "# Write function to find the sum of all items in the given dictionary.\ndef return_sum(dict):\r\n  sum = 0\r\n  for i in dict.values():\r\n    sum = sum + i\r\n  return sum", "metadata": {}}
{"_id": "797_code", "title": "sum_Odd", "text": "# Write a python function to find the sum of all odd natural numbers within the range l and r.\ndef sum_Odd(n): \r\n    terms = (n + 1)//2\r\n    sum1 = terms * terms \r\n    return sum1  \r\ndef sum_in_Range(l,r): \r\n    return sum_Odd(r) - sum_Odd(l - 1)", "metadata": {}}
{"_id": "798_code", "title": "_sum", "text": "# Write a python function to find the sum of an array.\ndef _sum(arr):  \r\n    sum=0\r\n    for i in arr: \r\n        sum = sum + i      \r\n    return(sum)  ", "metadata": {}}
{"_id": "799_code", "title": "left_Rotate", "text": "# Write a python function to left rotate the bits of a given number.\nINT_BITS = 32\r\ndef left_Rotate(n,d):   \r\n    return (n << d)|(n >> (INT_BITS - d))  ", "metadata": {}}
{"_id": "800_code", "title": "remove_all_spaces", "text": "# Write a function to remove all whitespaces from a string.\nimport re\r\ndef remove_all_spaces(text):\r\n return (re.sub(r'\\s+', '',text))", "metadata": {}}
{"_id": "801_code", "title": "test_three_equal", "text": "# Write a python function to count the number of equal numbers from three given integers.\ndef test_three_equal(x,y,z):\r\n  result= set([x,y,z])\r\n  if len(result)==3:\r\n    return 0\r\n  else:\r\n    return (4-len(result))", "metadata": {}}
{"_id": "802_code", "title": "count_Rotation", "text": "# Write a python function to count the number of rotations required to generate a sorted array.\ndef count_Rotation(arr,n):   \r\n    for i in range (1,n): \r\n        if (arr[i] < arr[i - 1]): \r\n            return i  \r\n    return 0", "metadata": {}}
{"_id": "803_code", "title": "is_Perfect_Square", "text": "# Write a python function to check whether the given number is a perfect square or not.\ndef is_Perfect_Square(n) :\r\n    i = 1\r\n    while (i * i<= n):\r\n        if ((n % i == 0) and (n / i == i)):\r\n            return True     \r\n        i = i + 1\r\n    return False", "metadata": {}}
{"_id": "804_code", "title": "is_Product_Even", "text": "# Write a python function to check whether the product of numbers is even or not.\ndef is_Product_Even(arr,n): \r\n    for i in range(0,n): \r\n        if ((arr[i] & 1) == 0): \r\n            return True\r\n    return False", "metadata": {}}
{"_id": "805_code", "title": "max_sum_list", "text": "# Write a function to find the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists):\r\n return max(lists, key=sum)", "metadata": {}}
{"_id": "806_code", "title": "max_run_uppercase", "text": "# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str):\r\n  cnt = 0\r\n  res = 0\r\n  for idx in range(0, len(test_str)):\r\n    if test_str[idx].isupper():\r\n      cnt += 1\r\n    else:\r\n      res = cnt\r\n      cnt = 0\r\n  if test_str[len(test_str) - 1].isupper():\r\n    res = cnt\r\n  return (res)", "metadata": {}}
{"_id": "807_code", "title": "first_odd", "text": "# Write a python function to find the first odd number in a given list of numbers.\ndef first_odd(nums):\r\n  first_odd = next((el for el in nums if el%2!=0),-1)\r\n  return first_odd", "metadata": {}}
{"_id": "808_code", "title": "check_K", "text": "# Write a function to check if the given tuples contain the k or not.\ndef check_K(test_tup, K):\r\n  res = False\r\n  for ele in test_tup:\r\n    if ele == K:\r\n      res = True\r\n      break\r\n  return (res) ", "metadata": {}}
{"_id": "809_code", "title": "check_smaller", "text": "# Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.\ndef check_smaller(test_tup1, test_tup2):\r\n  res = all(x > y for x, y in zip(test_tup1, test_tup2))\r\n  return (res) ", "metadata": {}}
{"_id": "810_code", "title": "count_variable", "text": "# Write a function to iterate over elements repeating each as many times as its count.\nfrom collections import Counter\r\ndef count_variable(a,b,c,d):\r\n  c = Counter(p=a, q=b, r=c, s=d)\r\n  return list(c.elements())", "metadata": {}}
{"_id": "811_code", "title": "check_identical", "text": "# Write a function to check if two lists of tuples are identical or not.\ndef check_identical(test_list1, test_list2):\r\n  res = test_list1 == test_list2\r\n  return (res) ", "metadata": {}}
{"_id": "812_code", "title": "road_rd", "text": "# Write a function to abbreviate 'road' as 'rd.' in a given string.\nimport re\r\ndef road_rd(street):\r\n  return (re.sub('Road$', 'Rd.', street))", "metadata": {}}
{"_id": "813_code", "title": "string_length", "text": "# Write a function to find length of the string.\ndef string_length(str1):\r\n    count = 0\r\n    for char in str1:\r\n        count += 1\r\n    return count", "metadata": {}}
{"_id": "814_code", "title": "rombus_area", "text": "# Write a function to find the area of a rombus.\ndef rombus_area(p,q):\r\n  area=(p*q)/2\r\n  return area", "metadata": {}}
{"_id": "815_code", "title": "sort_by_dnf", "text": "# Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.\ndef sort_by_dnf(arr, n):\r\n  low=0\r\n  mid=0\r\n  high=n-1\r\n  while mid <= high:\r\n    if arr[mid] == 0:\r\n      arr[low], arr[mid] = arr[mid], arr[low]\r\n      low = low + 1\r\n      mid = mid + 1\r\n    elif arr[mid] == 1:\r\n      mid = mid + 1\r\n    else:\r\n      arr[mid], arr[high] = arr[high], arr[mid]\r\n      high = high - 1\r\n  return arr", "metadata": {}}
{"_id": "816_code", "title": "clear_tuple", "text": "# Write a function to clear the values of the given tuples.\ndef clear_tuple(test_tup):\r\n  temp = list(test_tup)\r\n  temp.clear()\r\n  test_tup = tuple(temp)\r\n  return (test_tup) ", "metadata": {}}
{"_id": "817_code", "title": "div_of_nums", "text": "# Write a function to find numbers divisible by m or n from a list of numbers using lambda function.\ndef div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 or x % n == 0), nums)) \r\n return result", "metadata": {}}
{"_id": "818_code", "title": "lower_ctr", "text": "# Write a python function to count lower case letters in a given string.\ndef lower_ctr(str):\r\n      lower_ctr= 0\r\n      for i in range(len(str)):\r\n          if str[i] >= 'a' and str[i] <= 'z': lower_ctr += 1     \r\n      return  lower_ctr", "metadata": {}}
{"_id": "819_code", "title": "count_duplic", "text": "# Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.\ndef count_duplic(lists):\r\n    element = []\r\n    frequency = []\r\n    if not lists:\r\n        return element\r\n    running_count = 1\r\n    for i in range(len(lists)-1):\r\n        if lists[i] == lists[i+1]:\r\n            running_count += 1\r\n        else:\r\n            frequency.append(running_count)\r\n            element.append(lists[i])\r\n            running_count = 1\r\n    frequency.append(running_count)\r\n    element.append(lists[i+1])\r\n    return element,frequency\r\n", "metadata": {}}
{"_id": "820_code", "title": "check_monthnum_number", "text": "# Write a function to check whether the given month number contains 28 days or not.\ndef check_monthnum_number(monthnum1):\r\n  if monthnum1 == 2:\r\n    return True\r\n  else:\r\n    return False", "metadata": {}}
{"_id": "821_code", "title": "merge_dictionaries", "text": "# Write a function to merge two dictionaries into a single expression.\nimport collections as ct\r\ndef merge_dictionaries(dict1,dict2):\r\n    merged_dict = dict(ct.ChainMap({}, dict1, dict2))\r\n    return merged_dict", "metadata": {}}
{"_id": "822_code", "title": "pass_validity", "text": "# Write a function to return true if the password is valid.\nimport re\r\ndef pass_validity(p):\r\n x = True\r\n while x:  \r\n    if (len(p)<6 or len(p)>12):\r\n        break\r\n    elif not re.search(\"[a-z]\",p):\r\n        break\r\n    elif not re.search(\"[0-9]\",p):\r\n        break\r\n    elif not re.search(\"[A-Z]\",p):\r\n        break\r\n    elif not re.search(\"[$#@]\",p):\r\n        break\r\n    elif re.search(\"\\s\",p):\r\n        break\r\n    else:\r\n        return True\r\n        x=False\r\n        break\r\n\r\n if x:\r\n    return False", "metadata": {}}
{"_id": "823_code", "title": "check_substring", "text": "# Write a function to check if the given string starts with a substring using regex.\nimport re \r\ndef check_substring(string, sample) : \r\n  if (sample in string): \r\n      y = \"\\A\" + sample \r\n      x = re.search(y, string) \r\n      if x : \r\n          return (\"string starts with the given substring\") \r\n      else : \r\n          return (\"string doesnt start with the given substring\") \r\n  else : \r\n      return (\"entered string isnt a substring\")", "metadata": {}}
{"_id": "824_code", "title": "remove_even", "text": "# Write a python function to remove even numbers from a given list.\ndef remove_even(l):\r\n    for i in l:\r\n        if i % 2 == 0:\r\n            l.remove(i)\r\n    return l", "metadata": {}}
{"_id": "825_code", "title": "access_elements", "text": "# Write a python function to access multiple elements of specified index from a given list.\ndef access_elements(nums, list_index):\r\n    result = [nums[i] for i in list_index]\r\n    return result", "metadata": {}}
{"_id": "826_code", "title": "check_Type_Of_Triangle", "text": "# Write a python function to find the type of triangle from the given sides.\ndef check_Type_Of_Triangle(a,b,c): \r\n    sqa = pow(a,2) \r\n    sqb = pow(b,2) \r\n    sqc = pow(c,2) \r\n    if (sqa == sqa + sqb or sqb == sqa + sqc or sqc == sqa + sqb): \r\n        return (\"Right-angled Triangle\") \r\n    elif (sqa > sqc + sqb or sqb > sqa + sqc or sqc > sqa + sqb): \r\n        return (\"Obtuse-angled Triangle\") \r\n    else: \r\n        return (\"Acute-angled Triangle\") ", "metadata": {}}
{"_id": "827_code", "title": "sum_column", "text": "# Write a function to sum a specific column of a list in a given list of lists.\ndef sum_column(list1, C):\r\n    result = sum(row[C] for row in list1)\r\n    return result", "metadata": {}}
{"_id": "828_code", "title": "count_alpha_dig_spl", "text": "# Write a function to count alphabets,digits and special charactes in a given string.\ndef count_alpha_dig_spl(string):\r\n  alphabets=digits = special = 0\r\n  for i in range(len(string)):\r\n    if(string[i].isalpha()):\r\n        alphabets = alphabets + 1\r\n    elif(string[i].isdigit()):\r\n        digits = digits + 1\r\n    else:\r\n        special = special + 1\r\n  return (alphabets,digits,special)   ", "metadata": {}}
{"_id": "829_code", "title": "second_frequent", "text": "# Write a function to find out the second most repeated (or frequent) string in the given sequence.\nfrom collections import Counter \r\n\t\r\ndef second_frequent(input): \r\n\tdict = Counter(input) \r\n\tvalue = sorted(dict.values(), reverse=True)  \r\n\tsecond_large = value[1] \r\n\tfor (key, val) in dict.items(): \r\n\t\tif val == second_large: \r\n\t\t\treturn (key) ", "metadata": {}}
{"_id": "830_code", "title": "round_up", "text": "# Write a function to round up a number to specific digits.\nimport math\r\ndef round_up(a, digits):\r\n    n = 10**-digits\r\n    return round(math.ceil(a / n) * n, digits)", "metadata": {}}
{"_id": "831_code", "title": "count_Pairs", "text": "# Write a python function to count equal element pairs from the given array.\ndef count_Pairs(arr,n): \r\n    cnt = 0; \r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] == arr[j]): \r\n                cnt += 1; \r\n    return cnt; ", "metadata": {}}
{"_id": "832_code", "title": "extract_max", "text": "# Write a function to extract the maximum numeric value from a string by using regex.\nimport re \r\ndef extract_max(input): \r\n\tnumbers = re.findall('\\d+',input) \r\n\tnumbers = map(int,numbers) \r\n\treturn max(numbers)", "metadata": {}}
{"_id": "833_code", "title": "get_key", "text": "# Write a function to get dictionary keys as a list.\ndef get_key(dict): \r\n    list = [] \r\n    for key in dict.keys(): \r\n        list.append(key)           \r\n    return list", "metadata": {}}
{"_id": "834_code", "title": "generate_matrix", "text": "# Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.\ndef generate_matrix(n):\r\n        if n<=0:\r\n            return [] \r\n        matrix=[row[:] for row in [[0]*n]*n]        \r\n        row_st=0\r\n        row_ed=n-1        \r\n        col_st=0\r\n        col_ed=n-1\r\n        current=1        \r\n        while (True):\r\n            if current>n*n:\r\n                break\r\n            for c in range (col_st, col_ed+1):\r\n                matrix[row_st][c]=current\r\n                current+=1\r\n            row_st+=1\r\n            for r in range (row_st, row_ed+1):\r\n                matrix[r][col_ed]=current\r\n                current+=1\r\n            col_ed-=1\r\n            for c in range (col_ed, col_st-1, -1):\r\n                matrix[row_ed][c]=current\r\n                current+=1\r\n            row_ed-=1\r\n            for r in range (row_ed, row_st-1, -1):\r\n                matrix[r][col_st]=current\r\n                current+=1\r\n            col_st+=1\r\n        return matrix", "metadata": {}}
{"_id": "835_code", "title": "slope", "text": "# Write a python function to find the slope of a line.\ndef slope(x1,y1,x2,y2): \r\n    return (float)(y2-y1)/(x2-x1)  ", "metadata": {}}
{"_id": "836_code", "title": "max_sub_array_sum", "text": "# Write a function to find length of the subarray having maximum sum.\nfrom sys import maxsize \r\ndef max_sub_array_sum(a,size): \r\n\tmax_so_far = -maxsize - 1\r\n\tmax_ending_here = 0\r\n\tstart = 0\r\n\tend = 0\r\n\ts = 0\r\n\tfor i in range(0,size): \r\n\t\tmax_ending_here += a[i] \r\n\t\tif max_so_far < max_ending_here: \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\t\tstart = s \r\n\t\t\tend = i \r\n\t\tif max_ending_here < 0: \r\n\t\t\tmax_ending_here = 0\r\n\t\t\ts = i+1\r\n\treturn (end - start + 1)", "metadata": {}}
{"_id": "837_code", "title": "cube_Sum", "text": "# Write a python function to find the cube sum of first n odd natural numbers.\ndef cube_Sum(n): \r\n    sum = 0   \r\n    for i in range(0,n) : \r\n        sum += (2*i+1)*(2*i+1)*(2*i+1) \r\n    return sum", "metadata": {}}
{"_id": "838_code", "title": "min_Swaps", "text": "# Write a python function to find minimum number swaps required to make two binary strings equal.\ndef min_Swaps(s1,s2) :  \r\n    c0 = 0; c1 = 0;  \r\n    for i in range(len(s1)) :  \r\n        if (s1[i] == '0' and s2[i] == '1') : \r\n            c0 += 1;    \r\n        elif (s1[i] == '1' and s2[i] == '0') : \r\n            c1 += 1;  \r\n    result = c0 // 2 + c1 // 2;  \r\n    if (c0 % 2 == 0 and c1 % 2 == 0) : \r\n        return result;  \r\n    elif ((c0 + c1) % 2 == 0) : \r\n        return result + 2;  \r\n    else : \r\n        return -1;  ", "metadata": {}}
{"_id": "839_code", "title": "sort_tuple", "text": "# Write a function to sort the tuples alphabetically by the first item of each tuple.\ndef sort_tuple(tup): \r\n\tn = len(tup) \r\n\tfor i in range(n): \r\n\t\tfor j in range(n-i-1): \r\n\t\t\tif tup[j][0] > tup[j + 1][0]: \r\n\t\t\t\ttup[j], tup[j + 1] = tup[j + 1], tup[j] \r\n\treturn tup", "metadata": {}}
{"_id": "840_code", "title": "Check_Solution", "text": "# Write a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.\ndef Check_Solution(a,b,c):  \r\n    if b == 0:  \r\n        return (\"Yes\")  \r\n    else: \r\n        return (\"No\")  ", "metadata": {}}
{"_id": "841_code", "title": "get_inv_count", "text": "# Write a function to count the number of inversions in the given array.\ndef get_inv_count(arr, n): \r\n\tinv_count = 0\r\n\tfor i in range(n): \r\n\t\tfor j in range(i + 1, n): \r\n\t\t\tif (arr[i] > arr[j]): \r\n\t\t\t\tinv_count += 1\r\n\treturn inv_count ", "metadata": {}}
{"_id": "842_code", "title": "get_odd_occurence", "text": "# Write a function to find the number which occurs for odd number of times in the given array.\ndef get_odd_occurence(arr, arr_size):\r\n  for i in range(0, arr_size):\r\n    count = 0\r\n    for j in range(0, arr_size):\r\n      if arr[i] == arr[j]:\r\n        count += 1\r\n    if (count % 2 != 0):\r\n      return arr[i]\r\n  return -1", "metadata": {}}
{"_id": "843_code", "title": "nth_super_ugly_number", "text": "# Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.\nimport heapq\r\ndef nth_super_ugly_number(n, primes):\r\n    uglies = [1]\r\n    def gen(prime):\r\n        for ugly in uglies:\r\n            yield ugly * prime\r\n    merged = heapq.merge(*map(gen, primes))\r\n    while len(uglies) < n:\r\n        ugly = next(merged)\r\n        if ugly != uglies[-1]:\r\n            uglies.append(ugly)\r\n    return uglies[-1]", "metadata": {}}
{"_id": "844_code", "title": "get_Number", "text": "# Write a python function to find the kth element in an array containing odd elements first and then even elements.\ndef get_Number(n, k): \r\n    arr = [0] * n; \r\n    i = 0; \r\n    odd = 1; \r\n    while (odd <= n):   \r\n        arr[i] = odd; \r\n        i += 1; \r\n        odd += 2;\r\n    even = 2; \r\n    while (even <= n): \r\n        arr[i] = even; \r\n        i += 1;\r\n        even += 2; \r\n    return arr[k - 1]; ", "metadata": {}}
{"_id": "845_code", "title": "find_Digits", "text": "# Write a python function to count the number of digits in factorial of a given number.\nimport math \r\ndef find_Digits(n): \r\n    if (n < 0): \r\n        return 0;\r\n    if (n <= 1): \r\n        return 1; \r\n    x = ((n * math.log10(n / math.e) + math.log10(2 * math.pi * n) /2.0)); \r\n    return math.floor(x) + 1; ", "metadata": {}}
{"_id": "846_code", "title": "find_platform", "text": "# Write a function to find the minimum number of platforms required for a railway/bus station.\ndef find_platform(arr, dep, n): \r\n    arr.sort() \r\n    dep.sort() \r\n    plat_needed = 1\r\n    result = 1\r\n    i = 1\r\n    j = 0\r\n    while (i < n and j < n): \r\n        if (arr[i] <= dep[j]):           \r\n            plat_needed+= 1\r\n            i+= 1\r\n        elif (arr[i] > dep[j]):           \r\n            plat_needed-= 1\r\n            j+= 1\r\n        if (plat_needed > result):  \r\n            result = plat_needed           \r\n    return result", "metadata": {}}
{"_id": "847_code", "title": "lcopy", "text": "# Write a python function to copy a list from a singleton tuple.\ndef lcopy(xs):\n  return xs[:]\n", "metadata": {}}
{"_id": "848_code", "title": "area_trapezium", "text": "# Write a function to find the area of a trapezium.\ndef area_trapezium(base1,base2,height):\r\n area = 0.5 * (base1 + base2) * height\r\n return area", "metadata": {}}
{"_id": "849_code", "title": "Sum", "text": "# Write a python function to find sum of all prime divisors of a given number.\ndef Sum(N): \r\n    SumOfPrimeDivisors = [0]*(N + 1)   \r\n    for i in range(2,N + 1) : \r\n        if (SumOfPrimeDivisors[i] == 0) : \r\n            for j in range(i,N + 1,i) : \r\n                SumOfPrimeDivisors[j] += i           \r\n    return SumOfPrimeDivisors[N] ", "metadata": {}}
{"_id": "850_code", "title": "is_triangleexists", "text": "# Write a function to check if a triangle of positive area is possible with the given angles.\ndef is_triangleexists(a,b,c): \r\n    if(a != 0 and b != 0 and c != 0 and (a + b + c)== 180): \r\n        if((a + b)>= c or (b + c)>= a or (a + c)>= b): \r\n            return True \r\n        else:\r\n            return False\r\n    else:\r\n        return False", "metadata": {}}
{"_id": "851_code", "title": "Sum_of_Inverse_Divisors", "text": "# Write a python function to find sum of inverse of divisors.\ndef Sum_of_Inverse_Divisors(N,Sum): \r\n    ans = float(Sum)*1.0 /float(N);  \r\n    return round(ans,2); ", "metadata": {}}
{"_id": "852_code", "title": "remove_negs", "text": "# Write a python function to remove negative numbers from a list.\ndef remove_negs(num_list): \r\n    for item in num_list: \r\n        if item < 0: \r\n           num_list.remove(item) \r\n    return num_list", "metadata": {}}
{"_id": "853_code", "title": "sum_of_odd_Factors", "text": "# Write a python function to find sum of odd factors of a number.\nimport math\r\ndef sum_of_odd_Factors(n): \r\n    res = 1\r\n    while n % 2 == 0: \r\n        n = n // 2 \r\n    for i in range(3,int(math.sqrt(n) + 1)): \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while n % i == 0: \r\n            count+=1 \r\n            n = n // i \r\n            curr_term *= i \r\n            curr_sum += curr_term    \r\n        res *= curr_sum  \r\n    if n >= 2: \r\n        res *= (1 + n) \r\n    return res ", "metadata": {}}
{"_id": "854_code", "title": "raw_heap", "text": "# Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.\nimport heapq as hq\r\ndef raw_heap(rawheap):\r\n  hq.heapify(rawheap)\r\n  return rawheap", "metadata": {}}
{"_id": "855_code", "title": "check_Even_Parity", "text": "# Write a python function to check for even parity of a given number.\ndef check_Even_Parity(x): \r\n    parity = 0\r\n    while (x != 0): \r\n        x = x & (x - 1) \r\n        parity += 1\r\n    if (parity % 2 == 0): \r\n        return True\r\n    else: \r\n        return False", "metadata": {}}
{"_id": "856_code", "title": "find_Min_Swaps", "text": "# Write a python function to find minimum adjacent swaps required to sort binary array.\ndef find_Min_Swaps(arr,n) : \r\n    noOfZeroes = [0] * n \r\n    count = 0 \r\n    noOfZeroes[n - 1] = 1 - arr[n - 1] \r\n    for i in range(n-2,-1,-1) : \r\n        noOfZeroes[i] = noOfZeroes[i + 1] \r\n        if (arr[i] == 0) : \r\n            noOfZeroes[i] = noOfZeroes[i] + 1\r\n    for i in range(0,n) : \r\n        if (arr[i] == 1) : \r\n            count = count + noOfZeroes[i] \r\n    return count ", "metadata": {}}
{"_id": "857_code", "title": "listify_list", "text": "# Write a function to list out the list of given strings individually using map function.\ndef listify_list(list1):\r\n  result = list(map(list,list1)) \r\n  return result ", "metadata": {}}
{"_id": "858_code", "title": "count_list", "text": "# Write a function to count number of lists in a given list of lists and square the count.\ndef count_list(input_list): \r\n    return (len(input_list))**2", "metadata": {}}
{"_id": "859_code", "title": "sub_lists", "text": "# Write a function to generate all sublists of a given list.\nfrom itertools import combinations\r\ndef sub_lists(my_list):\r\n\tsubs = []\r\n\tfor i in range(0, len(my_list)+1):\r\n\t  temp = [list(x) for x in combinations(my_list, i)]\r\n\t  if len(temp)>0:\r\n\t    subs.extend(temp)\r\n\treturn subs", "metadata": {}}
{"_id": "860_code", "title": "check_alphanumeric", "text": "# Write a function to check whether the given string is ending with only alphanumeric characters or not using regex.\nimport re \r\nregex = '[a-zA-z0-9]$'\r\ndef check_alphanumeric(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn (\"Accept\") \r\n\telse: \r\n\t\treturn (\"Discard\") ", "metadata": {}}
{"_id": "861_code", "title": "anagram_lambda", "text": "# Write a function to find all anagrams of a string in a given list of strings using lambda function.\nfrom collections import Counter \r\ndef anagram_lambda(texts,str):\r\n  result = list(filter(lambda x: (Counter(str) == Counter(x)), texts)) \r\n  return result", "metadata": {}}
{"_id": "862_code", "title": "n_common_words", "text": "# Write a function to find the occurrences of n most common words in a given text.\nfrom collections import Counter\r\nimport re\r\ndef n_common_words(text,n):\r\n  words = re.findall('\\w+',text)\r\n  n_common_words= Counter(words).most_common(n)\r\n  return list(n_common_words)", "metadata": {}}
{"_id": "863_code", "title": "find_longest_conseq_subseq", "text": "# Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.\ndef find_longest_conseq_subseq(arr, n): \r\n\tans = 0\r\n\tcount = 0\r\n\tarr.sort() \r\n\tv = [] \r\n\tv.append(arr[0]) \r\n\tfor i in range(1, n): \r\n\t\tif (arr[i] != arr[i - 1]): \r\n\t\t\tv.append(arr[i]) \r\n\tfor i in range(len(v)): \r\n\t\tif (i > 0 and v[i] == v[i - 1] + 1): \r\n\t\t\tcount += 1\r\n\t\telse: \r\n\t\t\tcount = 1\r\n\t\tans = max(ans, count) \r\n\treturn ans ", "metadata": {}}
{"_id": "864_code", "title": "palindrome_lambda", "text": "# Write a function to find palindromes in a given list of strings using lambda function.\ndef palindrome_lambda(texts):\r\n  result = list(filter(lambda x: (x == \"\".join(reversed(x))), texts))\r\n  return result", "metadata": {}}
{"_id": "865_code", "title": "ntimes_list", "text": "# Write a function to print n-times a list using map function.\ndef ntimes_list(nums,n):\r\n    result = map(lambda x:n*x, nums) \r\n    return list(result)", "metadata": {}}
{"_id": "866_code", "title": "check_monthnumb", "text": "# Write a function to check whether the given month name contains 31 days or not.\ndef check_monthnumb(monthname2):\r\n  if(monthname2==\"January\" or monthname2==\"March\"or monthname2==\"May\" or monthname2==\"July\" or monthname2==\"Augest\" or monthname2==\"October\" or monthname2==\"December\"):\r\n    return True\r\n  else:\r\n    return False", "metadata": {}}
{"_id": "867_code", "title": "min_Num", "text": "# Write a python function to add a minimum number such that the sum of array becomes even.\ndef min_Num(arr,n):  \r\n    odd = 0\r\n    for i in range(n): \r\n        if (arr[i] % 2): \r\n            odd += 1 \r\n    if (odd % 2): \r\n        return 1\r\n    return 2", "metadata": {}}
{"_id": "868_code", "title": "length_Of_Last_Word", "text": "# Write a python function to find the length of the last word in a given string.\ndef length_Of_Last_Word(a): \r\n    l = 0\r\n    x = a.strip() \r\n    for i in range(len(x)): \r\n        if x[i] == \" \": \r\n            l = 0\r\n        else: \r\n            l += 1\r\n    return l ", "metadata": {}}
{"_id": "869_code", "title": "remove_list_range", "text": "# Write a function to remove sublists from a given list of lists, which are outside a given range.\ndef remove_list_range(list1, leftrange, rigthrange):\r\n   result = [i for i in list1 if (min(i)>=leftrange and max(i)<=rigthrange)]\r\n   return result", "metadata": {}}
{"_id": "870_code", "title": "sum_positivenum", "text": "# Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.\ndef sum_positivenum(nums):\r\n  sum_positivenum = list(filter(lambda nums:nums>0,nums))\r\n  return sum(sum_positivenum)", "metadata": {}}
{"_id": "871_code", "title": "are_Rotations", "text": "# Write a python function to check whether the given strings are rotations of each other or not.\ndef are_Rotations(string1,string2): \r\n    size1 = len(string1) \r\n    size2 = len(string2) \r\n    temp = '' \r\n    if size1 != size2: \r\n        return False\r\n    temp = string1 + string1 \r\n    if (temp.count(string2)> 0): \r\n        return True\r\n    else: \r\n        return False", "metadata": {}}
{"_id": "872_code", "title": "check_subset", "text": "# Write a function to check if a nested list is a subset of another nested list.\ndef check_subset(list1,list2): \r\n    return all(map(list1.__contains__,list2)) ", "metadata": {}}
{"_id": "873_code", "title": "fibonacci", "text": "# Write a function to solve the fibonacci sequence using recursion.\ndef fibonacci(n):\r\n  if n == 1 or n == 2:\r\n    return 1\r\n  else:\r\n    return (fibonacci(n - 1) + (fibonacci(n - 2)))", "metadata": {}}
{"_id": "874_code", "title": "check_Concat", "text": "# Write a python function to check if the string is a concatenation of another string.\ndef check_Concat(str1,str2):\r\n    N = len(str1)\r\n    M = len(str2)\r\n    if (N % M != 0):\r\n        return False\r\n    for i in range(N):\r\n        if (str1[i] != str2[i % M]):\r\n            return False         \r\n    return True", "metadata": {}}
{"_id": "875_code", "title": "min_difference", "text": "# Write a function to find the minimum difference in the tuple pairs of given tuples.\ndef min_difference(test_list):\r\n  temp = [abs(b - a) for a, b in test_list]\r\n  res = min(temp)\r\n  return (res) ", "metadata": {}}
{"_id": "876_code", "title": "lcm", "text": "# Write a python function to find lcm of two positive integers.\ndef lcm(x, y):\r\n   if x > y:\r\n       z = x\r\n   else:\r\n       z = y\r\n   while(True):\r\n       if((z % x == 0) and (z % y == 0)):\r\n           lcm = z\r\n           break\r\n       z += 1\r\n   return lcm", "metadata": {}}
{"_id": "877_code", "title": "sort_String", "text": "# Write a python function to sort the given string.\ndef sort_String(str) : \r\n    str = ''.join(sorted(str)) \r\n    return (str) ", "metadata": {}}
{"_id": "878_code", "title": "check_tuples", "text": "# Write a function to check if the given tuple contains only k elements.\ndef check_tuples(test_tuple, K):\r\n  res = all(ele in K for ele in test_tuple)\r\n  return (res) ", "metadata": {}}
{"_id": "879_code", "title": "text_match", "text": "# Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\nimport re\r\ndef text_match(text):\r\n  patterns = 'a.*?b$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')", "metadata": {}}
{"_id": "880_code", "title": "Check_Solution", "text": "# Write a python function to find number of solutions in quadratic equation.\ndef Check_Solution(a,b,c) : \r\n    if ((b*b) - (4*a*c)) > 0 : \r\n        return (\"2 solutions\") \r\n    elif ((b*b) - (4*a*c)) == 0 : \r\n        return (\"1 solution\") \r\n    else : \r\n        return (\"No solutions\") ", "metadata": {}}
{"_id": "881_code", "title": "sum_even_odd", "text": "# Write a function to find the sum of first even and odd number of a given list.\ndef sum_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even+first_odd)", "metadata": {}}
{"_id": "882_code", "title": "parallelogram_perimeter", "text": "# Write a function to caluclate perimeter of a parallelogram.\ndef parallelogram_perimeter(b,h):\r\n  perimeter=2*(b*h)\r\n  return perimeter", "metadata": {}}
{"_id": "883_code", "title": "div_of_nums", "text": "# Write a function to find numbers divisible by m and n from a list of numbers using lambda function.\ndef div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 and x % n == 0), nums)) \r\n return result", "metadata": {}}
{"_id": "884_code", "title": "all_Bits_Set_In_The_Given_Range", "text": "# Write a python function to check whether all the bits are within a given range or not.\ndef all_Bits_Set_In_The_Given_Range(n,l,r): \r\n    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1) \r\n    new_num = n & num \r\n    if (num == new_num): \r\n        return True\r\n    return False", "metadata": {}}
{"_id": "885_code", "title": "is_Isomorphic", "text": "# Write a python function to check whether the two given strings are isomorphic to each other or not.\ndef is_Isomorphic(str1,str2):          \r\n    dict_str1 = {}\r\n    dict_str2 = {}\r\n    for i, value in enumerate(str1):\r\n        dict_str1[value] = dict_str1.get(value,[]) + [i]        \r\n    for j, value in enumerate(str2):\r\n        dict_str2[value] = dict_str2.get(value,[]) + [j]\r\n    if sorted(dict_str1.values()) == sorted(dict_str2.values()):\r\n        return True\r\n    else:\r\n        return False", "metadata": {}}
{"_id": "886_code", "title": "sum_num", "text": "# Write a function to add all the numbers in a list and divide it with the length of the list.\ndef sum_num(numbers):\r\n    total = 0\r\n    for x in numbers:\r\n        total += x\r\n    return total/len(numbers) ", "metadata": {}}
{"_id": "887_code", "title": "is_odd", "text": "# Write a python function to check whether the given number is odd or not using bitwise operator.\ndef is_odd(n) : \r\n    if (n^1 == n-1) :\r\n        return True; \r\n    else :\r\n        return False; ", "metadata": {}}
{"_id": "888_code", "title": "substract_elements", "text": "# Write a function to substract the elements of the given nested tuples.\ndef substract_elements(test_tup1, test_tup2):\r\n  res = tuple(tuple(a - b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) ", "metadata": {}}
{"_id": "889_code", "title": "reverse_list_lists", "text": "# Write a function to reverse each list in a given list of lists.\ndef reverse_list_lists(lists):\r\n    for l in lists:\r\n        l.sort(reverse = True)\r\n    return lists ", "metadata": {}}
{"_id": "890_code", "title": "find_Extra", "text": "# Write a python function to find the index of an extra element present in one sorted array.\ndef find_Extra(arr1,arr2,n) : \r\n    for i in range(0, n) : \r\n        if (arr1[i] != arr2[i]) : \r\n            return i \r\n    return n ", "metadata": {}}
{"_id": "891_code", "title": "same_Length", "text": "# Write a python function to check whether the given two numbers have same number of digits or not.\ndef same_Length(A,B): \r\n    while (A > 0 and B > 0): \r\n        A = A / 10; \r\n        B = B / 10; \r\n    if (A == 0 and B == 0): \r\n        return True; \r\n    return False; ", "metadata": {}}
{"_id": "892_code", "title": "remove_spaces", "text": "# Write a function to remove multiple spaces in a string.\nimport re\r\ndef remove_spaces(text):\r\n return (re.sub(' +',' ',text))", "metadata": {}}
{"_id": "893_code", "title": "Extract", "text": "# Write a python function to get the last element of each sublist.\ndef Extract(lst): \r\n    return [item[-1] for item in lst] ", "metadata": {}}
{"_id": "894_code", "title": "float_to_tuple", "text": "# Write a function to convert the given string of float type into tuple.\ndef float_to_tuple(test_str):\r\n  res = tuple(map(float, test_str.split(', ')))\r\n  return (res) ", "metadata": {}}
{"_id": "895_code", "title": "max_sum_subseq", "text": "# Write a function to find the maximum sum of subsequences of given array with no adjacent elements.\ndef max_sum_subseq(A):\r\n    n = len(A)\r\n    if n == 1:\r\n        return A[0]\r\n    look_up = [None] * n\r\n    look_up[0] = A[0]\r\n    look_up[1] = max(A[0], A[1])\r\n    for i in range(2, n):\r\n        look_up[i] = max(look_up[i - 1], look_up[i - 2] + A[i])\r\n        look_up[i] = max(look_up[i], A[i])\r\n    return look_up[n - 1]", "metadata": {}}
{"_id": "896_code", "title": "last", "text": "# Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\ndef last(n):\r\n   return n[-1]\r\ndef sort_list_last(tuples):\r\n  return sorted(tuples, key=last)", "metadata": {}}
{"_id": "897_code", "title": "is_Word_Present", "text": "# Write a python function to check whether the word is present in a given sentence or not.\ndef is_Word_Present(sentence,word): \r\n    s = sentence.split(\" \") \r\n    for i in s:  \r\n        if (i == word): \r\n            return True\r\n    return False", "metadata": {}}
{"_id": "898_code", "title": "extract_elements", "text": "# Write a function to extract specified number of elements from a given list, which follow each other continuously.\nfrom itertools import groupby \r\ndef extract_elements(numbers, n):\r\n    result = [i for i, j in groupby(numbers) if len(list(j)) == n] \r\n    return result", "metadata": {}}
{"_id": "899_code", "title": "check", "text": "# Write a python function to check whether an array can be sorted or not by picking only the corner elements.\ndef check(arr,n): \r\n    g = 0 \r\n    for i in range(1,n): \r\n        if (arr[i] - arr[i - 1] > 0 and g == 1): \r\n            return False\r\n        if (arr[i] - arr[i] < 0): \r\n            g = 1\r\n    return True", "metadata": {}}
{"_id": "900_code", "title": "match_num", "text": "# Write a function where a string will start with a specific number.\nimport re\r\ndef match_num(string):\r\n    text = re.compile(r\"^5\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False", "metadata": {}}
{"_id": "901_code", "title": "smallest_multiple", "text": "# Write a function to find the smallest multiple of the first n numbers.\ndef smallest_multiple(n):\r\n    if (n<=2):\r\n      return n\r\n    i = n * 2\r\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\r\n    while True:\r\n        for a in factors:\r\n            if i % a != 0:\r\n                i += n\r\n                break\r\n            if (a == factors[-1] and i % a == 0):\r\n                return i", "metadata": {}}
{"_id": "902_code", "title": "add_dict", "text": "# Write a function to combine two dictionaries by adding values for common keys.\nfrom collections import Counter\r\ndef add_dict(d1,d2):\r\n   add_dict = Counter(d1) + Counter(d2)\r\n   return add_dict", "metadata": {}}
{"_id": "903_code", "title": "count_Unset_Bits", "text": "# Write a python function to count the total unset bits from 1 to n.\ndef count_Unset_Bits(n) :  \r\n    cnt = 0;  \r\n    for i in range(1,n + 1) : \r\n        temp = i;  \r\n        while (temp) :  \r\n            if (temp % 2 == 0) : \r\n                cnt += 1;  \r\n            temp = temp // 2;  \r\n    return cnt;  ", "metadata": {}}
{"_id": "904_code", "title": "even_num", "text": "# Write a function to return true if the given number is even else return false.\ndef even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False", "metadata": {}}
{"_id": "905_code", "title": "factorial", "text": "# Write a python function to find the sum of squares of binomial co-efficients.\ndef factorial(start,end): \r\n    res = 1 \r\n    for i in range(start,end + 1): \r\n        res *= i      \r\n    return res \r\ndef sum_of_square(n): \r\n   return int(factorial(n + 1, 2 * n)  /factorial(1, n)) ", "metadata": {}}
{"_id": "906_code", "title": "extract_date", "text": "# Write a function to extract year, month and date from a url by using regex.\nimport re\r\ndef extract_date(url):\r\n        return re.findall(r'/(\\d{4})/(\\d{1,2})/(\\d{1,2})/', url)", "metadata": {}}
{"_id": "907_code", "title": "lucky_num", "text": "# Write a function to print the first n lucky numbers.\ndef lucky_num(n):\r\n List=range(-1,n*n+9,2)\r\n i=2\r\n while List[i:]:List=sorted(set(List)-set(List[List[i]::List[i]]));i+=1\r\n return List[1:n+1]", "metadata": {}}
{"_id": "908_code", "title": "find_fixed_point", "text": "# Write a function to find the fixed point in the given array.\ndef find_fixed_point(arr, n): \r\n\tfor i in range(n): \r\n\t\tif arr[i] is i: \r\n\t\t\treturn i \r\n\treturn -1", "metadata": {}}
{"_id": "909_code", "title": "previous_palindrome", "text": "# Write a function to find the previous palindrome of a specified number.\ndef previous_palindrome(num):\r\n    for x in range(num-1,0,-1):\r\n        if str(x) == str(x)[::-1]:\r\n            return x", "metadata": {}}
{"_id": "910_code", "title": "check_date", "text": "# Write a function to validate a gregorian date.\nimport datetime\r\ndef check_date(m, d, y):\r\n    try:\r\n        m, d, y = map(int, (m, d, y))\r\n        datetime.date(y, m, d)\r\n        return True\r\n    except ValueError:\r\n        return False", "metadata": {}}
{"_id": "911_code", "title": "maximum_product", "text": "# Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.\ndef maximum_product(nums):\r\n    import heapq\r\n    a, b = heapq.nlargest(3, nums), heapq.nsmallest(2, nums)\r\n    return max(a[0] * a[1] * a[2], a[0] * b[0] * b[1])", "metadata": {}}
{"_id": "912_code", "title": "binomial_coeff", "text": "# Write a function to find ln, m lobb number.\ndef binomial_coeff(n, k): \r\n\tC = [[0 for j in range(k + 1)] \r\n\t\t\tfor i in range(n + 1)] \r\n\tfor i in range(0, n + 1): \r\n\t\tfor j in range(0, min(i, k) + 1): \r\n\t\t\tif (j == 0 or j == i): \r\n\t\t\t\tC[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tC[i][j] = (C[i - 1][j - 1] \r\n\t\t\t\t\t\t\t+ C[i - 1][j]) \r\n\treturn C[n][k] \r\ndef lobb_num(n, m): \r\n\treturn (((2 * m + 1) *\r\n\t\tbinomial_coeff(2 * n, m + n)) \r\n\t\t\t\t\t/ (m + n + 1))", "metadata": {}}
{"_id": "913_code", "title": "end_num", "text": "# Write a function to check for a number at the end of a string.\nimport re\r\ndef end_num(string):\r\n    text = re.compile(r\".*[0-9]$\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False", "metadata": {}}
{"_id": "914_code", "title": "is_Two_Alter", "text": "# Write a python function to check whether the given string is made up of two alternating characters or not.\ndef is_Two_Alter(s):  \r\n    for i in range (len( s) - 2) : \r\n        if (s[i] != s[i + 2]) : \r\n            return False\r\n    if (s[0] == s[1]): \r\n        return False\r\n    return True", "metadata": {}}
{"_id": "915_code", "title": "rearrange_numbs", "text": "# Write a function to rearrange positive and negative numbers in a given array using lambda function.\ndef rearrange_numbs(array_nums):\r\n  result = sorted(array_nums, key = lambda i: 0 if i == 0 else -1 / i)\r\n  return result ", "metadata": {}}
{"_id": "916_code", "title": "find_triplet_array", "text": "# Write a function to find if there is a triplet in the array whose sum is equal to a given value.\ndef find_triplet_array(A, arr_size, sum): \r\n\tfor i in range( 0, arr_size-2): \r\n\t\tfor j in range(i + 1, arr_size-1): \r\n\t\t\tfor k in range(j + 1, arr_size): \r\n\t\t\t\tif A[i] + A[j] + A[k] == sum: \r\n\t\t\t\t\treturn  A[i],A[j],A[k] \r\n\t\t\t\t\treturn True\r\n\treturn False", "metadata": {}}
{"_id": "917_code", "title": "text_uppercase_lowercase", "text": "# Write a function to find the sequences of one upper case letter followed by lower case letters.\nimport re\r\ndef text_uppercase_lowercase(text):\r\n        patterns = '[A-Z]+[a-z]+$'\r\n        if re.search(patterns, text):\r\n                return 'Found a match!'\r\n        else:\r\n                return ('Not matched!')", "metadata": {}}
{"_id": "918_code", "title": "coin_change", "text": "# Write a function to count coin change.\ndef coin_change(S, m, n): \r\n    table = [[0 for x in range(m)] for x in range(n+1)] \r\n    for i in range(m): \r\n        table[0][i] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(m): \r\n            x = table[i - S[j]][j] if i-S[j] >= 0 else 0\r\n            y = table[i][j-1] if j >= 1 else 0 \r\n            table[i][j] = x + y   \r\n    return table[n][m-1] ", "metadata": {}}
{"_id": "919_code", "title": "multiply_list", "text": "# Write a python function to multiply all items in the list.\ndef multiply_list(items):\r\n    tot = 1\r\n    for x in items:\r\n        tot *= x\r\n    return tot", "metadata": {}}
{"_id": "920_code", "title": "remove_tuple", "text": "# Write a function to remove all tuples with all none values in the given tuple list.\ndef remove_tuple(test_list):\r\n  res = [sub for sub in test_list if not all(ele == None for ele in sub)]\r\n  return (str(res)) ", "metadata": {}}
{"_id": "921_code", "title": "chunk_tuples", "text": "# Write a function to perform chunking of tuples each of size n.\ndef chunk_tuples(test_tup, N):\r\n  res = [test_tup[i : i + N] for i in range(0, len(test_tup), N)]\r\n  return (res) ", "metadata": {}}
{"_id": "922_code", "title": "max_product", "text": "# Write a function to find a pair with the highest product from a given array of integers.\ndef max_product(arr): \r\n    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return None     \r\n    x = arr[0]; y = arr[1]    \r\n    for i in range(0, arr_len): \r\n        for j in range(i + 1, arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y   ", "metadata": {}}
{"_id": "923_code", "title": "super_seq", "text": "# Write a function to find the length of the shortest string that has both str1 and str2 as subsequences.\ndef super_seq(X, Y, m, n):\r\n\tif (not m):\r\n\t\treturn n\r\n\tif (not n):\r\n\t\treturn m\r\n\tif (X[m - 1] == Y[n - 1]):\r\n\t\treturn 1 + super_seq(X, Y, m - 1, n - 1)\r\n\treturn 1 + min(super_seq(X, Y, m - 1, n),\tsuper_seq(X, Y, m, n - 1))", "metadata": {}}
{"_id": "924_code", "title": "max_of_two", "text": "# Write a function to find maximum of two numbers.\ndef max_of_two( x, y ):\r\n    if x > y:\r\n        return x\r\n    return y", "metadata": {}}
{"_id": "925_code", "title": "mutiple_tuple", "text": "# Write a python function to calculate the product of all the numbers of a given tuple.\ndef mutiple_tuple(nums):\r\n    temp = list(nums)\r\n    product = 1 \r\n    for x in temp:\r\n        product *= x\r\n    return product", "metadata": {}}
{"_id": "926_code", "title": "binomial_coeffi", "text": "# Write a function to find n-th rencontres number.\ndef binomial_coeffi(n, k): \r\n\tif (k == 0 or k == n): \r\n\t\treturn 1\r\n\treturn (binomial_coeffi(n - 1, k - 1) \r\n\t\t+ binomial_coeffi(n - 1, k)) \r\ndef rencontres_number(n, m): \r\n\tif (n == 0 and m == 0): \r\n\t\treturn 1\r\n\tif (n == 1 and m == 0): \r\n\t\treturn 0\r\n\tif (m == 0): \r\n\t\treturn ((n - 1) * (rencontres_number(n - 1, 0)+ rencontres_number(n - 2, 0))) \r\n\treturn (binomial_coeffi(n, m) * rencontres_number(n - m, 0))", "metadata": {}}
{"_id": "927_code", "title": "__init__", "text": "# Write a function to calculate the height of the given binary tree.\nclass Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef max_height(node): \r\n\tif node is None: \r\n\t\treturn 0 ; \r\n\telse : \r\n\t\tleft_height = max_height(node.left) \r\n\t\tright_height = max_height(node.right) \r\n\t\tif (left_height > right_height): \r\n\t\t\treturn left_height+1\r\n\t\telse: \r\n\t\t\treturn right_height+1", "metadata": {}}
{"_id": "928_code", "title": "change_date_format", "text": "# Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nimport re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\r\n        return change_date_format(dt)", "metadata": {}}
{"_id": "929_code", "title": "count_tuplex", "text": "# Write a function to count repeated items of a tuple.\ndef count_tuplex(tuplex,value):  \r\n  count = tuplex.count(value)\r\n  return count", "metadata": {}}
{"_id": "930_code", "title": "text_match", "text": "# Write a function that matches a string that has an a followed by zero or more b's by using regex.\nimport re\r\ndef text_match(text):\r\n        patterns = 'ab*?'\r\n        if re.search(patterns,  text):\r\n                return ('Found a match!')\r\n        else:\r\n                return ('Not matched!')", "metadata": {}}
{"_id": "931_code", "title": "sum_series", "text": "# Write a function to calculate the sum of series 1³+2³+3³+….+n³.\nimport math \r\ndef sum_series(number):\r\n total = 0\r\n total = math.pow((number * (number + 1)) /2, 2)\r\n return total", "metadata": {}}
{"_id": "932_code", "title": "remove_duplic_list", "text": "# Write a function to remove duplicate words from a given list of strings.\ndef remove_duplic_list(l):\r\n    temp = []\r\n    for x in l:\r\n        if x not in temp:\r\n            temp.append(x)\r\n    return temp", "metadata": {}}
{"_id": "933_code", "title": "camel_to_snake", "text": "# Write a function to convert camel case string to snake case string by using regex.\nimport re\r\ndef camel_to_snake(text):\r\n  str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n  return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()", "metadata": {}}
{"_id": "934_code", "title": "dealnnoy_num", "text": "# Write a function to find the nth delannoy number.\ndef dealnnoy_num(n, m): \r\n\tif (m == 0 or n == 0) : \r\n\t\treturn 1\r\n\treturn dealnnoy_num(m - 1, n) + dealnnoy_num(m - 1, n - 1) + dealnnoy_num(m, n - 1)", "metadata": {}}
{"_id": "935_code", "title": "series_sum", "text": "# Write a function to calculate the sum of series 1²+2²+3²+….+n².\ndef series_sum(number):\r\n total = 0\r\n total = (number * (number + 1) * (2 * number + 1)) / 6\r\n return total", "metadata": {}}
{"_id": "936_code", "title": "re_arrange_tuples", "text": "# Write a function to re-arrange the given tuples based on the given ordered list.\ndef re_arrange_tuples(test_list, ord_list):\r\n  temp = dict(test_list)\r\n  res = [(key, temp[key]) for key in ord_list]\r\n  return (res) ", "metadata": {}}
{"_id": "937_code", "title": "max_char", "text": "# Write a function to count the most common character in a given string.\nfrom collections import Counter \r\ndef max_char(str1):\r\n    temp = Counter(str1) \r\n    max_char = max(temp, key = temp.get)\r\n    return max_char", "metadata": {}}
{"_id": "938_code", "title": "find_closet", "text": "# Write a function to find three closest elements from three sorted arrays.\nimport sys \r\n\r\ndef find_closet(A, B, C, p, q, r): \r\n\tdiff = sys.maxsize \r\n\tres_i = 0\r\n\tres_j = 0\r\n\tres_k = 0\r\n\ti = 0\r\n\tj = 0\r\n\tk = 0\r\n\twhile(i < p and j < q and k < r): \r\n\t\tminimum = min(A[i], min(B[j], C[k])) \r\n\t\tmaximum = max(A[i], max(B[j], C[k])); \r\n\t\tif maximum-minimum < diff: \r\n\t\t\tres_i = i \r\n\t\t\tres_j = j \r\n\t\t\tres_k = k \r\n\t\t\tdiff = maximum - minimum; \r\n\t\tif diff == 0: \r\n\t\t\tbreak\r\n\t\tif A[i] == minimum: \r\n\t\t\ti = i+1\r\n\t\telif B[j] == minimum: \r\n\t\t\tj = j+1\r\n\t\telse: \r\n\t\t\tk = k+1\r\n\treturn A[res_i],B[res_j],C[res_k]", "metadata": {}}
{"_id": "939_code", "title": "sorted_models", "text": "# Write a function to sort a list of dictionaries using lambda function.\ndef sorted_models(models):\r\n sorted_models = sorted(models, key = lambda x: x['color'])\r\n return sorted_models", "metadata": {}}
{"_id": "940_code", "title": "heap_sort", "text": "# Write a function to sort the given array by using heap sort.\ndef heap_sort(arr):\r\n    heapify(arr)  \r\n    end = len(arr) - 1\r\n    while end > 0:\r\n        arr[end], arr[0] = arr[0], arr[end]\r\n        shift_down(arr, 0, end - 1)\r\n        end -= 1\r\n    return arr\r\n\r\ndef heapify(arr):\r\n    start = len(arr) // 2\r\n    while start >= 0:\r\n        shift_down(arr, start, len(arr) - 1)\r\n        start -= 1\r\ndef shift_down(arr, start, end):\r\n    root = start\r\n    while root * 2 + 1 <= end:\r\n        child = root * 2 + 1\r\n        if child + 1 <= end and arr[child] < arr[child + 1]:\r\n            child += 1\r\n        if child <= end and arr[root] < arr[child]:\r\n            arr[root], arr[child] = arr[child], arr[root]\r\n            root = child\r\n        else:\r\n            return\r\n", "metadata": {}}
{"_id": "941_code", "title": "count_elim", "text": "# Write a function to count the elements in a list until an element is a tuple.\ndef count_elim(num):\r\n  count_elim = 0\r\n  for n in num:\r\n    if isinstance(n, tuple):\r\n        break\r\n    count_elim += 1\r\n  return count_elim", "metadata": {}}
{"_id": "942_code", "title": "check_element", "text": "# Write a function to check if any list element is present in the given list.\ndef check_element(test_tup, check_list):\r\n  res = False\r\n  for ele in check_list:\r\n    if ele in test_tup:\r\n      res = True\r\n      break\r\n  return (res) ", "metadata": {}}
{"_id": "943_code", "title": "combine_lists", "text": "# Write a function to combine two given sorted lists using heapq module.\nfrom heapq import merge\r\ndef combine_lists(num1,num2):\r\n  combine_lists=list(merge(num1, num2))\r\n  return combine_lists", "metadata": {}}
{"_id": "944_code", "title": "num_position", "text": "# Write a function to separate and print the numbers and their position of a given string.\nimport re\r\ndef num_position(text):\r\n for m in re.finditer(\"\\d+\", text):\r\n    return m.start()", "metadata": {}}
{"_id": "945_code", "title": "tuple_to_set", "text": "# Write a function to convert the given tuples into set.\ndef tuple_to_set(t):\r\n  s = set(t)\r\n  return (s) ", "metadata": {}}
{"_id": "946_code", "title": "most_common_elem", "text": "# Write a function to find the most common elements and their counts of a specified text.\nfrom collections import Counter \r\ndef most_common_elem(s,a):\r\n  most_common_elem=Counter(s).most_common(a)\r\n  return most_common_elem", "metadata": {}}
{"_id": "947_code", "title": "len_log", "text": "# Write a python function to find the length of the shortest word.\ndef len_log(list1):\r\n    min=len(list1[0])\r\n    for i in list1:\r\n        if len(i)<min:\r\n            min=len(i)\r\n    return min", "metadata": {}}
{"_id": "948_code", "title": "get_item", "text": "# Write a function to get an item of a tuple.\ndef get_item(tup1,index):\r\n  item = tup1[index]\r\n  return item", "metadata": {}}
{"_id": "949_code", "title": "count_digs", "text": "# Write a function to sort the given tuple list basis the total digits in tuple.\ndef count_digs(tup):\r\n  return sum([len(str(ele)) for ele in tup ]) \r\ndef sort_list(test_list):\r\n  test_list.sort(key = count_digs)\r\n  return (str(test_list))", "metadata": {}}
{"_id": "950_code", "title": "chinese_zodiac", "text": "# Write a function to display sign of the chinese zodiac for given year.\ndef chinese_zodiac(year):\r\n if (year - 2000) % 12 == 0:\r\n     sign = 'Dragon'\r\n elif (year - 2000) % 12 == 1:\r\n     sign = 'Snake'\r\n elif (year - 2000) % 12 == 2:\r\n     sign = 'Horse'\r\n elif (year - 2000) % 12 == 3:\r\n     sign = 'sheep'\r\n elif (year - 2000) % 12 == 4:\r\n     sign = 'Monkey'\r\n elif (year - 2000) % 12 == 5:\r\n     sign = 'Rooster'\r\n elif (year - 2000) % 12 == 6:\r\n     sign = 'Dog'\r\n elif (year - 2000) % 12 == 7:\r\n     sign = 'Pig'\r\n elif (year - 2000) % 12 == 8:\r\n     sign = 'Rat'\r\n elif (year - 2000) % 12 == 9:\r\n     sign = 'Ox'\r\n elif (year - 2000) % 12 == 10:\r\n     sign = 'Tiger'\r\n else:\r\n     sign = 'Hare'\r\n return sign", "metadata": {}}
{"_id": "951_code", "title": "max_similar_indices", "text": "# Write a function to find the maximum of similar indices in two lists of tuples.\ndef max_similar_indices(test_list1, test_list2):\r\n  res = [(max(x[0], y[0]), max(x[1], y[1]))\r\n   for x, y in zip(test_list1, test_list2)]\r\n  return (res) ", "metadata": {}}
{"_id": "952_code", "title": "nCr_mod_p", "text": "# Write a function to compute the value of ncr mod p.\ndef nCr_mod_p(n, r, p): \r\n\tif (r > n- r): \r\n\t\tr = n - r \r\n\tC = [0 for i in range(r + 1)] \r\n\tC[0] = 1 \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(min(i, r), 0, -1): \r\n\t\t\tC[j] = (C[j] + C[j-1]) % p \r\n\treturn C[r] ", "metadata": {}}
{"_id": "953_code", "title": "subset", "text": "# Write a python function to find the minimun number of subsets with distinct elements.\ndef subset(ar, n): \r\n    res = 0\r\n    ar.sort() \r\n    for i in range(0, n) : \r\n        count = 1\r\n        for i in range(n - 1): \r\n            if ar[i] == ar[i + 1]: \r\n                count+=1\r\n            else: \r\n                break \r\n        res = max(res, count)  \r\n    return res ", "metadata": {}}
{"_id": "954_code", "title": "profit_amount", "text": "# Write a function that gives profit amount if the given amount has profit else return none.\ndef profit_amount(actual_cost,sale_amount): \r\n if(actual_cost > sale_amount):\r\n    amount = actual_cost - sale_amount\r\n    return amount\r\n else:\r\n    return None", "metadata": {}}
{"_id": "955_code", "title": "is_abundant", "text": "# Write a function to find out, if the given number is abundant.\ndef is_abundant(n):\r\n    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])\r\n    return fctrsum > n", "metadata": {}}
{"_id": "956_code", "title": "split_list", "text": "# Write a function to split the given string at uppercase letters by using regex.\nimport re\r\ndef split_list(text):\r\n  return (re.findall('[A-Z][^A-Z]*', text))", "metadata": {}}
{"_id": "957_code", "title": "get_First_Set_Bit_Pos", "text": "# Write a python function to get the position of rightmost set bit.\nimport math\r\ndef get_First_Set_Bit_Pos(n):\r\n     return math.log2(n&-n)+1", "metadata": {}}
{"_id": "958_code", "title": "int_to_roman", "text": "# Write a function to convert an integer into a roman numeral.\ndef int_to_roman( num):\r\n        val = [1000, 900, 500, 400,100, 90, 50, 40,10, 9, 5, 4,1]\r\n        syb = [\"M\", \"CM\", \"D\", \"CD\",\"C\", \"XC\", \"L\", \"XL\",\"X\", \"IX\", \"V\", \"IV\",\"I\"]\r\n        roman_num = ''\r\n        i = 0\r\n        while  num > 0:\r\n            for _ in range(num // val[i]):\r\n                roman_num += syb[i]\r\n                num -= val[i]\r\n            i += 1\r\n        return roman_num", "metadata": {}}
{"_id": "959_code", "title": "Average", "text": "# Write a python function to find the average of a list.\ndef Average(lst): \r\n    return sum(lst) / len(lst) ", "metadata": {}}
{"_id": "960_code", "title": "get_noOfways", "text": "# Write a function to solve tiling problem.\ndef get_noOfways(n):\r\n    if (n == 0):\r\n        return 0;\r\n    if (n == 1):\r\n        return 1; \r\n    return get_noOfways(n - 1) + get_noOfways(n - 2);", "metadata": {}}
{"_id": "961_code", "title": "roman_to_int", "text": "# Write a function to convert a roman numeral to an integer.\ndef roman_to_int(s):\r\n        rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\r\n        int_val = 0\r\n        for i in range(len(s)):\r\n            if i > 0 and rom_val[s[i]] > rom_val[s[i - 1]]:\r\n                int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]\r\n            else:\r\n                int_val += rom_val[s[i]]\r\n        return int_val", "metadata": {}}
{"_id": "962_code", "title": "sum_Natural", "text": "# Write a python function to find the sum of all even natural numbers within the range l and r.\ndef sum_Natural(n): \r\n    sum = (n * (n + 1)) \r\n    return int(sum) \r\ndef sum_Even(l,r): \r\n    return (sum_Natural(int(r / 2)) - sum_Natural(int((l - 1) / 2))) ", "metadata": {}}
{"_id": "963_code", "title": "discriminant_value", "text": "# Write a function to calculate the discriminant value.\ndef discriminant_value(x,y,z):\r\n    discriminant = (y**2) - (4*x*z)\r\n    if discriminant > 0:\r\n        return (\"Two solutions\",discriminant)\r\n    elif discriminant == 0:\r\n        return (\"one solution\",discriminant)\r\n    elif discriminant < 0:\r\n        return (\"no real solution\",discriminant)", "metadata": {}}
{"_id": "964_code", "title": "word_len", "text": "# Write a python function to check whether the length of the word is even or not.\ndef word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2==0: \r\n            return True  \r\n        else:\r\n          return False", "metadata": {}}
{"_id": "965_code", "title": "camel_to_snake", "text": "# Write a function to convert camel case string to snake case string.\ndef camel_to_snake(text):\r\n        import re\r\n        str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n        return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()", "metadata": {}}
{"_id": "966_code", "title": "remove_empty", "text": "# Write a function to remove an empty tuple from a list of tuples.\ndef remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\r\n   tuple1 = [t for t in tuple1 if t]\r\n   return tuple1", "metadata": {}}
{"_id": "967_code", "title": "check", "text": "# Write a python function to accept the strings which contains all vowels.\ndef check(string): \r\n  if len(set(string).intersection(\"AEIOUaeiou\"))>=5: \r\n    return ('accepted') \r\n  else: \r\n    return (\"not accepted\") ", "metadata": {}}
{"_id": "968_code", "title": "floor_Max", "text": "# Write a python function to find maximum possible value for the given periodic function.\ndef floor_Max(A,B,N):\r\n    x = min(B - 1,N)\r\n    return (A*x) // B", "metadata": {}}
{"_id": "969_code", "title": "join_tuples", "text": "# Write a function to join the tuples if they have similar initial elements.\ndef join_tuples(test_list):\r\n  res = []\r\n  for sub in test_list:\r\n    if res and res[-1][0] == sub[0]:\r\n      res[-1].extend(sub[1:])\r\n    else:\r\n      res.append([ele for ele in sub])\r\n  res = list(map(tuple, res))\r\n  return (res) ", "metadata": {}}
{"_id": "970_code", "title": "min_of_two", "text": "# Write a function to find minimum of two numbers.\ndef min_of_two( x, y ):\r\n    if x < y:\r\n        return x\r\n    return y", "metadata": {}}
{"_id": "971_code", "title": "maximum_segments", "text": "# Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.\ndef maximum_segments(n, a, b, c) : \r\n\tdp = [-1] * (n + 10) \r\n\tdp[0] = 0\r\n\tfor i in range(0, n) : \r\n\t\tif (dp[i] != -1) : \r\n\t\t\tif(i + a <= n ): \r\n\t\t\t\tdp[i + a] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + a]) \r\n\t\t\tif(i + b <= n ): \r\n\t\t\t\tdp[i + b] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + b]) \r\n\t\t\tif(i + c <= n ): \r\n\t\t\t\tdp[i + c] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + c]) \r\n\treturn dp[n]", "metadata": {}}
{"_id": "972_code", "title": "concatenate_nested", "text": "# Write a function to concatenate the given two tuples to a nested tuple.\ndef concatenate_nested(test_tup1, test_tup2):\r\n  res = test_tup1 + test_tup2\r\n  return (res) ", "metadata": {}}
{"_id": "973_code", "title": "left_rotate", "text": "# Write a python function to left rotate the string.\ndef left_rotate(s,d):\r\n    tmp = s[d : ] + s[0 : d]\r\n    return tmp  ", "metadata": {}}
{"_id": "974_code", "title": "min_sum_path", "text": "# Write a function to find the minimum total path sum in the given triangle.\ndef min_sum_path(A): \r\n\tmemo = [None] * len(A) \r\n\tn = len(A) - 1\r\n\tfor i in range(len(A[n])): \r\n\t\tmemo[i] = A[n][i] \r\n\tfor i in range(len(A) - 2, -1,-1): \r\n\t\tfor j in range( len(A[i])): \r\n\t\t\tmemo[j] = A[i][j] + min(memo[j], \r\n\t\t\t\t\t\t\t\t\tmemo[j + 1]) \r\n\treturn memo[0]", "metadata": {}}
{"_id": "511_code", "title": "find_Min_Sum", "text": "# Write a python function to find minimum sum of factors of a given number.\ndef find_Min_Sum(num): \r\n    sum = 0\r\n    i = 2\r\n    while(i * i <= num): \r\n        while(num % i == 0): \r\n            sum += i \r\n            num /= i \r\n        i += 1\r\n    sum += num \r\n    return sum", "metadata": {}}
{"_id": "512_code", "title": "flatten", "text": "# Write a function to count the element frequency in the mixed nested tuple.\ndef flatten(test_tuple): \r\n\tfor tup in test_tuple: \r\n\t\tif isinstance(tup, tuple): \r\n\t\t\tyield from flatten(tup) \r\n\t\telse: \r\n\t\t\tyield tup \r\ndef count_element_freq(test_tuple):\r\n  res = {}\r\n  for ele in flatten(test_tuple):\r\n    if ele not in res:\r\n      res[ele] = 0\r\n    res[ele] += 1\r\n  return (res) ", "metadata": {}}
{"_id": "513_code", "title": "add_str", "text": "# Write a function to convert tuple into list by adding the given string after every element.\ndef add_str(test_tup, K):\r\n  res = [ele for sub in test_tup for ele in (sub, K)]\r\n  return (res) ", "metadata": {}}
{"_id": "514_code", "title": "sum_elements", "text": "# Write a function to find the summation of tuple elements in the given tuple list.\ndef sum_elements(test_tup):\r\n  res = sum(list(test_tup))\r\n  return (res) ", "metadata": {}}
{"_id": "515_code", "title": "modular_sum", "text": "# Write a function to check if there is a subset with sum divisible by m.\ndef modular_sum(arr, n, m): \r\n\tif (n > m): \r\n\t\treturn True\r\n\tDP = [False for i in range(m)] \r\n\tfor i in range(n): \r\n\t\tif (DP[0]): \r\n\t\t\treturn True\r\n\t\ttemp = [False for i in range(m)] \r\n\t\tfor j in range(m): \r\n\t\t\tif (DP[j] == True): \r\n\t\t\t\tif (DP[(j + arr[i]) % m] == False): \r\n\t\t\t\t\ttemp[(j + arr[i]) % m] = True\r\n\t\tfor j in range(m): \r\n\t\t\tif (temp[j]): \r\n\t\t\t\tDP[j] = True\r\n\t\tDP[arr[i] % m] = True\r\n\treturn DP[0]", "metadata": {}}
{"_id": "516_code", "title": "radix_sort", "text": "# Write a function to sort a list of elements using radix sort.\ndef radix_sort(nums):\r\n    RADIX = 10\r\n    placement = 1\r\n    max_digit = max(nums)\r\n\r\n    while placement < max_digit:\r\n      buckets = [list() for _ in range( RADIX )]\r\n      for i in nums:\r\n        tmp = int((i / placement) % RADIX)\r\n        buckets[tmp].append(i)\r\n      a = 0\r\n      for b in range( RADIX ):\r\n        buck = buckets[b]\r\n        for i in buck:\r\n          nums[a] = i\r\n          a += 1\r\n      placement *= RADIX\r\n    return nums", "metadata": {}}
{"_id": "517_code", "title": "largest_pos", "text": "# Write a python function to find the largest postive number from the given list.\ndef largest_pos(list1): \r\n    max = list1[0] \r\n    for x in list1: \r\n        if x > max : \r\n             max = x  \r\n    return max", "metadata": {}}
{"_id": "518_code", "title": "sqrt_root", "text": "# Write a function to find the square root of a perfect number.\nimport math\r\ndef sqrt_root(num):\r\n sqrt_root = math.pow(num, 0.5)\r\n return sqrt_root ", "metadata": {}}
{"_id": "519_code", "title": "volume_tetrahedron", "text": "# Write a function to calculate volume of a tetrahedron.\nimport math\r\ndef volume_tetrahedron(num):\r\n\tvolume = (num ** 3 / (6 * math.sqrt(2)))\t\r\n\treturn round(volume, 2)", "metadata": {}}
{"_id": "520_code", "title": "find_lcm", "text": "# Write a function to find the lcm of the given array elements.\ndef find_lcm(num1, num2): \r\n\tif(num1>num2): \r\n\t\tnum = num1 \r\n\t\tden = num2 \r\n\telse: \r\n\t\tnum = num2 \r\n\t\tden = num1 \r\n\trem = num % den \r\n\twhile (rem != 0): \r\n\t\tnum = den \r\n\t\tden = rem \r\n\t\trem = num % den \r\n\tgcd = den \r\n\tlcm = int(int(num1 * num2)/int(gcd)) \r\n\treturn lcm \r\ndef get_lcm(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  lcm = find_lcm(num1, num2)\r\n  for i in range(2, len(l)):\r\n    lcm = find_lcm(lcm, l[i])\r\n  return lcm ", "metadata": {}}
{"_id": "521_code", "title": "check_isosceles", "text": "# Write a function to print check if the triangle is scalene or not.\ndef check_isosceles(x,y,z):\r\n  if x!=y & y!=z & z!=x:\r\n\t   return True\r\n  else:\r\n     return False", "metadata": {}}
{"_id": "522_code", "title": "lbs", "text": "# Write a function to find the longest bitonic subsequence for the given array.\ndef lbs(arr): \r\n\tn = len(arr) \r\n\tlis = [1 for i in range(n+1)] \r\n\tfor i in range(1 , n): \r\n\t\tfor j in range(0 , i): \r\n\t\t\tif ((arr[i] > arr[j]) and (lis[i] < lis[j] +1)): \r\n\t\t\t\tlis[i] = lis[j] + 1\r\n\tlds = [1 for i in range(n+1)] \r\n\tfor i in reversed(range(n-1)): \r\n\t\tfor j in reversed(range(i-1 ,n)): \r\n\t\t\tif(arr[i] > arr[j] and lds[i] < lds[j] + 1): \r\n\t\t\t\tlds[i] = lds[j] + 1\r\n\tmaximum = lis[0] + lds[0] - 1\r\n\tfor i in range(1 , n): \r\n\t\tmaximum = max((lis[i] + lds[i]-1), maximum) \r\n\treturn maximum", "metadata": {}}
{"_id": "523_code", "title": "check_string", "text": "# Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.\ndef check_string(str1):\r\n    messg = [\r\n    lambda str1: any(x.isupper() for x in str1) or 'String must have 1 upper case character.',\r\n    lambda str1: any(x.islower() for x in str1) or 'String must have 1 lower case character.',\r\n    lambda str1: any(x.isdigit() for x in str1) or 'String must have 1 number.',\r\n    lambda str1: len(str1) >= 7                 or 'String length should be atleast 8.',]\r\n    result = [x for x in [i(str1) for i in messg] if x != True]\r\n    if not result:\r\n        result.append('Valid string.')\r\n    return result  ", "metadata": {}}
{"_id": "524_code", "title": "max_sum_increasing_subsequence", "text": "# Write a function to find the sum of maximum increasing subsequence of the given array.\ndef max_sum_increasing_subsequence(arr, n): \r\n\tmax = 0\r\n\tmsis = [0 for x in range(n)] \r\n\tfor i in range(n): \r\n\t\tmsis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\tmsis[i] < msis[j] + arr[i]): \r\n\t\t\t\tmsis[i] = msis[j] + arr[i] \r\n\tfor i in range(n): \r\n\t\tif max < msis[i]: \r\n\t\t\tmax = msis[i] \r\n\treturn max", "metadata": {}}
{"_id": "525_code", "title": "parallel_lines", "text": "# Write a python function to check whether two given lines are parallel or not.\ndef parallel_lines(line1, line2):\r\n  return line1[0]/line1[1] == line2[0]/line2[1]", "metadata": {}}
{"_id": "526_code", "title": "capitalize_first_last_letters", "text": "# Write a python function to capitalize first and last letters of each word of a given string.\ndef capitalize_first_last_letters(str1):\r\n     str1 = result = str1.title()\r\n     result =  \"\"\r\n     for word in str1.split():\r\n        result += word[:-1] + word[-1].upper() + \" \"\r\n     return result[:-1]  ", "metadata": {}}
{"_id": "527_code", "title": "get_pairs_count", "text": "# Write a function to find all pairs in an integer array whose sum is equal to a given number.\ndef get_pairs_count(arr, n, sum):\r\n    count = 0 \r\n    for i in range(0, n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count", "metadata": {}}
{"_id": "528_code", "title": "min_length", "text": "# Write a function to find the list of lists with minimum length.\ndef min_length(list1):\r\n   min_length = min(len(x) for x in  list1 )  \r\n   min_list = min((x) for x in   list1)\r\n   return(min_length, min_list)     ", "metadata": {}}
{"_id": "529_code", "title": "jacobsthal_lucas", "text": "# Write a function to find the nth jacobsthal-lucas number.\ndef jacobsthal_lucas(n): \r\n\tdp=[0] * (n + 1) \r\n\tdp[0] = 2\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2]; \r\n\treturn dp[n]", "metadata": {}}
{"_id": "530_code", "title": "negative_count", "text": "# Write a function to find the ration of negative numbers in an array of integers.\nfrom array import array\r\ndef negative_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x < 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)", "metadata": {}}
{"_id": "531_code", "title": "min_coins", "text": "# Write a function to find minimum number of coins that make a given value.\nimport sys \r\ndef min_coins(coins, m, V): \r\n    if (V == 0): \r\n        return 0\r\n    res = sys.maxsize \r\n    for i in range(0, m): \r\n        if (coins[i] <= V): \r\n            sub_res = min_coins(coins, m, V-coins[i]) \r\n            if (sub_res != sys.maxsize and sub_res + 1 < res): \r\n                res = sub_res + 1  \r\n    return res ", "metadata": {}}
{"_id": "532_code", "title": "check_permutation", "text": "# Write a function to check if the two given strings are permutations of each other.\ndef check_permutation(str1, str2):\r\n  n1=len(str1)\r\n  n2=len(str2)\r\n  if(n1!=n2):\r\n    return False\r\n  a=sorted(str1)\r\n  str1=\" \".join(a)\r\n  b=sorted(str2)\r\n  str2=\" \".join(b)\r\n  for i in range(0, n1, 1):\r\n    if(str1[i] != str2[i]):\r\n      return False\r\n  return True", "metadata": {}}
{"_id": "533_code", "title": "remove_datatype", "text": "# Write a function to remove particular data type elements from the given tuple.\ndef remove_datatype(test_tuple, data_type):\r\n  res = []\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, data_type):\r\n      res.append(ele)\r\n  return (res) ", "metadata": {}}
{"_id": "534_code", "title": "search_literal", "text": "# Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.\nimport re\r\ndef search_literal(pattern,text):\r\n match = re.search(pattern, text)\r\n s = match.start()\r\n e = match.end()\r\n return (s, e)", "metadata": {}}
{"_id": "535_code", "title": "topbottom_surfacearea", "text": "# Write a function to find the top or bottom surface area of a cylinder.\ndef topbottom_surfacearea(r):\r\n  toporbottomarea=3.1415*r*r\r\n  return toporbottomarea", "metadata": {}}
{"_id": "536_code", "title": "nth_items", "text": "# Write a function to select the nth items of a list.\ndef nth_items(list,n):\r\n return list[::n]", "metadata": {}}
{"_id": "537_code", "title": "first_repeated_word", "text": "# Write a python function to find the first repeated word in a given string.\ndef first_repeated_word(str1):\r\n  temp = set()\r\n  for word in str1.split():\r\n    if word in temp:\r\n      return word;\r\n    else:\r\n      temp.add(word)\r\n  return 'None'", "metadata": {}}
{"_id": "538_code", "title": "string_list_to_tuple", "text": "# Write a python function to convert a given string list to a tuple.\ndef string_list_to_tuple(str1):\r\n    result = tuple(x for x in str1 if not x.isspace()) \r\n    return result", "metadata": {}}
{"_id": "539_code", "title": "basesnum_coresspondingnum", "text": "# Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.\ndef basesnum_coresspondingnum(bases_num,index):\r\n  result = list(map(pow, bases_num, index))\r\n  return result", "metadata": {}}
{"_id": "540_code", "title": "find_Diff", "text": "# Write a python function to find the difference between highest and least frequencies in a given array.\ndef find_Diff(arr,n): \r\n    arr.sort()  \r\n    count = 0; max_count = 0; min_count = n \r\n    for i in range(0,(n-1)): \r\n        if arr[i] == arr[i + 1]: \r\n            count += 1\r\n            continue\r\n        else: \r\n            max_count = max(max_count,count) \r\n            min_count = min(min_count,count) \r\n            count = 0\r\n    return max_count - min_count ", "metadata": {}}
{"_id": "541_code", "title": "get_sum", "text": "# Write a function to find if the given number is abundant or not.\nimport math \r\ndef get_sum(n): \r\n\tsum = 0\r\n\ti = 1\r\n\twhile i <= (math.sqrt(n)): \r\n\t\tif n%i == 0: \r\n\t\t\tif n/i == i : \r\n\t\t\t\tsum = sum + i \r\n\t\t\telse: \r\n\t\t\t\tsum = sum + i \r\n\t\t\t\tsum = sum + (n / i ) \r\n\t\ti = i + 1\r\n\tsum = sum - n \r\n\treturn sum\r\ndef check_abundant(n): \r\n\tif (get_sum(n) > n): \r\n\t\treturn True\r\n\telse: \r\n\t\treturn False", "metadata": {}}
{"_id": "542_code", "title": "fill_spaces", "text": "# Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\nimport re\r\ndef fill_spaces(text):\r\n  return (re.sub(\"[ ,.]\", \":\", text))", "metadata": {}}
{"_id": "543_code", "title": "count_digits", "text": "# Write a function to add two numbers and print number of digits of sum.\ndef count_digits(num1,num2):\r\n    number=num1+num2\r\n    count = 0\r\n    while(number > 0):\r\n        number = number // 10\r\n        count = count + 1\r\n    return count", "metadata": {}}
{"_id": "544_code", "title": "flatten_tuple", "text": "# Write a function to flatten the tuple list to a string.\ndef flatten_tuple(test_list):\r\n  res = ' '.join([idx for tup in test_list for idx in tup])\r\n  return (res) ", "metadata": {}}
{"_id": "545_code", "title": "take_L_and_F_set_bits", "text": "# Write a python function to toggle only first and last bits of a given number.\ndef take_L_and_F_set_bits(n) : \r\n    n = n | n >> 1\r\n    n = n | n >> 2\r\n    n = n | n >> 4\r\n    n = n | n >> 8\r\n    n = n | n >> 16 \r\n    return ((n + 1) >> 1) + 1      \r\ndef toggle_F_and_L_bits(n) :  \r\n    if (n == 1) : \r\n        return 0 \r\n    return n ^ take_L_and_F_set_bits(n) ", "metadata": {}}
{"_id": "546_code", "title": "last_occurence_char", "text": "# Write a function to find the last occurrence of a character in a string.\ndef last_occurence_char(string,char):\r\n flag = -1\r\n for i in range(len(string)):\r\n     if(string[i] == char):\r\n         flag = i\r\n if(flag == -1):\r\n    return None\r\n else:\r\n    return flag + 1", "metadata": {}}
{"_id": "547_code", "title": "Total_Hamming_Distance", "text": "# Write a python function to find the sum of hamming distances of all consecutive numbers from o to n.\ndef Total_Hamming_Distance(n):   \r\n    i = 1\r\n    sum = 0\r\n    while (n // i > 0):  \r\n        sum = sum + n // i  \r\n        i = i * 2     \r\n    return sum", "metadata": {}}
{"_id": "548_code", "title": "longest_increasing_subsequence", "text": "# Write a function to find the length of the longest increasing subsequence of the given sequence.\ndef longest_increasing_subsequence(arr): \r\n\tn = len(arr) \r\n\tlongest_increasing_subsequence = [1]*n \r\n\tfor i in range (1 , n): \r\n\t\tfor j in range(0 , i): \r\n\t\t\tif arr[i] > arr[j] and longest_increasing_subsequence[i]< longest_increasing_subsequence[j] + 1 : \r\n\t\t\t\tlongest_increasing_subsequence[i] = longest_increasing_subsequence[j]+1\r\n\tmaximum = 0\r\n\tfor i in range(n): \r\n\t\tmaximum = max(maximum , longest_increasing_subsequence[i]) \r\n\treturn maximum", "metadata": {}}
{"_id": "549_code", "title": "odd_Num_Sum", "text": "# Write a python function to find the sum of fifth power of first n odd natural numbers.\ndef odd_Num_Sum(n) : \r\n    j = 0\r\n    sm = 0\r\n    for i in range(1,n+1) : \r\n        j = (2*i-1) \r\n        sm = sm + (j*j*j*j*j)     \r\n    return sm ", "metadata": {}}
{"_id": "550_code", "title": "find_Max", "text": "# Write a python function to find the maximum element in a sorted and rotated array.\ndef find_Max(arr,low,high): \r\n    if (high < low): \r\n        return arr[0] \r\n    if (high == low): \r\n        return arr[low] \r\n    mid = low + (high - low) // 2 \r\n    if (mid < high and arr[mid + 1] < arr[mid]): \r\n        return arr[mid] \r\n    if (mid > low and arr[mid] < arr[mid - 1]): \r\n        return arr[mid - 1]  \r\n    if (arr[low] > arr[mid]): \r\n        return find_Max(arr,low,mid - 1) \r\n    else: \r\n        return find_Max(arr,mid + 1,high) ", "metadata": {}}
{"_id": "551_code", "title": "extract_column", "text": "# Write a function to extract a specified column from a given nested list.\ndef extract_column(list1, n):\r\n   result = [i.pop(n) for i in list1]\r\n   return result ", "metadata": {}}
{"_id": "552_code", "title": "Seq_Linear", "text": "# Write a python function to check whether a given sequence is linear or not.\ndef Seq_Linear(seq_nums):\r\n  seq_nums = [seq_nums[x] - seq_nums[x-1] for x in range(1, len(seq_nums))]\r\n  if len(set(seq_nums)) == 1: \r\n    return \"Linear Sequence\"\r\n  else:\r\n    return \"Non Linear Sequence\"", "metadata": {}}
{"_id": "553_code", "title": "tuple_to_float", "text": "# Write a function to convert the given tuple to a floating-point number.\ndef tuple_to_float(test_tup):\r\n  res = float('.'.join(str(ele) for ele in test_tup))\r\n  return (res) ", "metadata": {}}
{"_id": "554_code", "title": "Split", "text": "# Write a python function to find odd numbers from a mixed list.\ndef Split(list): \r\n    od_li = [] \r\n    for i in list: \r\n        if (i % 2 != 0): \r\n            od_li.append(i)  \r\n    return od_li", "metadata": {}}
{"_id": "555_code", "title": "difference", "text": "# Write a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.\ndef difference(n) :  \r\n    S = (n*(n + 1))//2;  \r\n    res = S*(S-1);  \r\n    return res;  ", "metadata": {}}
{"_id": "556_code", "title": "find_Odd_Pair", "text": "# Write a python function to count the pairs with xor as an odd number.\ndef find_Odd_Pair(A,N) : \r\n    oddPair = 0\r\n    for i in range(0,N) :  \r\n        for j in range(i+1,N) :  \r\n            if ((A[i] ^ A[j]) % 2 != 0):  \r\n                oddPair+=1  \r\n    return oddPair  ", "metadata": {}}
{"_id": "557_code", "title": "toggle_string", "text": "# Write a function to toggle characters case in a string.\ndef toggle_string(string):\r\n string1 = string.swapcase()\r\n return string1", "metadata": {}}
{"_id": "558_code", "title": "digit_distance_nums", "text": "# Write a python function to find the digit distance between two integers.\ndef digit_distance_nums(n1, n2):\r\n         return sum(map(int,str(abs(n1-n2))))", "metadata": {}}
{"_id": "559_code", "title": "max_sub_array_sum", "text": "# Write a function to find the largest sum of contiguous subarray in the given array.\ndef max_sub_array_sum(a, size):\r\n  max_so_far = 0\r\n  max_ending_here = 0\r\n  for i in range(0, size):\r\n    max_ending_here = max_ending_here + a[i]\r\n    if max_ending_here < 0:\r\n      max_ending_here = 0\r\n    elif (max_so_far < max_ending_here):\r\n      max_so_far = max_ending_here\r\n  return max_so_far", "metadata": {}}
{"_id": "560_code", "title": "union_elements", "text": "# Write a function to find the union of elements of the given tuples.\ndef union_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1 + test_tup2))\r\n  return (res) ", "metadata": {}}
{"_id": "561_code", "title": "assign_elements", "text": "# Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.\ndef assign_elements(test_list):\r\n  res = dict()\r\n  for key, val in test_list:\r\n    res.setdefault(val, [])\r\n    res.setdefault(key, []).append(val)\r\n  return (res) ", "metadata": {}}
{"_id": "562_code", "title": "Find_Max_Length", "text": "# Write a python function to find the maximum length of sublist.\ndef Find_Max_Length(lst):  \r\n    maxLength = max(len(x) for x in lst )\r\n    return maxLength ", "metadata": {}}
{"_id": "563_code", "title": "extract_values", "text": "# Write a function to extract values between quotation marks of a string.\nimport re\r\ndef extract_values(text):\r\n return (re.findall(r'\"(.*?)\"', text))", "metadata": {}}
{"_id": "564_code", "title": "count_Pairs", "text": "# Write a python function to count unequal element pairs from the given array.\ndef count_Pairs(arr,n): \r\n    cnt = 0; \r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] != arr[j]): \r\n                cnt += 1; \r\n    return cnt; ", "metadata": {}}
{"_id": "565_code", "title": "split", "text": "# Write a python function to split a string into characters.\ndef split(word): \r\n    return [char for char in word] ", "metadata": {}}
{"_id": "566_code", "title": "sum_digits", "text": "# Write a function to get the sum of a non-negative integer.\ndef sum_digits(n):\r\n  if n == 0:\r\n    return 0\r\n  else:\r\n    return n % 10 + sum_digits(int(n / 10))", "metadata": {}}
{"_id": "567_code", "title": "issort_list", "text": "# Write a function to check whether a specified list is sorted or not.\ndef issort_list(list1):\r\n    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\r\n    return result", "metadata": {}}
{"_id": "568_code", "title": "empty_list", "text": "# Write a function to create a list of empty dictionaries.\ndef empty_list(length):\r\n empty_list = [{} for _ in range(length)]\r\n return empty_list", "metadata": {}}
{"_id": "569_code", "title": "sort_sublists", "text": "# Write a function to sort each sublist of strings in a given list of lists.\ndef sort_sublists(list1):\r\n    result = list(map(sorted,list1)) \r\n    return result", "metadata": {}}
{"_id": "570_code", "title": "remove_words", "text": "# Write a function to remove words from a given list of strings containing a character or string.\ndef remove_words(list1, charlist):\r\n    new_list = []\r\n    for line in list1:\r\n        new_words = ' '.join([word for word in line.split() if not any([phrase in word for phrase in charlist])])\r\n        new_list.append(new_words)\r\n    return new_list", "metadata": {}}
{"_id": "571_code", "title": "max_sum_pair_diff_lessthan_K", "text": "# Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.\ndef max_sum_pair_diff_lessthan_K(arr, N, K): \r\n\tarr.sort() \r\n\tdp = [0] * N \r\n\tdp[0] = 0\r\n\tfor i in range(1, N): \r\n\t\tdp[i] = dp[i-1] \r\n\t\tif (arr[i] - arr[i-1] < K): \r\n\t\t\tif (i >= 2): \r\n\t\t\t\tdp[i] = max(dp[i], dp[i-2] + arr[i] + arr[i-1]); \r\n\t\t\telse: \r\n\t\t\t\tdp[i] = max(dp[i], arr[i] + arr[i-1]); \r\n\treturn dp[N - 1]", "metadata": {}}
{"_id": "572_code", "title": "two_unique_nums", "text": "# Write a python function to remove two duplicate numbers from a given number of lists.\ndef two_unique_nums(nums):\r\n  return [i for i in nums if nums.count(i)==1]", "metadata": {}}
{"_id": "573_code", "title": "unique_product", "text": "# Write a python function to calculate the product of the unique numbers of a given list.\ndef unique_product(list_data):\r\n    temp = list(set(list_data))\r\n    p = 1\r\n    for i in temp:\r\n        p *= i\r\n    return p", "metadata": {}}
{"_id": "574_code", "title": "surfacearea_cylinder", "text": "# Write a function to find the surface area of a cylinder.\ndef surfacearea_cylinder(r,h):\r\n  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\r\n  return surfacearea", "metadata": {}}
{"_id": "575_code", "title": "count_no ", "text": "# Write a python function to find nth number in a sequence which is not a multiple of a given number.\ndef count_no (A,N,L,R): \r\n    count = 0\r\n    for i in range (L,R + 1): \r\n        if (i % A != 0): \r\n            count += 1\r\n        if (count == N): \r\n            break\r\n    return (i) ", "metadata": {}}
{"_id": "576_code", "title": "is_Sub_Array", "text": "# Write a python function to check whether an array is subarray of another or not.\ndef is_Sub_Array(A,B,n,m): \r\n    i = 0; j = 0; \r\n    while (i < n and j < m):  \r\n        if (A[i] == B[j]): \r\n            i += 1; \r\n            j += 1; \r\n            if (j == m): \r\n                return True;  \r\n        else: \r\n            i = i - j + 1; \r\n            j = 0;       \r\n    return False; ", "metadata": {}}
{"_id": "577_code", "title": "last_Digit_Factorial", "text": "# Write a python function to find the last digit in factorial of a given number.\ndef last_Digit_Factorial(n): \r\n    if (n == 0): return 1\r\n    elif (n <= 2): return n  \r\n    elif (n == 3): return 6\r\n    elif (n == 4): return 4 \r\n    else: \r\n      return 0", "metadata": {}}
{"_id": "578_code", "title": "interleave_lists", "text": "# Write a function to interleave lists of the same length.\ndef interleave_lists(list1,list2,list3):\r\n    result = [el for pair in zip(list1, list2, list3) for el in pair]\r\n    return result", "metadata": {}}
{"_id": "579_code", "title": "find_dissimilar", "text": "# Write a function to find the dissimilar elements in the given two tuples.\ndef find_dissimilar(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) ^ set(test_tup2))\r\n  return (res) ", "metadata": {}}
{"_id": "580_code", "title": "even_ele", "text": "# Write a function to extract the even elements in the nested mixed tuple.\ndef even_ele(test_tuple, even_fnc): \r\n\tres = tuple() \r\n\tfor ele in test_tuple: \r\n\t\tif isinstance(ele, tuple): \r\n\t\t\tres += (even_ele(ele, even_fnc), ) \r\n\t\telif even_fnc(ele): \r\n\t\t\tres += (ele, ) \r\n\treturn res \r\ndef extract_even(test_tuple):\r\n  res = even_ele(test_tuple, lambda x: x % 2 == 0)\r\n  return (res) ", "metadata": {}}
{"_id": "581_code", "title": "surface_Area", "text": "# Write a python function to find the surface area of the square pyramid.\ndef surface_Area(b,s): \r\n    return 2 * b * s + pow(b,2) ", "metadata": {}}
{"_id": "582_code", "title": "my_dict", "text": "# Write a function to check if a dictionary is empty or not.\ndef my_dict(dict1):\r\n  if bool(dict1):\r\n     return False\r\n  else:\r\n     return True", "metadata": {}}
{"_id": "583_code", "title": "catalan_number", "text": "# Write a function for nth catalan number.\ndef catalan_number(num):\r\n    if num <=1:\r\n         return 1   \r\n    res_num = 0\r\n    for i in range(num):\r\n        res_num += catalan_number(i) * catalan_number(num-i-1)\r\n    return res_num", "metadata": {}}
{"_id": "584_code", "title": "find_adverbs", "text": "# Write a function to find all adverbs and their positions in a given sentence by using regex.\nimport re\r\ndef find_adverbs(text):\r\n  for m in re.finditer(r\"\\w+ly\", text):\r\n    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))", "metadata": {}}
{"_id": "585_code", "title": "expensive_items", "text": "# Write a function to find the n - expensive price items from a given dataset using heap queue algorithm.\nimport heapq\r\ndef expensive_items(items,n):\r\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\r\n  return expensive_items", "metadata": {}}
{"_id": "586_code", "title": "split_Arr", "text": "# Write a python function to split the array and add the first part to the end.\ndef split_Arr(a,n,k):  \r\n   b = a[:k] \r\n   return (a[k::]+b[::]) ", "metadata": {}}
{"_id": "587_code", "title": "list_tuple", "text": "# Write a function to convert a list to a tuple.\ndef list_tuple(listx):\r\n  tuplex = tuple(listx)\r\n  return tuplex", "metadata": {}}
{"_id": "588_code", "title": "big_diff", "text": "# Write a python function to find the difference between largest and smallest value in a given array.\ndef big_diff(nums):\r\n     diff= max(nums)-min(nums)\r\n     return diff", "metadata": {}}
{"_id": "589_code", "title": "perfect_squares", "text": "# Write a function to find perfect squares between two given numbers.\ndef perfect_squares(a, b):\r\n    lists=[]\r\n    for i in range (a,b+1):\r\n        j = 1;\r\n        while j*j <= i:\r\n            if j*j == i:\r\n                 lists.append(i)  \r\n            j = j+1\r\n        i = i+1\r\n    return lists", "metadata": {}}
{"_id": "590_code", "title": "polar_rect", "text": "# Write a function to convert polar coordinates to rectangular coordinates.\nimport cmath\r\ndef polar_rect(x,y):\r\n cn = complex(x,y)\r\n cn=cmath.polar(cn)\r\n cn1 = cmath.rect(2, cmath.pi)\r\n return (cn,cn1)", "metadata": {}}
{"_id": "591_code", "title": "swap_List", "text": "# Write a python function to interchange the first and last elements in a list.\ndef swap_List(newList): \r\n    size = len(newList) \r\n    temp = newList[0] \r\n    newList[0] = newList[size - 1] \r\n    newList[size - 1] = temp  \r\n    return newList ", "metadata": {}}
{"_id": "592_code", "title": "binomial_Coeff", "text": "# Write a python function to find sum of product of binomial co-efficients.\ndef binomial_Coeff(n,k): \r\n    C = [0] * (k + 1); \r\n    C[0] = 1; # nC0 is 1 \r\n    for i in range(1,n + 1):  \r\n        for j in range(min(i, k),0,-1): \r\n            C[j] = C[j] + C[j - 1]; \r\n    return C[k]; \r\ndef sum_Of_product(n): \r\n    return binomial_Coeff(2 * n,n - 1); ", "metadata": {}}
{"_id": "593_code", "title": "removezero_ip", "text": "# Write a function to remove leading zeroes from an ip address.\nimport re\r\ndef removezero_ip(ip):\r\n string = re.sub('\\.[0]*', '.', ip)\r\n return string\r", "metadata": {}}
{"_id": "594_code", "title": "diff_even_odd", "text": "# Write a function to find the difference of first even and odd number of a given list.\ndef diff_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even-first_odd)", "metadata": {}}
{"_id": "595_code", "title": "min_Swaps", "text": "# Write a python function to count minimum number of swaps required to convert one binary string to another.\ndef min_Swaps(str1,str2) : \r\n    count = 0\r\n    for i in range(len(str1)) :  \r\n        if str1[i] != str2[i] : \r\n            count += 1\r\n    if count % 2 == 0 : \r\n        return (count // 2) \r\n    else : \r\n        return (\"Not Possible\") ", "metadata": {}}
{"_id": "596_code", "title": "tuple_size", "text": "# Write a function to find the size of the given tuple.\nimport sys \r\ndef tuple_size(tuple_list):\r\n  return (sys.getsizeof(tuple_list)) ", "metadata": {}}
{"_id": "597_code", "title": "find_kth", "text": "# Write a function to find kth element from the given two sorted arrays.\ndef find_kth(arr1, arr2, m, n, k):\r\n\tsorted1 = [0] * (m + n)\r\n\ti = 0\r\n\tj = 0\r\n\td = 0\r\n\twhile (i < m and j < n):\r\n\t\tif (arr1[i] < arr2[j]):\r\n\t\t\tsorted1[d] = arr1[i]\r\n\t\t\ti += 1\r\n\t\telse:\r\n\t\t\tsorted1[d] = arr2[j]\r\n\t\t\tj += 1\r\n\t\td += 1\r\n\twhile (i < m):\r\n\t\tsorted1[d] = arr1[i]\r\n\t\td += 1\r\n\t\ti += 1\r\n\twhile (j < n):\r\n\t\tsorted1[d] = arr2[j]\r\n\t\td += 1\r\n\t\tj += 1\r\n\treturn sorted1[k - 1]", "metadata": {}}
{"_id": "598_code", "title": "armstrong_number", "text": "# Write a function to check whether the given number is armstrong or not.\ndef armstrong_number(number):\r\n sum = 0\r\n times = 0\r\n temp = number\r\n while temp > 0:\r\n           times = times + 1\r\n           temp = temp // 10\r\n temp = number\r\n while temp > 0:\r\n           reminder = temp % 10\r\n           sum = sum + (reminder ** times)\r\n           temp //= 10\r\n if number == sum:\r\n           return True\r\n else:\r\n           return False", "metadata": {}}
{"_id": "599_code", "title": "sum_average", "text": "# Write a function to find sum and average of first n natural numbers.\ndef sum_average(number):\r\n total = 0\r\n for value in range(1, number + 1):\r\n    total = total + value\r\n average = total / number\r\n return (total,average)", "metadata": {}}
{"_id": "600_code", "title": "is_Even", "text": "# Write a python function to check whether the given number is even or not using bitwise operator.\ndef is_Even(n) : \r\n    if (n^1 == n+1) :\r\n        return True; \r\n    else :\r\n        return False; ", "metadata": {}}
{"_id": "11_code", "title": "remove_Occ", "text": "# Write a python function to remove first and last occurrence of a given character from the string.\ndef remove_Occ(s,ch): \r\n    for i in range(len(s)): \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    for i in range(len(s) - 1,-1,-1):  \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    return s ", "metadata": {}}
{"_id": "12_code", "title": "sort_matrix", "text": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(M):\r\n    result = sorted(M, key=sum)\r\n    return result", "metadata": {}}
{"_id": "13_code", "title": "count_common", "text": "# Write a function to count the most common words in a dictionary.\nfrom collections import Counter\r\ndef count_common(words):\r\n  word_counts = Counter(words)\r\n  top_four = word_counts.most_common(4)\r\n  return (top_four)\r\n", "metadata": {}}
{"_id": "14_code", "title": "find_Volume", "text": "# Write a python function to find the volume of a triangular prism.\ndef find_Volume(l,b,h) : \r\n    return ((l * b * h) / 2) ", "metadata": {}}
{"_id": "15_code", "title": "split_lowerstring", "text": "# Write a function to split a string at lowercase letters.\nimport re\r\ndef split_lowerstring(text):\r\n return (re.findall('[a-z][^a-z]*', text))", "metadata": {}}
{"_id": "16_code", "title": "text_lowercase_underscore", "text": "# Write a function to find sequences of lowercase letters joined with an underscore.\nimport re\r\ndef text_lowercase_underscore(text):\r\n        patterns = '^[a-z]+_[a-z]+$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')", "metadata": {}}
{"_id": "17_code", "title": "square_perimeter", "text": "# Write a function to find the perimeter of a square.\ndef square_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter", "metadata": {}}
{"_id": "18_code", "title": "str_to_list", "text": "# Write a function to remove characters from the first string which are present in the second string.\nNO_OF_CHARS = 256\r\ndef str_to_list(string): \r\n\ttemp = [] \r\n\tfor x in string: \r\n\t\ttemp.append(x) \r\n\treturn temp \r\ndef lst_to_string(List): \r\n\treturn ''.join(List) \r\ndef get_char_count_array(string): \r\n\tcount = [0] * NO_OF_CHARS \r\n\tfor i in string: \r\n\t\tcount[ord(i)] += 1\r\n\treturn count \r\ndef remove_dirty_chars(string, second_string): \r\n\tcount = get_char_count_array(second_string) \r\n\tip_ind = 0\r\n\tres_ind = 0\r\n\ttemp = '' \r\n\tstr_list = str_to_list(string) \r\n\twhile ip_ind != len(str_list): \r\n\t\ttemp = str_list[ip_ind] \r\n\t\tif count[ord(temp)] == 0: \r\n\t\t\tstr_list[res_ind] = str_list[ip_ind] \r\n\t\t\tres_ind += 1\r\n\t\tip_ind+=1\r\n\treturn lst_to_string(str_list[0:res_ind]) ", "metadata": {}}
{"_id": "19_code", "title": "test_duplicate", "text": "# Write a function to find whether a given array of integers contains any duplicate element.\ndef test_duplicate(arraynums):\r\n    nums_set = set(arraynums)    \r\n    return len(arraynums) != len(nums_set)     ", "metadata": {}}
{"_id": "20_code", "title": "is_woodall", "text": "# Write a function to check if the given number is woodball or not.\ndef is_woodall(x): \r\n\tif (x % 2 == 0): \r\n\t\treturn False\r\n\tif (x == 1): \r\n\t\treturn True\r\n\tx = x + 1 \r\n\tp = 0\r\n\twhile (x % 2 == 0): \r\n\t\tx = x/2\r\n\t\tp = p + 1\r\n\t\tif (p == x): \r\n\t\t\treturn True\r\n\treturn False", "metadata": {}}
{"_id": "21_code", "title": "multiples_of_num", "text": "# Write a function to find m number of multiples of n.\ndef multiples_of_num(m,n): \r\n    multiples_of_num= list(range(n,(m+1)*n, n)) \r\n    return list(multiples_of_num)", "metadata": {}}
{"_id": "22_code", "title": "find_first_duplicate", "text": "# Write a function to find the first duplicate element in a given array of integers.\ndef find_first_duplicate(nums):\r\n    num_set = set()\r\n    no_duplicate = -1\r\n\r\n    for i in range(len(nums)):\r\n\r\n        if nums[i] in num_set:\r\n            return nums[i]\r\n        else:\r\n            num_set.add(nums[i])\r\n\r\n    return no_duplicate", "metadata": {}}
{"_id": "23_code", "title": "maximum_Sum", "text": "# Write a python function to find the maximum sum of elements of list in a list of lists.\ndef maximum_Sum(list1): \r\n    maxi = -100000\r\n    for x in list1: \r\n        sum = 0 \r\n        for y in x: \r\n            sum+= y      \r\n        maxi = max(sum,maxi)     \r\n    return maxi ", "metadata": {}}
{"_id": "24_code", "title": "binary_to_decimal", "text": "# Write a function to convert the given binary number to its decimal equivalent.\ndef binary_to_decimal(binary): \r\n    binary1 = binary \r\n    decimal, i, n = 0, 0, 0\r\n    while(binary != 0): \r\n        dec = binary % 10\r\n        decimal = decimal + dec * pow(2, i) \r\n        binary = binary//10\r\n        i += 1\r\n    return (decimal)", "metadata": {}}
{"_id": "25_code", "title": "find_Product", "text": "# Write a python function to find the product of non-repeated elements in a given array.\ndef find_Product(arr,n): \r\n    arr.sort() \r\n    prod = 1\r\n    for i in range(0,n,1): \r\n        if (arr[i - 1] != arr[i]): \r\n            prod = prod * arr[i] \r\n    return prod; ", "metadata": {}}
{"_id": "26_code", "title": "check_k_elements", "text": "# Write a function to check if the given tuple list has all k elements.\ndef check_k_elements(test_list, K):\r\n  res = True\r\n  for tup in test_list:\r\n    for ele in tup:\r\n      if ele != K:\r\n        res = False\r\n  return (res) ", "metadata": {}}
{"_id": "27_code", "title": "remove", "text": "# Write a python function to remove all digits from a list of strings.\nimport re  \r\ndef remove(list): \r\n    pattern = '[0-9]'\r\n    list = [re.sub(pattern, '', i) for i in list] \r\n    return list", "metadata": {}}
{"_id": "28_code", "title": "binomial_Coeff", "text": "# Write a python function to find binomial co-efficient.\ndef binomial_Coeff(n,k): \r\n    if k > n : \r\n       return 0\r\n    if k==0 or k ==n : \r\n        return 1 \r\n    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) ", "metadata": {}}
{"_id": "29_code", "title": "get_Odd_Occurrence", "text": "# Write a python function to find the element occurring odd number of times.\ndef get_Odd_Occurrence(arr,arr_size):   \r\n    for i in range(0,arr_size): \r\n        count = 0\r\n        for j in range(0,arr_size): \r\n            if arr[i] == arr[j]: \r\n                count+=1     \r\n        if (count % 2 != 0): \r\n            return arr[i]     \r\n    return -1", "metadata": {}}
{"_id": "30_code", "title": "check_Equality", "text": "# Write a python function to count all the substrings starting and ending with same characters.\ndef check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n): \r\n        for j in range(1,n-i+1):  \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; ", "metadata": {}}
{"_id": "31_code", "title": "func", "text": "# Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\ndef func(nums, k):\r\n    import collections\r\n    d = collections.defaultdict(int)\r\n    for row in nums:\r\n        for i in row:\r\n            d[i] += 1\r\n    temp = []\r\n    import heapq\r\n    for key, v in d.items():\r\n        if len(temp) < k:\r\n            temp.append((v, key))\r\n            if len(temp) == k:\r\n                heapq.heapify(temp)\r\n        else:\r\n            if v > temp[0][0]:\r\n                heapq.heappop(temp)\r\n                heapq.heappush(temp, (v, key))\r\n    result = []\r\n    while temp:\r\n        v, key = heapq.heappop(temp)\r\n        result.append(key)\r\n    return result", "metadata": {}}
{"_id": "32_code", "title": "max_Prime_Factors ", "text": "# Write a python function to find the largest prime factor of a given number.\nimport math \r\ndef max_Prime_Factors (n): \r\n    maxPrime = -1 \r\n    while n%2 == 0: \r\n        maxPrime = 2\r\n        n >>= 1    \r\n    for i in range(3,int(math.sqrt(n))+1,2): \r\n        while n % i == 0: \r\n            maxPrime = i \r\n            n = n / i \r\n    if n > 2: \r\n        maxPrime = n  \r\n    return int(maxPrime)", "metadata": {}}
{"_id": "33_code", "title": "decimal_To_Binary", "text": "# Write a python function to convert a decimal number to binary number.\ndef decimal_To_Binary(N): \r\n    B_Number = 0\r\n    cnt = 0\r\n    while (N != 0): \r\n        rem = N % 2\r\n        c = pow(10,cnt)  \r\n        B_Number += rem*c  \r\n        N //= 2 \r\n        cnt += 1\r\n    return B_Number  ", "metadata": {}}
{"_id": "34_code", "title": "find_missing", "text": "# Write a python function to find the missing number in a sorted array.\ndef find_missing(ar,N): \r\n    l = 0\r\n    r = N - 1\r\n    while (l <= r):  \r\n        mid = (l + r) / 2\r\n        mid= int (mid) \r\n        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): \r\n            return (mid + 1)  \r\n        elif (ar[mid] != mid + 1): \r\n            r = mid - 1 \r\n        else: \r\n            l = mid + 1\r\n    return (-1) ", "metadata": {}}
{"_id": "35_code", "title": "find_rect_num", "text": "# Write a function to find the n-th rectangular number.\ndef find_rect_num(n):\r\n  return n*(n + 1) ", "metadata": {}}
{"_id": "36_code", "title": "find_Nth_Digit", "text": "# Write a python function to find the nth digit in the proper fraction of two given numbers.\ndef find_Nth_Digit(p,q,N) :  \r\n    while (N > 0) : \r\n        N -= 1;  \r\n        p *= 10;  \r\n        res = p // q;  \r\n        p %= q;  \r\n    return res;  ", "metadata": {}}
{"_id": "37_code", "title": "sort_mixed_list", "text": "# Write a function to sort a given mixed list of integers and strings.\ndef sort_mixed_list(mixed_list):\r\n    int_part = sorted([i for i in mixed_list if type(i) is int])\r\n    str_part = sorted([i for i in mixed_list if type(i) is str])\r\n    return int_part + str_part", "metadata": {}}
{"_id": "38_code", "title": "div_even_odd", "text": "# Write a function to find the division of first even and odd number of a given list.\ndef div_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even/first_odd)", "metadata": {}}
{"_id": "39_code", "title": "rearange_string", "text": "# Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nimport heapq\r\nfrom collections import Counter\r\ndef rearange_string(S):\r\n    ctr = Counter(S)\r\n    heap = [(-value, key) for key, value in ctr.items()]\r\n    heapq.heapify(heap)\r\n    if (-heap[0][0]) * 2 > len(S) + 1: \r\n        return \"\"\r\n    ans = []\r\n    while len(heap) >= 2:\r\n        nct1, char1 = heapq.heappop(heap)\r\n        nct2, char2 = heapq.heappop(heap)\r\n        ans.extend([char1, char2])\r\n        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))\r\n        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))\r\n    return \"\".join(ans) + (heap[0][1] if heap else \"\")", "metadata": {}}
{"_id": "40_code", "title": "freq_element", "text": "# Write a function to find frequency of the elements in a given list of lists using collections module.\nfrom collections import Counter\r\nfrom itertools import chain\r\ndef freq_element(nums):\r\n  result = Counter(chain.from_iterable(nums))\r\n  return result", "metadata": {}}
{"_id": "41_code", "title": "filter_evennumbers", "text": "# Write a function to filter even numbers using lambda function.\ndef filter_evennumbers(nums):\r\n even_nums = list(filter(lambda x: x%2 == 0, nums))\r\n return even_nums", "metadata": {}}
{"_id": "42_code", "title": "find_Sum", "text": "# Write a python function to find the sum of repeated elements in a given array.\ndef find_Sum(arr,n): \r\n    return sum([x for x in arr if arr.count(x) > 1])", "metadata": {}}
{"_id": "43_code", "title": "text_match", "text": "# Write a function to find sequences of lowercase letters joined with an underscore using regex.\nimport re\r\ndef text_match(text):\r\n  patterns = '^[a-z]+_[a-z]+$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')", "metadata": {}}
{"_id": "44_code", "title": "text_match_string", "text": "# Write a function that matches a word at the beginning of a string.\nimport re\r\ndef text_match_string(text):\r\n        patterns = '^\\w+'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'", "metadata": {}}
{"_id": "45_code", "title": "find_gcd", "text": "# Write a function to find the gcd of the given array elements.\ndef find_gcd(x, y): \r\n\twhile(y): \r\n\t\tx, y = y, x % y \r\n\treturn x \r\ndef get_gcd(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  gcd = find_gcd(num1, num2)\r\n  for i in range(2, len(l)):\r\n    gcd = find_gcd(gcd, l[i])\r\n  return gcd", "metadata": {}}
{"_id": "46_code", "title": "test_distinct", "text": "# Write a python function to determine whether all the numbers are different from each other are not.\ndef test_distinct(data):\r\n  if len(data) == len(set(data)):\r\n    return True\r\n  else:\r\n    return False;", "metadata": {}}
{"_id": "47_code", "title": "compute_Last_Digit", "text": "# Write a python function to find the last digit when factorial of a divides factorial of b.\ndef compute_Last_Digit(A,B): \r\n    variable = 1\r\n    if (A == B): \r\n        return 1\r\n    elif ((B - A) >= 5):  \r\n        return 0\r\n    else:   \r\n        for i in range(A + 1,B + 1): \r\n            variable = (variable * (i % 10)) % 10\r\n        return variable % 10", "metadata": {}}
{"_id": "48_code", "title": "odd_bit_set_number", "text": "# Write a python function to set all odd bits of a given number.\ndef odd_bit_set_number(n):\r\n    count = 0;res = 0;temp = n\r\n    while temp > 0:\r\n        if count % 2 == 0:\r\n            res |= (1 << count)\r\n        count += 1\r\n        temp >>= 1\r\n    return (n | res)", "metadata": {}}
{"_id": "49_code", "title": "specified_element", "text": "# Write a function to extract every first or specified element from a given two-dimensional list.\ndef specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result\r\n    ", "metadata": {}}
{"_id": "50_code", "title": "min_length_list", "text": "# Write a function to find the list with minimum length using lambda function.\ndef min_length_list(input_list):\r\n    min_length = min(len(x) for x in input_list )  \r\n    min_list = min(input_list, key = lambda i: len(i))\r\n    return(min_length, min_list)", "metadata": {}}
{"_id": "51_code", "title": "check_equilateral", "text": "# Write a function to print check if the triangle is equilateral or not.\ndef check_equilateral(x,y,z):\r\n  if x == y == z:\r\n\t   return True\r\n  else:\r\n     return False", "metadata": {}}
{"_id": "52_code", "title": "parallelogram_area", "text": "# Write a function to caluclate area of a parallelogram.\ndef parallelogram_area(b,h):\r\n  area=b*h\r\n  return area", "metadata": {}}
{"_id": "53_code", "title": "check_Equality", "text": "# Write a python function to check whether the first and last characters of a given string are equal or not.\ndef check_Equality(str):\r\n  if (str[0] == str[-1]):  \r\n    return (\"Equal\") \r\n  else:  \r\n    return (\"Not Equal\") ", "metadata": {}}
{"_id": "54_code", "title": "counting_sort", "text": "# Write a function to sort the given array by using counting sort.\ndef counting_sort(my_list):\r\n    max_value = 0\r\n    for i in range(len(my_list)):\r\n        if my_list[i] > max_value:\r\n            max_value = my_list[i]\r\n    buckets = [0] * (max_value + 1)\r\n    for i in my_list:\r\n        buckets[i] += 1\r\n    i = 0\r\n    for j in range(max_value + 1):\r\n         for a in range(buckets[j]):\r\n             my_list[i] = j\r\n             i += 1\r\n    return my_list", "metadata": {}}
{"_id": "55_code", "title": "tn_gp", "text": "# Write a function to find t-nth term of geometric series.\nimport math\r\ndef tn_gp(a,n,r):\r\n  tn = a * (math.pow(r, n - 1))\r\n  return tn", "metadata": {}}
{"_id": "56_code", "title": "rev", "text": "# Write a python function to check if a given number is one less than twice its reverse.\ndef rev(num):    \r\n    rev_num = 0\r\n    while (num > 0):  \r\n        rev_num = (rev_num * 10 + num % 10) \r\n        num = num // 10  \r\n    return rev_num  \r\ndef check(n):    \r\n    return (2 * rev(n) == n + 1)  ", "metadata": {}}
{"_id": "57_code", "title": "find_Max_Num", "text": "# Write a python function to find the largest number that can be formed with the given digits.\ndef find_Max_Num(arr,n) : \r\n    arr.sort(reverse = True) \r\n    num = arr[0] \r\n    for i in range(1,n) : \r\n        num = num * 10 + arr[i] \r\n    return num ", "metadata": {}}
{"_id": "58_code", "title": "opposite_Signs", "text": "# Write a python function to check whether the given two integers have opposite sign or not.\ndef opposite_Signs(x,y): \r\n    return ((x ^ y) < 0); ", "metadata": {}}
{"_id": "59_code", "title": "is_octagonal", "text": "# Write a function to find the nth octagonal number.\ndef is_octagonal(n): \r\n\treturn 3 * n * n - 2 * n ", "metadata": {}}
{"_id": "60_code", "title": "max_len_sub", "text": "# Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\ndef max_len_sub( arr, n): \r\n\tmls=[] \r\n\tmax = 0\r\n\tfor i in range(n): \r\n\t\tmls.append(1) \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1): \r\n\t\t\t\tmls[i] = mls[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mls[i]): \r\n\t\t\tmax = mls[i] \r\n\treturn max", "metadata": {}}
{"_id": "61_code", "title": "count_Substrings", "text": "# Write a python function to count number of substrings with the sum of digits equal to their length.\nfrom collections import defaultdict\r\ndef count_Substrings(s,n):\r\n    count,sum = 0,0\r\n    mp = defaultdict(lambda : 0)\r\n    mp[0] += 1\r\n    for i in range(n):\r\n        sum += ord(s[i]) - ord('0')\r\n        count += mp[sum - (i + 1)]\r\n        mp[sum - (i + 1)] += 1\r\n    return count", "metadata": {}}
{"_id": "62_code", "title": "smallest_num", "text": "# Write a python function to find smallest number in a list.\ndef smallest_num(xs):\n  return min(xs)\n", "metadata": {}}
{"_id": "63_code", "title": "max_difference", "text": "# Write a function to find the maximum difference between available pairs in the given tuple list.\ndef max_difference(test_list):\r\n  temp = [abs(b - a) for a, b in test_list]\r\n  res = max(temp)\r\n  return (res) ", "metadata": {}}
{"_id": "64_code", "title": "subject_marks", "text": "# Write a function to sort a list of tuples using lambda.\ndef subject_marks(subjectmarks):\r\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\r\n subjectmarks.sort(key = lambda x: x[1])\r\n return subjectmarks", "metadata": {}}
{"_id": "65_code", "title": "recursive_list_sum", "text": "# Write a function of recursion list sum.\ndef recursive_list_sum(data_list):\r\n\ttotal = 0\r\n\tfor element in data_list:\r\n\t\tif type(element) == type([]):\r\n\t\t\ttotal = total + recursive_list_sum(element)\r\n\t\telse:\r\n\t\t\ttotal = total + element\r\n\treturn total", "metadata": {}}
{"_id": "66_code", "title": "pos_count", "text": "# Write a python function to count positive numbers in a list.\ndef pos_count(list):\r\n  pos_count= 0\r\n  for num in list: \r\n    if num >= 0: \r\n      pos_count += 1\r\n  return pos_count ", "metadata": {}}
{"_id": "67_code", "title": "bell_number", "text": "# Write a function to find the number of ways to partition a set of bell numbers.\ndef bell_number(n):   \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1): \r\n        bell[i][0] = bell[i-1][i-1]  \r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \r\n    return bell[n][0] ", "metadata": {}}
{"_id": "68_code", "title": "is_Monotonic", "text": "# Write a python function to check whether the given array is monotonic or not.\ndef is_Monotonic(A): \r\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\r\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) ", "metadata": {}}
{"_id": "69_code", "title": "is_sublist", "text": "# Write a function to check whether a list contains the given sublist or not.\ndef is_sublist(l, s):\r\n\tsub_set = False\r\n\tif s == []:\r\n\t\tsub_set = True\r\n\telif s == l:\r\n\t\tsub_set = True\r\n\telif len(s) > len(l):\r\n\t\tsub_set = False\r\n\telse:\r\n\t\tfor i in range(len(l)):\r\n\t\t\tif l[i] == s[0]:\r\n\t\t\t\tn = 1\r\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\r\n\t\t\t\t\tn += 1\t\t\t\t\r\n\t\t\t\tif n == len(s):\r\n\t\t\t\t\tsub_set = True\r\n\treturn sub_set", "metadata": {}}
{"_id": "70_code", "title": "find_equal_tuple", "text": "# Write a function to find whether all the given tuples have equal length or not.\ndef find_equal_tuple(Input, k):\r\n  flag = 1\r\n  for tuple in Input:\r\n    if len(tuple) != k:\r\n      flag = 0\r\n      break\r\n  return flag\r\ndef get_equal(Input, k):\r\n  if find_equal_tuple(Input, k) == 1:\r\n    return (\"All tuples have same length\")\r\n  else:\r\n    return (\"All tuples do not have same length\")", "metadata": {}}
{"_id": "71_code", "title": "comb_sort", "text": "# Write a function to sort a list of elements using comb sort.\ndef comb_sort(nums):\r\n    shrink_fact = 1.3\r\n    gaps = len(nums)\r\n    swapped = True\r\n    i = 0\r\n    while gaps > 1 or swapped:\r\n        gaps = int(float(gaps) / shrink_fact)\r\n        swapped = False\r\n        i = 0\r\n        while gaps + i < len(nums):\r\n            if nums[i] > nums[i+gaps]:\r\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\r\n                swapped = True\r\n            i += 1\r\n    return nums", "metadata": {}}
{"_id": "72_code", "title": "dif_Square", "text": "# Write a python function to check whether the given number can be represented as difference of two squares or not.\ndef dif_Square(n): \r\n    if (n % 4 != 2): \r\n        return True\r\n    return False", "metadata": {}}
{"_id": "73_code", "title": "multiple_split", "text": "# Write a function to split the given string with multiple delimiters by using regex.\nimport re\r\ndef multiple_split(text):\r\n  return (re.split('; |, |\\*|\\n',text))", "metadata": {}}
{"_id": "74_code", "title": "is_samepatterns", "text": "# Write a function to check whether it follows the sequence given in the patterns array.\ndef is_samepatterns(colors, patterns):    \r\n    if len(colors) != len(patterns):\r\n        return False    \r\n    sdict = {}\r\n    pset = set()\r\n    sset = set()    \r\n    for i in range(len(patterns)):\r\n        pset.add(patterns[i])\r\n        sset.add(colors[i])\r\n        if patterns[i] not in sdict.keys():\r\n            sdict[patterns[i]] = []\r\n\r\n        keys = sdict[patterns[i]]\r\n        keys.append(colors[i])\r\n        sdict[patterns[i]] = keys\r\n\r\n    if len(pset) != len(sset):\r\n        return False   \r\n\r\n    for values in sdict.values():\r\n\r\n        for i in range(len(values) - 1):\r\n            if values[i] != values[i+1]:\r\n                return False\r\n\r\n    return True", "metadata": {}}
{"_id": "75_code", "title": "find_tuples", "text": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, K):\r\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\r\n  return (str(res)) ", "metadata": {}}
{"_id": "76_code", "title": "count_Squares", "text": "# Write a python function to count the number of squares in a rectangle.\ndef count_Squares(m,n):\r\n    if(n < m):\r\n        temp = m\r\n        m = n\r\n        n = temp\r\n    return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2))", "metadata": {}}
{"_id": "77_code", "title": "is_Diff", "text": "# Write a python function to find the difference between sum of even and odd digits.\ndef is_Diff(n): \r\n    return (n % 11 == 0) ", "metadata": {}}
{"_id": "78_code", "title": "count_With_Odd_SetBits", "text": "# Write a python function to find number of integers with odd number of set bits.\ndef count_With_Odd_SetBits(n): \r\n    if (n % 2 != 0): \r\n        return (n + 1) / 2\r\n    count = bin(n).count('1') \r\n    ans = n / 2\r\n    if (count % 2 != 0): \r\n        ans += 1\r\n    return ans ", "metadata": {}}
{"_id": "79_code", "title": "word_len", "text": "# Write a python function to check whether the length of the word is odd or not.\ndef word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2!=0: \r\n            return True  \r\n        else:\r\n          return False", "metadata": {}}
{"_id": "80_code", "title": "tetrahedral_number", "text": "# Write a function to find the nth tetrahedral number.\ndef tetrahedral_number(n): \r\n\treturn (n * (n + 1) * (n + 2)) / 6", "metadata": {}}
{"_id": "81_code", "title": "zip_tuples", "text": "# Write a function to zip the two given tuples.\ndef zip_tuples(test_tup1, test_tup2):\r\n  res = []\r\n  for i, j in enumerate(test_tup1):\r\n    res.append((j, test_tup2[i % len(test_tup2)])) \r\n  return (res) ", "metadata": {}}
{"_id": "82_code", "title": "volume_sphere", "text": "# Write a function to find the volume of a sphere.\nimport math\r\ndef volume_sphere(r):\r\n  volume=(4/3)*math.pi*r*r*r\r\n  return volume", "metadata": {}}
{"_id": "83_code", "title": "get_Char", "text": "# Write a python function to find the character made by adding all the characters of the given string.\ndef get_Char(strr):  \r\n    summ = 0\r\n    for i in range(len(strr)): \r\n        summ += (ord(strr[i]) - ord('a') + 1)  \r\n    if (summ % 26 == 0): \r\n        return ord('z') \r\n    else: \r\n        summ = summ % 26\r\n        return chr(ord('a') + summ - 1)", "metadata": {}}
{"_id": "84_code", "title": "sequence", "text": "# Write a function to find the n-th number in newman conway sequence.\ndef sequence(n): \r\n\tif n == 1 or n == 2: \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))", "metadata": {}}
{"_id": "85_code", "title": "surfacearea_sphere", "text": "# Write a function to find the surface area of a sphere.\nimport math\r\ndef surfacearea_sphere(r):\r\n  surfacearea=4*math.pi*r*r\r\n  return surfacearea", "metadata": {}}
{"_id": "86_code", "title": "centered_hexagonal_number", "text": "# Write a function to find nth centered hexagonal number.\ndef centered_hexagonal_number(n):\r\n  return 3 * n * (n - 1) + 1", "metadata": {}}
{"_id": "87_code", "title": "merge_dictionaries_three", "text": "# Write a function to merge three dictionaries into a single expression.\nimport collections as ct\r\ndef merge_dictionaries_three(dict1,dict2, dict3):\r\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\r\n    return merged_dict", "metadata": {}}
{"_id": "88_code", "title": "freq_count", "text": "# Write a function to get the frequency of the elements in a list.\nimport collections\r\ndef freq_count(list1):\r\n  freq_count= collections.Counter(list1)\r\n  return freq_count", "metadata": {}}
{"_id": "89_code", "title": "closest_num", "text": "# Write a function to find the closest smaller number than n.\ndef closest_num(N):\r\n  return (N - 1)", "metadata": {}}
{"_id": "90_code", "title": "len_log", "text": "# Write a python function to find the length of the longest word.\ndef len_log(list1):\r\n    max=len(list1[0])\r\n    for i in list1:\r\n        if len(i)>max:\r\n            max=len(i)\r\n    return max", "metadata": {}}
{"_id": "91_code", "title": "find_substring", "text": "# Write a function to check if a substring is present in a given list of string values.\ndef find_substring(str1, sub_str):\r\n   if any(sub_str in s for s in str1):\r\n       return True\r\n   return False", "metadata": {}}
{"_id": "92_code", "title": "is_undulating", "text": "# Write a function to check whether the given number is undulating or not.\ndef is_undulating(n): \r\n\tif (len(n) <= 2): \r\n\t\treturn False\r\n\tfor i in range(2, len(n)): \r\n\t\tif (n[i - 2] != n[i]): \r\n\t\t\treturn False\r\n\treturn True", "metadata": {}}
{"_id": "93_code", "title": "power", "text": "# Write a function to calculate the value of 'a' to the power 'b'.\ndef power(a,b):\r\n\tif b==0:\r\n\t\treturn 1\r\n\telif a==0:\r\n\t\treturn 0\r\n\telif b==1:\r\n\t\treturn a\r\n\telse:\r\n\t\treturn a*power(a,b-1)", "metadata": {}}
{"_id": "94_code", "title": "index_minimum", "text": "# Write a function to extract the index minimum value record from the given tuples.\nfrom operator import itemgetter \r\ndef index_minimum(test_list):\r\n  res = min(test_list, key = itemgetter(1))[0]\r\n  return (res) ", "metadata": {}}
{"_id": "95_code", "title": "Find_Min_Length", "text": "# Write a python function to find the minimum length of sublist.\ndef Find_Min_Length(lst):  \r\n    minLength = min(len(x) for x in lst )\r\n    return minLength ", "metadata": {}}
{"_id": "96_code", "title": "divisor", "text": "# Write a python function to find the number of divisors of a given integer.\ndef divisor(n):\r\n  for i in range(n):\r\n    x = len([i for i in range(1,n+1) if not n % i])\r\n  return x", "metadata": {}}
{"_id": "97_code", "title": "frequency_lists", "text": "# Write a function to find frequency count of list of lists.\ndef frequency_lists(list1):\r\n    list1 = [item for sublist in list1 for item in sublist]\r\n    dic_data = {}\r\n    for num in list1:\r\n        if num in dic_data.keys():\r\n            dic_data[num] += 1\r\n        else:\r\n            key = num\r\n            value = 1\r\n            dic_data[key] = value\r\n    return dic_data\r\n", "metadata": {}}
{"_id": "98_code", "title": "multiply_num", "text": "# Write a function to multiply all the numbers in a list and divide with the length of the list.\ndef multiply_num(numbers):  \r\n    total = 1\r\n    for x in numbers:\r\n        total *= x  \r\n    return total/len(numbers) ", "metadata": {}}
{"_id": "99_code", "title": "decimal_to_binary", "text": "# Write a function to convert the given decimal number to its binary equivalent.\ndef decimal_to_binary(n): \r\n    return bin(n).replace(\"0b\",\"\") ", "metadata": {}}
{"_id": "100_code", "title": "next_smallest_palindrome", "text": "# Write a function to find the next smallest palindrome of a specified number.\nimport sys\r\ndef next_smallest_palindrome(num):\r\n    numstr = str(num)\r\n    for i in range(num+1,sys.maxsize):\r\n        if str(i) == str(i)[::-1]:\r\n            return i", "metadata": {}}
{"_id": "101_code", "title": "kth_element", "text": "# Write a function to find the kth element in the given array.\ndef kth_element(arr, n, k):\r\n  for i in range(n):\r\n    for j in range(0, n-i-1):\r\n      if arr[j] > arr[j+1]:\r\n        arr[j], arr[j+1] == arr[j+1], arr[j]\r\n  return arr[k-1]", "metadata": {}}
{"_id": "102_code", "title": "snake_to_camel", "text": "# Write a function to convert snake case string to camel case string.\ndef snake_to_camel(word):\r\n        import re\r\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))", "metadata": {}}
{"_id": "103_code", "title": "eulerian_num", "text": "# Write a function to find eulerian number a(n, m).\ndef eulerian_num(n, m): \r\n\tif (m >= n or n == 0): \r\n\t\treturn 0 \r\n\tif (m == 0): \r\n\t\treturn 1 \r\n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))", "metadata": {}}
{"_id": "104_code", "title": "sort_sublists", "text": "# Write a function to sort each sublist of strings in a given list of lists using lambda function.\ndef sort_sublists(input_list):\r\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \r\n    return result\r", "metadata": {}}
{"_id": "105_code", "title": "count", "text": "# Write a python function to count true booleans in the given list.\ndef count(lst):   \r\n    return sum(lst) ", "metadata": {}}
{"_id": "106_code", "title": "add_lists", "text": "# Write a function to add the given list to the given tuples.\ndef add_lists(test_list, test_tup):\r\n  res = tuple(list(test_tup) + test_list)\r\n  return (res) ", "metadata": {}}
{"_id": "107_code", "title": "count_Hexadecimal", "text": "# Write a python function to count hexadecimal numbers for a given range.\ndef count_Hexadecimal(L,R) :  \r\n    count = 0;  \r\n    for i in range(L,R + 1) : \r\n        if (i >= 10 and i <= 15) : \r\n            count += 1;  \r\n        elif (i > 15) : \r\n            k = i;  \r\n            while (k != 0) :  \r\n                if (k % 16 >= 10) : \r\n                    count += 1;  \r\n                k = k // 16;  \r\n    return count;  ", "metadata": {}}
{"_id": "108_code", "title": "merge_sorted_list", "text": "# Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nimport heapq\r\ndef merge_sorted_list(num1,num2,num3):\r\n  num1=sorted(num1)\r\n  num2=sorted(num2)\r\n  num3=sorted(num3)\r\n  result = heapq.merge(num1,num2,num3)\r\n  return list(result)", "metadata": {}}
{"_id": "109_code", "title": "odd_Equivalent", "text": "# Write a python function to find the count of rotations of a binary string with odd value.\ndef odd_Equivalent(s,n): \r\n    count=0\r\n    for i in range(0,n): \r\n        if (s[i] == '1'): \r\n            count = count + 1\r\n    return count ", "metadata": {}}
{"_id": "110_code", "title": "extract_missing", "text": "# Write a function to extract the ranges that are missing from the given list with the given start range and end range values.\ndef extract_missing(test_list, strt_val, stop_val):\r\n  res = []\r\n  for sub in test_list:\r\n    if sub[0] > strt_val:\r\n      res.append((strt_val, sub[0]))\r\n      strt_val = sub[1]\r\n    if strt_val < stop_val:\r\n      res.append((strt_val, stop_val))\r\n  return (res) ", "metadata": {}}
{"_id": "111_code", "title": "common_in_nested_lists", "text": "# Write a function to find common elements in given nested lists. * list item * list item * list item * list item\ndef common_in_nested_lists(nestedlist):\r\n    result = list(set.intersection(*map(set, nestedlist)))\r\n    return result", "metadata": {}}
{"_id": "112_code", "title": "perimeter", "text": "# Write a python function to find the perimeter of a cylinder.\ndef perimeter(diameter,height) : \r\n    return 2*(diameter+height)  ", "metadata": {}}
{"_id": "113_code", "title": "check_integer", "text": "# Write a function to check if a string represents an integer or not.\ndef check_integer(text):\r\n text = text.strip()\r\n if len(text) < 1:\r\n    return None\r\n else:\r\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\r\n          return True\r\n     elif (text[0] in \"+-\") and \\\r\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\r\n         return True\r\n     else:\r\n        return False", "metadata": {}}
{"_id": "114_code", "title": "assign_freq", "text": "# Write a function to assign frequency to each tuple in the given tuple list.\nfrom collections import Counter \r\ndef assign_freq(test_list):\r\n  res = [(*key, val) for key, val in Counter(test_list).items()]\r\n  return (str(res)) ", "metadata": {}}
{"_id": "115_code", "title": "empty_dit", "text": "# Write a function to check whether all dictionaries in a list are empty or not.\ndef empty_dit(list1):\r\n empty_dit=all(not d for d in list1)\r\n return empty_dit", "metadata": {}}
{"_id": "116_code", "title": "tuple_to_int", "text": "# Write a function to convert a given tuple of positive integers into an integer.\ndef tuple_to_int(nums):\r\n    result = int(''.join(map(str,nums)))\r\n    return result", "metadata": {}}
{"_id": "117_code", "title": "list_to_float", "text": "# Write a function to convert all possible convertible elements in the list to float.\ndef list_to_float(test_list):\r\n  res = []\r\n  for tup in test_list:\r\n    temp = []\r\n    for ele in tup:\r\n      if ele.isalpha():\r\n        temp.append(ele)\r\n      else:\r\n        temp.append(float(ele))\r\n    res.append((temp[0],temp[1])) \r\n  return (str(res)) ", "metadata": {}}
{"_id": "118_code", "title": "string_to_list", "text": "# [link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\ndef string_to_list(string): \r\n    lst = list(string.split(\" \")) \r\n    return lst", "metadata": {}}
{"_id": "119_code", "title": "search", "text": "# Write a python function to find the element that appears only once in a sorted array.\ndef search(arr,n) :\r\n    XOR = 0\r\n    for i in range(n) :\r\n        XOR = XOR ^ arr[i]\r\n    return (XOR)", "metadata": {}}
{"_id": "120_code", "title": "max_product_tuple", "text": "# Write a function to find the maximum product from the pairs of tuples within a given list.\ndef max_product_tuple(list1):\r\n    result_max = max([abs(x * y) for x, y in list1] )\r\n    return result_max", "metadata": {}}
{"_id": "121_code", "title": "check_triplet", "text": "# Write a function to find the triplet with sum of the given array\ndef check_triplet(A, n, sum, count):\r\n    if count == 3 and sum == 0:\r\n        return True\r\n    if count == 3 or n == 0 or sum < 0:\r\n        return False\r\n    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or\\\r\n           check_triplet(A, n - 1, sum, count)", "metadata": {}}
{"_id": "122_code", "title": "smartNumber", "text": "# Write a function to find n’th smart number.\nMAX = 3000 \r\ndef smartNumber(n): \r\n\tprimes = [0] * MAX \r\n\tresult = [] \r\n\tfor i in range(2, MAX): \r\n\t\tif (primes[i] == 0): \r\n\t\t\tprimes[i] = 1 \r\n\t\t\tj = i * 2 \r\n\t\t\twhile (j < MAX): \r\n\t\t\t\tprimes[j] -= 1 \r\n\t\t\t\tif ( (primes[j] + 3) == 0): \r\n\t\t\t\t\tresult.append(j) \r\n\t\t\t\tj = j + i \r\n\tresult.sort() \r\n\treturn result[n - 1] ", "metadata": {}}
{"_id": "123_code", "title": "amicable_numbers_sum", "text": "# Write a function to sum all amicable numbers from 1 to a specified number.\ndef amicable_numbers_sum(limit):\r\n    if not isinstance(limit, int):\r\n        return \"Input is not an integer!\"\r\n    if limit < 1:\r\n        return \"Input must be bigger than 0!\"\r\n    amicables = set()\r\n    for num in range(2, limit+1):\r\n        if num in amicables:\r\n            continue\r\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\r\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\r\n        if num == sum_fact2 and num != sum_fact:\r\n            amicables.add(num)\r\n            amicables.add(sum_fact2)\r\n    return sum(amicables)", "metadata": {}}
{"_id": "124_code", "title": "angle_complex", "text": "# Write a function to get the angle of a complex number.\nimport cmath\r\ndef angle_complex(a,b):\r\n  cn=complex(a,b)\r\n  angle=cmath.phase(a+b)\r\n  return angle", "metadata": {}}
{"_id": "125_code", "title": "find_length", "text": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string, n): \r\n\tcurrent_sum = 0\r\n\tmax_sum = 0\r\n\tfor i in range(n): \r\n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \r\n\t\tif current_sum < 0: \r\n\t\t\tcurrent_sum = 0\r\n\t\tmax_sum = max(current_sum, max_sum) \r\n\treturn max_sum if max_sum else 0", "metadata": {}}
{"_id": "126_code", "title": "sum", "text": "# Write a python function to find the sum of common divisors of two given numbers.\ndef sum(a,b): \r\n    sum = 0\r\n    for i in range (1,min(a,b)): \r\n        if (a % i == 0 and b % i == 0): \r\n            sum += i \r\n    return sum", "metadata": {}}
{"_id": "127_code", "title": "multiply_int", "text": "# Write a function to multiply two integers without using the * operator in python.\ndef multiply_int(x, y):\r\n    if y < 0:\r\n        return -multiply_int(x, -y)\r\n    elif y == 0:\r\n        return 0\r\n    elif y == 1:\r\n        return x\r\n    else:\r\n        return x + multiply_int(x, y - 1)", "metadata": {}}
{"_id": "128_code", "title": "long_words", "text": "# Write a function to shortlist words that are longer than n from a given list of words.\ndef long_words(n, str):\r\n    word_len = []\r\n    txt = str.split(\" \")\r\n    for x in txt:\r\n        if len(x) > n:\r\n            word_len.append(x)\r\n    return word_len\t", "metadata": {}}
{"_id": "129_code", "title": "magic_square_test", "text": "# Write a function to calculate magic square.\ndef magic_square_test(my_matrix):\r\n    iSize = len(my_matrix[0])\r\n    sum_list = []\r\n    sum_list.extend([sum (lines) for lines in my_matrix])   \r\n    for col in range(iSize):\r\n        sum_list.append(sum(row[col] for row in my_matrix))\r\n    result1 = 0\r\n    for i in range(0,iSize):\r\n        result1 +=my_matrix[i][i]\r\n    sum_list.append(result1)      \r\n    result2 = 0\r\n    for i in range(iSize-1,-1,-1):\r\n        result2 +=my_matrix[i][i]\r\n    sum_list.append(result2)\r\n    if len(set(sum_list))>1:\r\n        return False\r\n    return True", "metadata": {}}
{"_id": "130_code", "title": "max_occurrences", "text": "# Write a function to find the item with maximum frequency in a given list.\nfrom collections import defaultdict\r\ndef max_occurrences(nums):\r\n    dict = defaultdict(int)\r\n    for i in nums:\r\n        dict[i] += 1\r\n    result = max(dict.items(), key=lambda x: x[1]) \r\n    return result", "metadata": {}}
{"_id": "131_code", "title": "reverse_vowels", "text": "# Write a python function to reverse only the vowels of a given string.\ndef reverse_vowels(str1):\r\n\tvowels = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tvowels += char\r\n\tresult_string = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tresult_string += vowels[-1]\r\n\t\t\tvowels = vowels[:-1]\r\n\t\telse:\r\n\t\t\tresult_string += char\r\n\treturn result_string", "metadata": {}}
{"_id": "132_code", "title": "tup_string", "text": "# Write a function to convert tuple to a string.\ndef tup_string(tup1):\r\n  str =  ''.join(tup1)\r\n  return str", "metadata": {}}
{"_id": "133_code", "title": "sum_negativenum", "text": "# Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\ndef sum_negativenum(nums):\r\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\r\n  return sum(sum_negativenum)", "metadata": {}}
{"_id": "134_code", "title": "check_last ", "text": "# Write a python function to check whether the last element of given array is even or odd after performing an operation p times.\ndef check_last (arr,n,p): \r\n    _sum = 0\r\n    for i in range(n): \r\n        _sum = _sum + arr[i] \r\n    if p == 1: \r\n        if _sum % 2 == 0: \r\n            return \"ODD\"\r\n        else: \r\n            return \"EVEN\"\r\n    return \"EVEN\"\r\n      ", "metadata": {}}
{"_id": "135_code", "title": "hexagonal_num", "text": "# Write a function to find the nth hexagonal number.\ndef hexagonal_num(n): \r\n\treturn n*(2*n - 1) ", "metadata": {}}
{"_id": "136_code", "title": "cal_electbill", "text": "# Write a function to calculate electricity bill.\ndef cal_electbill(units):\r\n if(units < 50):\r\n    amount = units * 2.60\r\n    surcharge = 25\r\n elif(units <= 100):\r\n    amount = 130 + ((units - 50) * 3.25)\r\n    surcharge = 35\r\n elif(units <= 200):\r\n    amount = 130 + 162.50 + ((units - 100) * 5.26)\r\n    surcharge = 45\r\n else:\r\n    amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)\r\n    surcharge = 75\r\n total = amount + surcharge\r\n return total", "metadata": {}}
{"_id": "137_code", "title": "zero_count", "text": "# Write a function to find the ration of zeroes in an array of integers.\nfrom array import array\r\ndef zero_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x == 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)", "metadata": {}}
{"_id": "138_code", "title": "is_Sum_Of_Powers_Of_Two", "text": "# Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\ndef is_Sum_Of_Powers_Of_Two(n): \r\n    if (n % 2 == 1): \r\n        return False\r\n    else: \r\n        return True", "metadata": {}}
{"_id": "139_code", "title": "circle_circumference", "text": "# Write a function to find the circumference of a circle.\ndef circle_circumference(r):\r\n  perimeter=2*3.1415*r\r\n  return perimeter", "metadata": {}}
{"_id": "140_code", "title": "extract_singly", "text": "# Write a function to extract elements that occur singly in the given tuple list.\ndef extract_singly(test_list):\r\n  res = []\r\n  temp = set()\r\n  for inner in test_list:\r\n    for ele in inner:\r\n      if not ele in temp:\r\n        temp.add(ele)\r\n        res.append(ele)\r\n  return (res) ", "metadata": {}}
{"_id": "141_code", "title": "pancake_sort", "text": "# Write a function to sort a list of elements using pancake sort.\ndef pancake_sort(nums):\r\n    arr_len = len(nums)\r\n    while arr_len > 1:\r\n        mi = nums.index(max(nums[0:arr_len]))\r\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\r\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\r\n        arr_len -= 1\r\n    return nums", "metadata": {}}
{"_id": "142_code", "title": "count_samepair", "text": "# Write a function to count the same pair in three given lists.\ndef count_samepair(list1,list2,list3):\r\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\r\n    return result", "metadata": {}}
{"_id": "143_code", "title": "find_lists", "text": "# Write a function to find number of lists present in the given tuple.\ndef find_lists(Input): \r\n\tif isinstance(Input, list): \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn len(Input) ", "metadata": {}}
{"_id": "144_code", "title": "sum_Pairs", "text": "# Write a python function to find the sum of absolute differences in all pairs of the given array.\ndef sum_Pairs(arr,n): \r\n    sum = 0\r\n    for i in range(n - 1,-1,-1): \r\n        sum += i*arr[i] - (n-1-i) * arr[i] \r\n    return sum", "metadata": {}}
{"_id": "145_code", "title": "max_Abs_Diff", "text": "# Write a python function to find the maximum difference between any two elements in a given array.\ndef max_Abs_Diff(arr,n): \r\n    minEle = arr[0] \r\n    maxEle = arr[0] \r\n    for i in range(1, n): \r\n        minEle = min(minEle,arr[i]) \r\n        maxEle = max(maxEle,arr[i]) \r\n    return (maxEle - minEle) ", "metadata": {}}
{"_id": "146_code", "title": "ascii_value_string", "text": "# Write a function to find the ascii value of total characters in a string.\ndef ascii_value_string(str1):\r\n  for i in range(len(str1)):\r\n   return ord(str1[i])", "metadata": {}}
{"_id": "147_code", "title": "max_path_sum", "text": "# Write a function to find the maximum total path sum in the given triangle.\ndef max_path_sum(tri, m, n): \r\n\tfor i in range(m-1, -1, -1): \r\n\t\tfor j in range(i+1): \r\n\t\t\tif (tri[i+1][j] > tri[i+1][j+1]): \r\n\t\t\t\ttri[i][j] += tri[i+1][j] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] += tri[i+1][j+1] \r\n\treturn tri[0][0]", "metadata": {}}
{"_id": "148_code", "title": "sum_digits_single", "text": "# Write a function to divide a number into two parts such that the sum of digits is maximum.\ndef sum_digits_single(x) : \r\n    ans = 0\r\n    while x : \r\n        ans += x % 10\r\n        x //= 10  \r\n    return ans \r\ndef closest(x) : \r\n    ans = 0\r\n    while (ans * 10 + 9 <= x) : \r\n        ans = ans * 10 + 9  \r\n    return ans   \r\ndef sum_digits_twoparts(N) : \r\n    A = closest(N)  \r\n    return sum_digits_single(A) + sum_digits_single(N - A) ", "metadata": {}}
{"_id": "149_code", "title": "longest_subseq_with_diff_one", "text": "# Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.\ndef longest_subseq_with_diff_one(arr, n): \r\n\tdp = [1 for i in range(n)] \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif ((arr[i] == arr[j]+1) or (arr[i] == arr[j]-1)): \r\n\t\t\t\tdp[i] = max(dp[i], dp[j]+1) \r\n\tresult = 1\r\n\tfor i in range(n): \r\n\t\tif (result < dp[i]): \r\n\t\t\tresult = dp[i] \r\n\treturn result", "metadata": {}}
{"_id": "150_code", "title": "does_Contain_B", "text": "# Write a python function to find whether the given number is present in the infinite sequence or not.\ndef does_Contain_B(a,b,c): \r\n    if (a == b): \r\n        return True\r\n    if ((b - a) * c > 0 and (b - a) % c == 0): \r\n        return True\r\n    return False", "metadata": {}}
{"_id": "151_code", "title": "gcd", "text": "# Write a python function to check whether the given number is co-prime or not.\ndef gcd(p,q):\r\n    while q != 0:\r\n        p, q = q,p%q\r\n    return p\r\ndef is_coprime(x,y):\r\n    return gcd(x,y) == 1", "metadata": {}}
{"_id": "152_code", "title": "merge", "text": "# Write a function to sort the given array by using merge sort.\ndef merge(a,b):\r\n    c = []\r\n    while len(a) != 0 and len(b) != 0:\r\n        if a[0] < b[0]:\r\n            c.append(a[0])\r\n            a.remove(a[0])\r\n        else:\r\n            c.append(b[0])\r\n            b.remove(b[0])\r\n    if len(a) == 0:\r\n        c += b\r\n    else:\r\n        c += a\r\n    return c\r\ndef merge_sort(x):\r\n    if len(x) == 0 or len(x) == 1:\r\n        return x\r\n    else:\r\n        middle = len(x)//2\r\n        a = merge_sort(x[:middle])\r\n        b = merge_sort(x[middle:])\r\n        return merge(a,b)\r\n", "metadata": {}}
{"_id": "153_code", "title": "parabola_vertex", "text": "# Write a function to find the vertex of a parabola.\ndef parabola_vertex(a, b, c): \r\n  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))\r\n  return vertex", "metadata": {}}
{"_id": "154_code", "title": "specified_element", "text": "# Write a function to extract every specified element from a given two dimensional list.\ndef specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result", "metadata": {}}
{"_id": "155_code", "title": "even_bit_toggle_number", "text": "# Write a python function to toggle all even bits of a given number.\ndef even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n \r\n    while (temp > 0) :     \r\n        if (count % 2 == 1) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res ", "metadata": {}}
{"_id": "156_code", "title": "tuple_int_str", "text": "# Write a function to convert a tuple of string values to a tuple of integer values.\ndef tuple_int_str(tuple_str):\r\n    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)\r\n    return result", "metadata": {}}
{"_id": "157_code", "title": "encode_list", "text": "# Write a function to reflect the run-length encoding from a list.\nfrom itertools import groupby\r\ndef encode_list(list1):\r\n    return [[len(list(group)), key] for key, group in groupby(list1)]", "metadata": {}}
{"_id": "158_code", "title": "min_Ops", "text": "# Write a python function to find k number of operations required to make all elements equal.\ndef min_Ops(arr,n,k): \r\n    max1 = max(arr) \r\n    res = 0\r\n    for i in range(0,n):  \r\n        if ((max1 - arr[i]) % k != 0): \r\n            return -1 \r\n        else: \r\n            res += (max1 - arr[i]) / k \r\n    return int(res) ", "metadata": {}}
{"_id": "159_code", "title": "month_season", "text": "# Write a function to print the season for the given month and day.\ndef month_season(month,days):\r\n if month in ('January', 'February', 'March'):\r\n\t season = 'winter'\r\n elif month in ('April', 'May', 'June'):\r\n\t season = 'spring'\r\n elif month in ('July', 'August', 'September'):\r\n\t season = 'summer'\r\n else:\r\n\t season = 'autumn'\r\n if (month == 'March') and (days > 19):\r\n\t season = 'spring'\r\n elif (month == 'June') and (days > 20):\r\n\t season = 'summer'\r\n elif (month == 'September') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'October') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'November') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'December') and (days > 20):\r\n\t season = 'winter'\r\n return season", "metadata": {}}
{"_id": "160_code", "title": "solution ", "text": "# Write a function to find x and y that satisfies ax + by = n.\ndef solution (a, b, n): \r\n\ti = 0\r\n\twhile i * a <= n: \r\n\t\tif (n - (i * a)) % b == 0: \r\n\t\t\treturn (\"x = \",i ,\", y = \", \r\n\t\t\tint((n - (i * a)) / b)) \r\n\t\t\treturn 0\r\n\t\ti = i + 1\r\n\treturn (\"No solution\") ", "metadata": {}}
{"_id": "161_code", "title": "remove_elements", "text": "# Write a function to remove all elements from a given list present in another list.\ndef remove_elements(list1, list2):\r\n    result = [x for x in list1 if x not in list2]\r\n    return result", "metadata": {}}
{"_id": "162_code", "title": "sum_series", "text": "# Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\ndef sum_series(n):\r\n  if n < 1:\r\n    return 0\r\n  else:\r\n    return n + sum_series(n - 2)", "metadata": {}}
{"_id": "163_code", "title": "area_polygon", "text": "# Write a function to calculate the area of a regular polygon.\nfrom math import tan, pi\r\ndef area_polygon(s,l):\r\n  area = s * (l ** 2) / (4 * tan(pi / s))\r\n  return area", "metadata": {}}
{"_id": "164_code", "title": "divSum", "text": "# Write a python function to check whether the sum of divisors are same or not.\nimport math \r\ndef divSum(n): \r\n    sum = 1; \r\n    i = 2; \r\n    while(i * i <= n): \r\n        if (n % i == 0): \r\n            sum = (sum + i +math.floor(n / i)); \r\n        i += 1; \r\n    return sum; \r\ndef areEquivalent(num1,num2): \r\n    return divSum(num1) == divSum(num2); ", "metadata": {}}
{"_id": "165_code", "title": "count_char_position", "text": "# Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\ndef count_char_position(str1): \r\n    count_chars = 0\r\n    for i in range(len(str1)):\r\n        if ((i == ord(str1[i]) - ord('A')) or \r\n            (i == ord(str1[i]) - ord('a'))): \r\n            count_chars += 1\r\n    return count_chars ", "metadata": {}}
{"_id": "166_code", "title": "find_even_Pair", "text": "# Write a python function to count the pairs with xor as an even number.\ndef find_even_Pair(A,N): \r\n    evenPair = 0\r\n    for i in range(0,N): \r\n        for j in range(i+1,N): \r\n            if ((A[i] ^ A[j]) % 2 == 0): \r\n                evenPair+=1\r\n    return evenPair; ", "metadata": {}}
{"_id": "167_code", "title": "next_Power_Of_2", "text": "# Write a python function to find smallest power of 2 greater than or equal to n.\ndef next_Power_Of_2(n): \r\n    count = 0; \r\n    if (n and not(n & (n - 1))): \r\n        return n   \r\n    while( n != 0): \r\n        n >>= 1\r\n        count += 1\r\n    return 1 << count; ", "metadata": {}}
{"_id": "168_code", "title": "frequency", "text": "# Write a python function to find the frequency of a number in a given array.\ndef frequency(a,x): \r\n    count = 0  \r\n    for i in a: \r\n        if i == x: count += 1\r\n    return count ", "metadata": {}}
{"_id": "169_code", "title": "get_pell", "text": "# Write a function to calculate the nth pell number.\ndef get_pell(n): \r\n\tif (n <= 2): \r\n\t\treturn n \r\n\ta = 1\r\n\tb = 2\r\n\tfor i in range(3, n+1): \r\n\t\tc = 2 * b + a \r\n\t\ta = b \r\n\t\tb = c \r\n\treturn b ", "metadata": {}}
{"_id": "170_code", "title": "sum_range_list", "text": "# Write a function to find sum of the numbers in a list between the indices of a specified range.\ndef sum_range_list(list1, m, n):                                                                                                                                                                                                \r\n    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += list1[i]                                                                                                                                                                                                  \r\n    return sum_range   ", "metadata": {}}
{"_id": "171_code", "title": "perimeter_pentagon", "text": "# Write a function to find the perimeter of a pentagon.\nimport math\r\ndef perimeter_pentagon(a):\r\n  perimeter=(5*a)\r\n  return perimeter", "metadata": {}}
{"_id": "172_code", "title": "count_occurance", "text": "# Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\ndef count_occurance(s):\r\n  count=0\r\n  for i in range(len(s)):\r\n    if (s[i]== 's' and s[i+1]=='t' and s[i+2]== 'd'):\r\n      count = count + 1\r\n  return count", "metadata": {}}
{"_id": "173_code", "title": "remove_splchar", "text": "# Write a function to remove everything except alphanumeric characters from a string.\nimport re\r\ndef remove_splchar(text): \r\n pattern = re.compile('[\\W_]+')\r\n return (pattern.sub('', text))", "metadata": {}}
{"_id": "174_code", "title": "group_keyvalue", "text": "# Write a function to group a sequence of key-value pairs into a dictionary of lists.\ndef group_keyvalue(l):\r\n    result = {}\r\n    for k, v in l:\r\n         result.setdefault(k, []).append(v)\r\n    return result", "metadata": {}}
{"_id": "175_code", "title": "is_valid_parenthese", "text": "# Write a function to verify validity of a string of parentheses.\ndef is_valid_parenthese( str1):\r\n        stack, pchar = [], {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\r\n        for parenthese in str1:\r\n            if parenthese in pchar:\r\n                stack.append(parenthese)\r\n            elif len(stack) == 0 or pchar[stack.pop()] != parenthese:\r\n                return False\r\n        return len(stack) == 0", "metadata": {}}
{"_id": "176_code", "title": "perimeter_triangle", "text": "# Write a function to find the perimeter of a triangle.\ndef perimeter_triangle(a,b,c):\r\n  perimeter=a+b+c\r\n  return perimeter", "metadata": {}}
{"_id": "177_code", "title": "answer", "text": "# Write a python function to find two distinct numbers such that their lcm lies within the given range.\ndef answer(L,R): \r\n    if (2 * L <= R): \r\n        return (L ,2*L)\r\n    else: \r\n        return (-1) ", "metadata": {}}
{"_id": "178_code", "title": "string_literals", "text": "# Write a function to search some literals strings in a string.\nimport re\r\ndef string_literals(patterns,text):\r\n  for pattern in patterns:\r\n     if re.search(pattern,  text):\r\n       return ('Matched!')\r\n     else:\r\n       return ('Not Matched!')", "metadata": {}}
{"_id": "179_code", "title": "is_num_keith", "text": "# Write a function to find if the given number is a keith number or not.\ndef is_num_keith(x): \r\n\tterms = [] \r\n\ttemp = x \r\n\tn = 0 \r\n\twhile (temp > 0): \r\n\t\tterms.append(temp % 10) \r\n\t\ttemp = int(temp / 10) \r\n\t\tn+=1 \r\n\tterms.reverse() \r\n\tnext_term = 0 \r\n\ti = n \r\n\twhile (next_term < x): \r\n\t\tnext_term = 0 \r\n\t\tfor j in range(1,n+1): \r\n\t\t\tnext_term += terms[i - j] \r\n\t\tterms.append(next_term) \r\n\t\ti+=1 \r\n\treturn (next_term == x) ", "metadata": {}}
{"_id": "180_code", "title": "distance_lat_long", "text": "# Write a function to calculate distance between two points using latitude and longitude.\nfrom math import radians, sin, cos, acos\r\ndef distance_lat_long(slat,slon,elat,elon):\r\n dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))\r\n return dist", "metadata": {}}
{"_id": "181_code", "title": "common_prefix_util", "text": "# Write a function to find the longest common prefix in the given set of strings.\ndef common_prefix_util(str1, str2): \r\n\tresult = \"\"; \r\n\tn1 = len(str1) \r\n\tn2 = len(str2) \r\n\ti = 0\r\n\tj = 0\r\n\twhile i <= n1 - 1 and j <= n2 - 1: \r\n\t\tif (str1[i] != str2[j]): \r\n\t\t\tbreak\r\n\t\tresult += str1[i] \r\n\t\ti += 1\r\n\t\tj += 1\r\n\treturn (result) \r\ndef common_prefix (arr, n): \r\n\tprefix = arr[0] \r\n\tfor i in range (1, n): \r\n\t\tprefix = common_prefix_util(prefix, arr[i]) \r\n\treturn (prefix) ", "metadata": {}}
{"_id": "182_code", "title": "find_character", "text": "# Write a function to find uppercase, lowercase, special character and numeric values using regex.\nimport re\r\ndef find_character(string):\r\n  uppercase_characters = re.findall(r\"[A-Z]\", string) \r\n  lowercase_characters = re.findall(r\"[a-z]\", string) \r\n  numerical_characters = re.findall(r\"[0-9]\", string) \r\n  special_characters = re.findall(r\"[, .!?]\", string) \r\n  return uppercase_characters, lowercase_characters, numerical_characters, special_characters", "metadata": {}}
{"_id": "183_code", "title": "count_pairs", "text": "# Write a function to count all the distinct pairs having a difference of k in any array.\ndef count_pairs(arr, n, k):\r\n  count=0;\r\n  for i in range(0,n):\r\n    for j in range(i+1, n):\r\n      if arr[i] - arr[j] == k or arr[j] - arr[i] == k:\r\n        count += 1\r\n  return count", "metadata": {}}
{"_id": "184_code", "title": "greater_specificnum", "text": "# Write a function to find all the values in a list that are greater than a specified number.\ndef greater_specificnum(list,num):\r\n greater_specificnum=all(x >= num for x in list)\r\n return greater_specificnum", "metadata": {}}
{"_id": "185_code", "title": "parabola_focus", "text": "# Write a function to find the focus of a parabola.\ndef parabola_focus(a, b, c): \r\n  focus= (((-b / (2 * a)),(((4 * a * c) - (b * b) + 1) / (4 * a))))\r\n  return focus", "metadata": {}}
{"_id": "186_code", "title": "check_literals", "text": "# Write a function to search some literals strings in a string by using regex.\nimport re\r\ndef check_literals(text, patterns):\r\n  for pattern in patterns:\r\n    if re.search(pattern,  text):\r\n        return ('Matched!')\r\n    else:\r\n        return ('Not Matched!')", "metadata": {}}
{"_id": "187_code", "title": "longest_common_subsequence", "text": "# Write a function to find the longest common subsequence for the given two sequences.\ndef longest_common_subsequence(X, Y, m, n): \r\n    if m == 0 or n == 0: \r\n       return 0 \r\n    elif X[m-1] == Y[n-1]: \r\n       return 1 + longest_common_subsequence(X, Y, m-1, n-1) \r\n    else: \r\n       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))", "metadata": {}}
{"_id": "188_code", "title": "prod_Square", "text": "# Write a python function to check whether the given number can be represented by product of two squares or not.\ndef prod_Square(n):\r\n    for i in range(2,(n) + 1):\r\n        if (i*i < (n+1)):\r\n            for j in range(2,n + 1):\r\n                if ((i*i*j*j) == n):\r\n                    return True;\r\n    return False;", "metadata": {}}
{"_id": "189_code", "title": "first_Missing_Positive", "text": "# Write a python function to find the first missing positive number.\ndef first_Missing_Positive(arr,n): \r\n    ptr = 0\r\n    for i in range(n):\r\n        if arr[i] == 1:\r\n            ptr = 1\r\n            break\r\n    if ptr == 0:\r\n        return(1)\r\n    for i in range(n):\r\n        if arr[i] <= 0 or arr[i] > n:\r\n            arr[i] = 1\r\n    for i in range(n):\r\n        arr[(arr[i] - 1) % n] += n\r\n    for i in range(n):\r\n        if arr[i] <= n:\r\n            return(i + 1)\r\n    return(n + 1)", "metadata": {}}
{"_id": "190_code", "title": "count_Intgral_Points", "text": "# Write a python function to count the number of integral co-ordinates that lie inside a square.\ndef count_Intgral_Points(x1,y1,x2,y2): \r\n    return ((y2 - y1 - 1) * (x2 - x1 - 1)) ", "metadata": {}}
{"_id": "191_code", "title": "check_monthnumber", "text": "# Write a function to check whether the given month name contains 30 days or not.\ndef check_monthnumber(monthname3):\r\n  if monthname3 ==\"April\" or monthname3== \"June\" or monthname3== \"September\" or monthname3== \"November\":\r\n    return True\r\n  else:\r\n    return False", "metadata": {}}
{"_id": "192_code", "title": "check_String", "text": "# Write a python function to check whether a string has atleast one letter and one number.\ndef check_String(str): \r\n    flag_l = False\r\n    flag_n = False\r\n    for i in str: \r\n        if i.isalpha(): \r\n            flag_l = True  \r\n        if i.isdigit(): \r\n            flag_n = True\r\n    return flag_l and flag_n ", "metadata": {}}
{"_id": "193_code", "title": "remove_tuple", "text": "# Write a function to remove the duplicates from the given tuple.\ndef remove_tuple(test_tup):\r\n  res = tuple(set(test_tup))\r\n  return (res) ", "metadata": {}}
{"_id": "194_code", "title": "octal_To_Decimal", "text": "# Write a python function to convert octal number to decimal number.\ndef octal_To_Decimal(n):  \r\n    num = n; \r\n    dec_value = 0; \r\n    base = 1; \r\n    temp = num; \r\n    while (temp): \r\n        last_digit = temp % 10; \r\n        temp = int(temp / 10); \r\n        dec_value += last_digit*base; \r\n        base = base * 8; \r\n    return dec_value; ", "metadata": {}}
{"_id": "195_code", "title": "first", "text": "# Write a python function to find the first position of an element in a sorted array.\ndef first(arr,x,n): \r\n    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            high = mid - 1\r\n    return res", "metadata": {}}
{"_id": "196_code", "title": "remove_tuples", "text": "# Write a function to remove all the tuples with length k.\ndef remove_tuples(test_list, K):\r\n  res = [ele for ele in test_list if len(ele) != K]\r\n  return (res) ", "metadata": {}}
{"_id": "197_code", "title": "find_exponentio", "text": "# Write a function to perform the exponentiation of the given two tuples.\ndef find_exponentio(test_tup1, test_tup2):\r\n  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res)\r\n", "metadata": {}}
{"_id": "198_code", "title": "largest_triangle", "text": "# Write a function to find the largest triangle that can be inscribed in an ellipse.\nimport math\r\ndef largest_triangle(a,b): \r\n    if (a < 0 or b < 0): \r\n        return -1 \r\n    area = (3 * math.sqrt(3) * pow(a, 2)) / (4 * b);  \r\n    return area ", "metadata": {}}
{"_id": "199_code", "title": "highest_Power_of_2", "text": "# Write a python function to find highest power of 2 less than or equal to given number.\ndef highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1):  \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break;      \r\n    return res; ", "metadata": {}}
{"_id": "200_code", "title": "position_max", "text": "# Write a function to find all index positions of the maximum values in a given list.\ndef position_max(list1):\r\n    max_val = max(list1)\r\n    max_result = [i for i, j in enumerate(list1) if j == max_val]\r\n    return max_result", "metadata": {}}
{"_id": "201_code", "title": "chkList", "text": "# Write a python function to check whether the elements in a list are same or not.\ndef chkList(lst): \r\n    return len(set(lst)) == 1", "metadata": {}}
{"_id": "202_code", "title": "remove_even", "text": "# Write a function to remove even characters in a string.\ndef remove_even(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 != 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2", "metadata": {}}
{"_id": "203_code", "title": "hamming_Distance", "text": "# Write a python function to find the hamming distance between given two integers.\ndef hamming_Distance(n1,n2) : \r\n    x = n1 ^ n2  \r\n    setBits = 0\r\n    while (x > 0) : \r\n        setBits += x & 1\r\n        x >>= 1\r\n    return setBits  ", "metadata": {}}
{"_id": "204_code", "title": "count", "text": "# Write a python function to count the occurrence of a given character in a string.\ndef count(s,c) : \r\n    res = 0 \r\n    for i in range(len(s)) : \r\n        if (s[i] == c): \r\n            res = res + 1\r\n    return res ", "metadata": {}}
{"_id": "205_code", "title": "inversion_elements", "text": "# Write a function to find the inversions of tuple elements in the given tuple list.\ndef inversion_elements(test_tup):\r\n  res = tuple(list(map(lambda x: ~x, list(test_tup))))\r\n  return (res) ", "metadata": {}}
{"_id": "206_code", "title": "concatenate_elements", "text": "# Write a function to perform the adjacent element concatenation in the given tuples.\ndef concatenate_elements(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) ", "metadata": {}}
{"_id": "207_code", "title": "find_longest_repeating_subseq", "text": "# Write a function to count the longest repeating subsequences such that the two subsequences don’t have same string characters at same positions.\ndef find_longest_repeating_subseq(str): \r\n\tn = len(str) \r\n\tdp = [[0 for k in range(n+1)] for l in range(n+1)] \r\n\tfor i in range(1, n+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\tif (str[i-1] == str[j-1] and i != j): \r\n\t\t\t\tdp[i][j] = 1 + dp[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\tdp[i][j] = max(dp[i][j-1], dp[i-1][j]) \r\n\treturn dp[n][n]", "metadata": {}}
{"_id": "208_code", "title": "is_decimal", "text": "# Write a function to check the given decimal with a precision of 2 by using regex.\nimport re\r\ndef is_decimal(num):\r\n  num_fetch = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n  result = num_fetch.search(num)\r\n  return bool(result)", "metadata": {}}
{"_id": "209_code", "title": "heap_replace", "text": "# Write a function to delete the smallest element from the given heap and then insert a new item.\nimport heapq as hq\r\ndef heap_replace(heap,a):\r\n  hq.heapify(heap)\r\n  hq.heapreplace(heap, a)\r\n  return heap", "metadata": {}}
{"_id": "210_code", "title": "is_allowed_specific_char", "text": "# Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nimport re\r\ndef is_allowed_specific_char(string):\r\n    get_char = re.compile(r'[^a-zA-Z0-9.]')\r\n    string = get_char.search(string)\r\n    return not bool(string)", "metadata": {}}
{"_id": "211_code", "title": "count_Num", "text": "# Write a python function to count numbers whose oth and nth bits are set.\ndef count_Num(n): \r\n    if (n == 1): \r\n        return 1\r\n    count = pow(2,n - 2) \r\n    return count ", "metadata": {}}
{"_id": "212_code", "title": "fourth_Power_Sum", "text": "# Write a python function to find the sum of fourth power of n natural numbers.\nimport math  \r\ndef fourth_Power_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n+1) : \r\n        sum = sum + (i*i*i*i) \r\n    return sum", "metadata": {}}
{"_id": "213_code", "title": "concatenate_strings", "text": "# Write a function to perform the concatenation of two string tuples.\ndef concatenate_strings(test_tup1, test_tup2):\r\n  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ", "metadata": {}}
{"_id": "214_code", "title": "degree_radian", "text": "# Write a function to convert radians to degrees.\nimport math\r\ndef degree_radian(radian):\r\n degree = radian*(180/math.pi)\r\n return degree", "metadata": {}}
{"_id": "215_code", "title": "decode_list", "text": "# Write a function to decode a run-length encoded given list.\ndef decode_list(alist):\r\n    def aux(g):\r\n        if isinstance(g, list):\r\n            return [(g[1], range(g[0]))]\r\n        else:\r\n            return [(g, [0])]\r\n    return [x for g in alist for x, R in aux(g) for i in R]", "metadata": {}}
{"_id": "216_code", "title": "check_subset_list", "text": "# Write a function to check if a nested list is a subset of another nested list.\ndef check_subset_list(list1, list2): \r\n    l1, l2 = list1[0], list2[0] \r\n    exist = True\r\n    for i in list2: \r\n        if i not in list1: \r\n            exist = False\r\n    return exist ", "metadata": {}}
{"_id": "217_code", "title": "first_Repeated_Char", "text": "# Write a python function to find the first repeated character in a given string.\ndef first_Repeated_Char(str): \r\n    h = {}\r\n    for ch in str:\r\n        if ch in h: \r\n            return ch;\r\n        else: \r\n            h[ch] = 0\r\n    return '\\0'", "metadata": {}}
{"_id": "218_code", "title": "min_Operations", "text": "# Write a python function to find the minimum operations required to make two numbers equal.\nimport math   \r\ndef min_Operations(A,B):  \r\n    if (A > B): \r\n        swap(A,B)  \r\n    B = B // math.gcd(A,B);  \r\n    return B - 1", "metadata": {}}
{"_id": "219_code", "title": "extract_min_max", "text": "# Write a function to extract maximum and minimum k elements in the given tuple.\n\r\ndef extract_min_max(test_tup, K):\r\n  res = []\r\n  test_tup = list(test_tup)\r\n  temp = sorted(test_tup)\r\n  for idx, val in enumerate(temp):\r\n    if idx < K or idx >= len(temp) - K:\r\n      res.append(val)\r\n  res = tuple(res)\r\n  return (res) ", "metadata": {}}
{"_id": "220_code", "title": "replace_max_specialchar", "text": "# Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nimport re\r\ndef replace_max_specialchar(text,n):\r\n return (re.sub(\"[ ,.]\", \":\", text, n))", "metadata": {}}
{"_id": "221_code", "title": "first_even", "text": "# Write a python function to find the first even number in a given list of numbers.\ndef first_even(nums):\r\n    first_even = next((el for el in nums if el%2==0),-1)\r\n    return first_even", "metadata": {}}
{"_id": "222_code", "title": "check_type", "text": "# Write a function to check if all the elements in tuple have same data type or not.\ndef check_type(test_tuple):\r\n  res = True\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, type(test_tuple[0])):\r\n      res = False\r\n      break\r\n  return (res) ", "metadata": {}}
{"_id": "223_code", "title": "is_majority", "text": "# Write a function to check for majority element in the given sorted array.\ndef is_majority(arr, n, x):\r\n\ti = binary_search(arr, 0, n-1, x)\r\n\tif i == -1:\r\n\t\treturn False\r\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False\r\ndef binary_search(arr, low, high, x):\r\n\tif high >= low:\r\n\t\tmid = (low + high)//2 \r\n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\r\n\t\t\treturn mid\r\n\t\telif x > arr[mid]:\r\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\r\n\t\telse:\r\n\t\t\treturn binary_search(arr, low, (mid -1), x)\r\n\treturn -1", "metadata": {}}
{"_id": "224_code", "title": "count_Set_Bits", "text": "# Write a python function to count set bits of a given number.\ndef count_Set_Bits(n): \r\n    count = 0\r\n    while (n): \r\n        count += n & 1\r\n        n >>= 1\r\n    return count ", "metadata": {}}
{"_id": "225_code", "title": "find_Min", "text": "# Write a python function to find the minimum element in a sorted and rotated array.\ndef find_Min(arr,low,high): \r\n    while (low < high): \r\n        mid = low + (high - low) // 2;   \r\n        if (arr[mid] == arr[high]): \r\n            high -= 1; \r\n        elif (arr[mid] > arr[high]): \r\n            low = mid + 1; \r\n        else: \r\n            high = mid; \r\n    return arr[high]; ", "metadata": {}}
{"_id": "226_code", "title": "odd_values_string", "text": "# Write a python function to remove the characters which have odd index values of a given string.\ndef odd_values_string(str):\r\n  result = \"\" \r\n  for i in range(len(str)):\r\n    if i % 2 == 0:\r\n      result = result + str[i]\r\n  return result", "metadata": {}}
{"_id": "227_code", "title": "min_of_three", "text": "# Write a function to find minimum of three numbers.\ndef min_of_three(a,b,c): \r\n      if (a <= b) and (a <= c): \r\n        smallest = a \r\n      elif (b <= a) and (b <= c): \r\n        smallest = b \r\n      else: \r\n        smallest = c \r\n      return smallest ", "metadata": {}}
{"_id": "228_code", "title": "all_Bits_Set_In_The_Given_Range", "text": "# Write a python function to check whether all the bits are unset in the given range or not.\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \r\n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \r\n    new_num = n & num\r\n    if (new_num == 0): \r\n        return True\r\n    return False", "metadata": {}}
{"_id": "229_code", "title": "re_arrange_array", "text": "# Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\ndef re_arrange_array(arr, n):\r\n  j=0\r\n  for i in range(0, n):\r\n    if (arr[i] < 0):\r\n      temp = arr[i]\r\n      arr[i] = arr[j]\r\n      arr[j] = temp\r\n      j = j + 1\r\n  return arr", "metadata": {}}
{"_id": "230_code", "title": "replace_blank", "text": "# Write a function to replace blank spaces with any character in a string.\ndef replace_blank(str1,char):\r\n str2 = str1.replace(' ', char)\r\n return str2", "metadata": {}}
{"_id": "231_code", "title": "max_sum", "text": "# Write a function to find the maximum sum in the given right triangle of numbers.\ndef max_sum(tri, n): \r\n\tif n > 1: \r\n\t\ttri[1][1] = tri[1][1]+tri[0][0] \r\n\t\ttri[1][0] = tri[1][0]+tri[0][0] \r\n\tfor i in range(2, n): \r\n\t\ttri[i][0] = tri[i][0] + tri[i-1][0] \r\n\t\ttri[i][i] = tri[i][i] + tri[i-1][i-1] \r\n\t\tfor j in range(1, i): \r\n\t\t\tif tri[i][j]+tri[i-1][j-1] >= tri[i][j]+tri[i-1][j]: \r\n\t\t\t\ttri[i][j] = tri[i][j] + tri[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] = tri[i][j]+tri[i-1][j] \r\n\treturn (max(tri[n-1]))", "metadata": {}}
{"_id": "232_code", "title": "larg_nnum", "text": "# Write a function to get the n largest items from a dataset.\nimport heapq\r\ndef larg_nnum(list1,n):\r\n largest=heapq.nlargest(n,list1)\r\n return largest", "metadata": {}}
{"_id": "233_code", "title": "lateralsuface_cylinder", "text": "# Write a function to find the lateral surface area of a cylinder.\ndef lateralsuface_cylinder(r,h):\r\n  lateralsurface= 2*3.1415*r*h\r\n  return lateralsurface", "metadata": {}}
{"_id": "234_code", "title": "volume_cube", "text": "# Write a function to find the volume of a cube.\ndef volume_cube(l):\r\n  volume = l * l * l\r\n  return volume", "metadata": {}}
{"_id": "235_code", "title": "even_bit_set_number", "text": "# Write a python function to set all even bits of a given number.\ndef even_bit_set_number(n): \r\n    count = 0;res = 0;temp = n \r\n    while(temp > 0): \r\n        if (count % 2 == 1): \r\n            res |= (1 << count)\r\n        count+=1\r\n        temp >>= 1\r\n    return (n | res) ", "metadata": {}}
{"_id": "236_code", "title": "No_of_Triangle", "text": "# Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\ndef No_of_Triangle(N,K):\r\n    if (N < K):\r\n        return -1;\r\n    else:\r\n        Tri_up = 0;\r\n        Tri_up = ((N - K + 1) *(N - K + 2)) // 2;\r\n        Tri_down = 0;\r\n        Tri_down = ((N - 2 * K + 1) *(N - 2 * K + 2)) // 2;\r\n        return Tri_up + Tri_down;", "metadata": {}}
{"_id": "237_code", "title": "check_occurences", "text": "# Write a function to check the occurrences of records which occur similar times in the given tuples.\nfrom collections import Counter \r\ndef check_occurences(test_list):\r\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\r\n  return  (res) ", "metadata": {}}
{"_id": "238_code", "title": "number_of_substrings", "text": "# Write a python function to count number of non-empty substrings of a given string.\ndef number_of_substrings(str): \r\n\tstr_len = len(str); \r\n\treturn int(str_len * (str_len + 1) / 2); ", "metadata": {}}
{"_id": "239_code", "title": "get_total_number_of_sequences", "text": "# Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\ndef get_total_number_of_sequences(m,n): \r\n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tif i==0 or j==0: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif i<j: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif j==1: \r\n\t\t\t\tT[i][j]=i \r\n\t\t\telse: \r\n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \r\n\treturn T[m][n]", "metadata": {}}
{"_id": "240_code", "title": "replace_list", "text": "# Write a function to replace the last element of the list with another list.\ndef replace_list(list1,list2):\r\n list1[-1:] = list2\r\n replace_list=list1\r\n return replace_list\r\n", "metadata": {}}
{"_id": "241_code", "title": "array_3d", "text": "# Write a function to generate a 3d array having each element as '*'.\ndef array_3d(m,n,o):\r\n array_3d = [[ ['*' for col in range(m)] for col in range(n)] for row in range(o)]\r\n return array_3d", "metadata": {}}
{"_id": "242_code", "title": "count_charac", "text": "# Write a function to count total characters in a string.\ndef count_charac(str1):\r\n total = 0\r\n for i in str1:\r\n    total = total + 1\r\n return total", "metadata": {}}
{"_id": "243_code", "title": "sort_on_occurence", "text": "# Write a function to sort the given list based on the occurrence of first element of tuples.\ndef sort_on_occurence(lst): \r\n\tdct = {} \r\n\tfor i, j in lst: \r\n\t\tdct.setdefault(i, []).append(j) \r\n\treturn ([(i, *dict.fromkeys(j), len(j)) \r\n\t\t\t\tfor i, j in dct.items()]) ", "metadata": {}}
{"_id": "244_code", "title": "next_Perfect_Square", "text": "# Write a python function to find the next perfect square greater than a given number.\nimport math  \r\ndef next_Perfect_Square(N): \r\n    nextN = math.floor(math.sqrt(N)) + 1\r\n    return nextN * nextN ", "metadata": {}}
{"_id": "245_code", "title": "max_sum", "text": "# Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.\ndef max_sum(arr, n): \r\n\tMSIBS = arr[:] \r\n\tfor i in range(n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \r\n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \r\n\tMSDBS = arr[:] \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(1, i): \r\n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \r\n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \r\n\tmax_sum = float(\"-Inf\") \r\n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \r\n\t\tmax_sum = max(max_sum, i + j - k) \r\n\treturn max_sum", "metadata": {}}
{"_id": "246_code", "title": "babylonian_squareroot", "text": "# Write a function for computing square roots using the babylonian method.\ndef babylonian_squareroot(number):\r\n    if(number == 0):\r\n        return 0;\r\n    g = number/2.0;\r\n    g2 = g + 1;\r\n    while(g != g2):\r\n        n = number/ g;\r\n        g2 = g;\r\n        g = (g + n)/2;\r\n    return g;", "metadata": {}}
{"_id": "247_code", "title": "lps", "text": "# Write a function to find the longest palindromic subsequence in the given string.\ndef lps(str): \r\n\tn = len(str) \r\n\tL = [[0 for x in range(n)] for x in range(n)] \r\n\tfor i in range(n): \r\n\t\tL[i][i] = 1\r\n\tfor cl in range(2, n+1): \r\n\t\tfor i in range(n-cl+1): \r\n\t\t\tj = i+cl-1\r\n\t\t\tif str[i] == str[j] and cl == 2: \r\n\t\t\t\tL[i][j] = 2\r\n\t\t\telif str[i] == str[j]: \r\n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\r\n\t\t\telse: \r\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \r\n\treturn L[0][n-1]", "metadata": {}}
{"_id": "248_code", "title": "harmonic_sum", "text": "# Write a function to calculate the harmonic sum of n-1.\ndef harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1)) ", "metadata": {}}
{"_id": "249_code", "title": "intersection_array", "text": "# Write a function to find the intersection of two arrays using lambda function.\ndef intersection_array(array_nums1,array_nums2):\r\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \r\n return result", "metadata": {}}
{"_id": "250_code", "title": "count_X", "text": "# Write a python function to count the occcurences of an element in a tuple.\ndef count_X(tup, x): \r\n    count = 0\r\n    for ele in tup: \r\n        if (ele == x): \r\n            count = count + 1\r\n    return count ", "metadata": {}}
{"_id": "251_code", "title": "insert_element", "text": "# Write a function to insert an element before each element of a list.\ndef insert_element(list,element):\r\n list = [v for elt in list for v in (element, elt)]\r\n return list", "metadata": {}}
{"_id": "252_code", "title": "convert", "text": "# Write a python function to convert complex numbers to polar coordinates.\nimport cmath  \r\ndef convert(numbers):    \r\n  num = cmath.polar(numbers)  \r\n  return (num) ", "metadata": {}}
{"_id": "253_code", "title": "count_integer", "text": "# Write a python function to count integers from a given list.\ndef count_integer(list1):\r\n    ctr = 0\r\n    for i in list1:\r\n        if isinstance(i, int):\r\n            ctr = ctr + 1\r\n    return ctr", "metadata": {}}
{"_id": "254_code", "title": "words_ae", "text": "# Write a function to find all words starting with 'a' or 'e' in a given string.\nimport re\r\ndef words_ae(text):\r\n list = re.findall(\"[ae]\\w+\", text)\r\n return list", "metadata": {}}
{"_id": "255_code", "title": "combinations_colors", "text": "# Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nfrom itertools import combinations_with_replacement \r\ndef combinations_colors(l, n):\r\n    return list(combinations_with_replacement(l,n))\r", "metadata": {}}
{"_id": "256_code", "title": "count_Primes_nums", "text": "# Write a python function to count the number of prime numbers less than a given non-negative number.\ndef count_Primes_nums(n):\r\n    ctr = 0\r\n    for num in range(n):\r\n        if num <= 1:\r\n            continue\r\n        for i in range(2,num):\r\n            if (num % i) == 0:\r\n                break\r\n        else:\r\n            ctr += 1\r\n    return ctr", "metadata": {}}
{"_id": "257_code", "title": "swap_numbers", "text": "# Write a function to swap two numbers.\ndef swap_numbers(a,b):\r\n temp = a\r\n a = b\r\n b = temp\r\n return (a,b)", "metadata": {}}
{"_id": "258_code", "title": "count_odd", "text": "# Write a function to find number of odd elements in the given list using lambda function.\ndef count_odd(array_nums):\r\n   count_odd = len(list(filter(lambda x: (x%2 != 0) , array_nums)))\r\n   return count_odd", "metadata": {}}
{"_id": "259_code", "title": "maximize_elements", "text": "# Write a function to maximize the given two tuples.\ndef maximize_elements(test_tup1, test_tup2):\r\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) ", "metadata": {}}
{"_id": "260_code", "title": "newman_prime", "text": "# Write a function to find the nth newman–shanks–williams prime number.\ndef newman_prime(n): \r\n\tif n == 0 or n == 1: \r\n\t\treturn 1\r\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)", "metadata": {}}
{"_id": "261_code", "title": "division_elements", "text": "# Write a function to perform mathematical division operation across the given tuples.\ndef division_elements(test_tup1, test_tup2):\r\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ", "metadata": {}}
{"_id": "262_code", "title": "split_two_parts", "text": "# Write a function to split a given list into two parts where the length of the first part of the list is given.\ndef split_two_parts(list1, L):\r\n    return list1[:L], list1[L:]", "metadata": {}}
{"_id": "263_code", "title": "merge_dict", "text": "# Write a function to merge two dictionaries.\ndef merge_dict(d1,d2):\r\n d = d1.copy()\r\n d.update(d2)\r\n return d", "metadata": {}}
{"_id": "264_code", "title": "dog_age", "text": "# Write a function to calculate a dog's age in dog's years.\ndef dog_age(h_age):\r\n if h_age < 0:\r\n \texit()\r\n elif h_age <= 2:\r\n\t d_age = h_age * 10.5\r\n else:\r\n\t d_age = 21 + (h_age - 2)*4\r\n return d_age", "metadata": {}}
{"_id": "265_code", "title": "list_split", "text": "# Write a function to split a list for every nth element.\ndef list_split(S, step):\r\n    return [S[i::step] for i in range(step)]", "metadata": {}}
{"_id": "266_code", "title": "lateralsurface_cube", "text": "# Write a function to find the lateral surface area of a cube.\ndef lateralsurface_cube(l):\r\n  LSA = 4 * (l * l)\r\n  return LSA", "metadata": {}}
{"_id": "267_code", "title": "square_Sum", "text": "# Write a python function to find the sum of squares of first n odd natural numbers.\ndef square_Sum(n):  \r\n    return int(n*(4*n*n-1)/3) ", "metadata": {}}
{"_id": "268_code", "title": "find_star_num", "text": "# Write a function to find the n'th star number.\ndef find_star_num(n): \r\n\treturn (6 * n * (n - 1) + 1) ", "metadata": {}}
{"_id": "269_code", "title": "ascii_value", "text": "# Write a function to find the ascii value of a character.\ndef ascii_value(k):\r\n  ch=k\r\n  return ord(ch)", "metadata": {}}
{"_id": "270_code", "title": "sum_even_and_even_index", "text": "# Write a python function to find the sum of even numbers at even positions.\ndef sum_even_and_even_index(arr,n):  \r\n    i = 0\r\n    sum = 0\r\n    for i in range(0,n,2): \r\n        if (arr[i] % 2 == 0) : \r\n            sum += arr[i]  \r\n    return sum", "metadata": {}}
{"_id": "271_code", "title": "even_Power_Sum", "text": "# Write a python function to find the sum of fifth power of first n even natural numbers.\ndef even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n+1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j*j); \r\n    return sum; ", "metadata": {}}
{"_id": "272_code", "title": "rear_extract", "text": "# Write a function to perfom the rear element extraction from list of tuples records.\ndef rear_extract(test_list):\r\n  res = [lis[-1] for lis in test_list]\r\n  return (res) ", "metadata": {}}
{"_id": "273_code", "title": "substract_elements", "text": "# Write a function to substract the contents of one tuple with corresponding index of other tuple.\ndef substract_elements(test_tup1, test_tup2):\r\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\r\n  return (res) ", "metadata": {}}
{"_id": "274_code", "title": "even_binomial_Coeff_Sum", "text": "# Write a python function to find sum of even index binomial coefficients.\nimport math  \r\ndef even_binomial_Coeff_Sum( n): \r\n    return (1 << (n - 1)) ", "metadata": {}}
{"_id": "275_code", "title": "get_Position", "text": "# Write a python function to find the position of the last removed element from the given array.\nimport math as mt \r\ndef get_Position(a,n,m): \r\n    for i in range(n): \r\n        a[i] = (a[i] // m + (a[i] % m != 0))  \r\n    result,maxx = -1,-1\r\n    for i in range(n - 1,-1,-1): \r\n        if (maxx < a[i]): \r\n            maxx = a[i] \r\n            result = i \r\n    return result + 1", "metadata": {}}
{"_id": "276_code", "title": "volume_cylinder", "text": "# Write a function to find the volume of a cylinder.\ndef volume_cylinder(r,h):\r\n  volume=3.1415*r*r*h\r\n  return volume", "metadata": {}}
{"_id": "277_code", "title": "dict_filter", "text": "# Write a function to filter a dictionary based on values.\ndef dict_filter(dict,n):\r\n result = {key:value for (key, value) in dict.items() if value >=n}\r\n return result", "metadata": {}}
{"_id": "278_code", "title": "count_first_elements", "text": "# Write a function to find the element count that occurs before the record in the given tuple.\ndef count_first_elements(test_tup):\r\n  for count, ele in enumerate(test_tup):\r\n    if isinstance(ele, tuple):\r\n      break\r\n  return (count) ", "metadata": {}}
{"_id": "279_code", "title": "is_num_decagonal", "text": "# Write a function to find the nth decagonal number.\ndef is_num_decagonal(n): \r\n\treturn 4 * n * n - 3 * n ", "metadata": {}}
{"_id": "280_code", "title": "sequential_search", "text": "# Write a function to search an element in the given array by using sequential search.\ndef sequential_search(dlist, item):\r\n    pos = 0\r\n    found = False\r\n    while pos < len(dlist) and not found:\r\n        if dlist[pos] == item:\r\n            found = True\r\n        else:\r\n            pos = pos + 1\r\n    return found, pos", "metadata": {}}
{"_id": "281_code", "title": "all_unique", "text": "# Write a python function to check if the elements of a given list are unique or not.\ndef all_unique(test_list):\r\n    if len(test_list) > len(set(test_list)):\r\n        return False\r\n    return True", "metadata": {}}
{"_id": "282_code", "title": "sub_list", "text": "# Write a function to substaract two lists using map and lambda function.\ndef sub_list(nums1,nums2):\r\n  result = map(lambda x, y: x - y, nums1, nums2)\r\n  return list(result)", "metadata": {}}
{"_id": "283_code", "title": "validate", "text": "# Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.\ndef validate(n): \r\n    for i in range(10): \r\n        temp = n;  \r\n        count = 0; \r\n        while (temp): \r\n            if (temp % 10 == i): \r\n                count+=1;  \r\n            if (count > i): \r\n                return False\r\n            temp //= 10; \r\n    return True", "metadata": {}}
{"_id": "284_code", "title": "check_element", "text": "# Write a function to check whether all items of a list are equal to a given string.\ndef check_element(list,element):\r\n  check_element=all(v== element for v in list)\r\n  return check_element", "metadata": {}}
{"_id": "285_code", "title": "text_match_two_three", "text": "# Write a function that matches a string that has an a followed by two to three 'b'.\nimport re\r\ndef text_match_two_three(text):\r\n        patterns = 'ab{2,3}'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')", "metadata": {}}
{"_id": "286_code", "title": "max_sub_array_sum_repeated", "text": "# Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\ndef max_sub_array_sum_repeated(a, n, k): \r\n\tmax_so_far = -2147483648\r\n\tmax_ending_here = 0\r\n\tfor i in range(n*k): \r\n\t\tmax_ending_here = max_ending_here + a[i%n] \r\n\t\tif (max_so_far < max_ending_here): \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\tif (max_ending_here < 0): \r\n\t\t\tmax_ending_here = 0\r\n\treturn max_so_far", "metadata": {}}
{"_id": "287_code", "title": "square_Sum", "text": "# Write a python function to find the sum of squares of first n even natural numbers.\ndef square_Sum(n):  \r\n    return int(2*n*(n+1)*(2*n+1)/3)", "metadata": {}}
{"_id": "288_code", "title": "modular_inverse", "text": "# Write a function to count array elements having modular inverse under given prime number p equal to itself.\ndef modular_inverse(arr, N, P):\r\n\tcurrent_element = 0\r\n\tfor i in range(0, N):\r\n\t\tif ((arr[i] * arr[i]) % P == 1):\r\n\t\t\tcurrent_element = current_element + 1\r\n\treturn current_element", "metadata": {}}
{"_id": "289_code", "title": "odd_Days", "text": "# Write a python function to calculate the number of odd days in a given year.\ndef odd_Days(N): \r\n    hund1 = N // 100\r\n    hund4 = N // 400\r\n    leap = N >> 2\r\n    ordd = N - leap \r\n    if (hund1): \r\n        ordd += hund1 \r\n        leap -= hund1 \r\n    if (hund4): \r\n        ordd -= hund4 \r\n        leap += hund4 \r\n    days = ordd + leap * 2\r\n    odd = days % 7\r\n    return odd ", "metadata": {}}
{"_id": "290_code", "title": "max_length", "text": "# Write a function to find the list of lists with maximum length.\ndef max_length(list1):\r\n    max_length = max(len(x) for x in  list1 )  \r\n    max_list = max((x) for x in   list1)\r\n    return(max_length, max_list)", "metadata": {}}
{"_id": "291_code", "title": "count_no_of_ways", "text": "# Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\ndef count_no_of_ways(n, k): \r\n\tdp = [0] * (n + 1) \r\n\ttotal = k \r\n\tmod = 1000000007\r\n\tdp[1] = k \r\n\tdp[2] = k * k\t \r\n\tfor i in range(3,n+1): \r\n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \r\n\treturn dp[n]", "metadata": {}}
{"_id": "292_code", "title": "find", "text": "# Write a python function to find quotient of two numbers.\ndef find(n,m):  \r\n    q = n//m \r\n    return (q)", "metadata": {}}
{"_id": "293_code", "title": "otherside_rightangle", "text": "# Write a function to find the third side of a right angled triangle.\nimport math\r\ndef otherside_rightangle(w,h):\r\n  s=math.sqrt((w*w)+(h*h))\r\n  return s", "metadata": {}}
{"_id": "294_code", "title": "max_val", "text": "# Write a function to find the maximum value in a given heterogeneous list.\ndef max_val(listval):\r\n     max_val = max(i for i in listval if isinstance(i, int)) \r\n     return(max_val)", "metadata": {}}
{"_id": "295_code", "title": "sum_div", "text": "# Write a function to return the sum of all divisors of a number.\ndef sum_div(number):\r\n    divisors = [1]\r\n    for i in range(2, number):\r\n        if (number % i)==0:\r\n            divisors.append(i)\r\n    return sum(divisors)", "metadata": {}}
{"_id": "296_code", "title": "get_Inv_Count", "text": "# Write a python function to count inversions in an array.\ndef get_Inv_Count(arr,n): \r\n    inv_count = 0\r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] > arr[j]): \r\n                inv_count += 1\r\n    return inv_count ", "metadata": {}}
{"_id": "297_code", "title": "flatten_list", "text": "# Write a function to flatten a given nested list structure.\ndef flatten_list(list1):\r\n    result_list = []\r\n    if not list1: return result_list\r\n    stack = [list(list1)]\r\n    while stack:\r\n        c_num = stack.pop()\r\n        next = c_num.pop()\r\n        if c_num: stack.append(c_num)\r\n        if isinstance(next, list):\r\n            if next: stack.append(list(next))\r\n        else: result_list.append(next)\r\n    result_list.reverse()\r\n    return result_list ", "metadata": {}}
{"_id": "298_code", "title": "intersection_nested_lists", "text": "# Write a function to find the nested list elements which are present in another list.\ndef intersection_nested_lists(l1, l2):\r\n    result = [[n for n in lst if n in l1] for lst in l2]\r\n    return result", "metadata": {}}
{"_id": "299_code", "title": "max_aggregate", "text": "# Write a function to calculate the maximum aggregate from the list of tuples.\nfrom collections import defaultdict\r\ndef max_aggregate(stdata):\r\n    temp = defaultdict(int)\r\n    for name, marks in stdata:\r\n        temp[name] += marks\r\n    return max(temp.items(), key=lambda x: x[1])", "metadata": {}}
{"_id": "300_code", "title": "count_binary_seq", "text": "# Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\ndef count_binary_seq(n): \r\n\tnCr = 1\r\n\tres = 1\r\n\tfor r in range(1, n + 1): \r\n\t\tnCr = (nCr * (n + 1 - r)) / r \r\n\t\tres += nCr * nCr \r\n\treturn res ", "metadata": {}}
{"_id": "301_code", "title": "dict_depth", "text": "# Write a function to find the depth of a dictionary.\ndef dict_depth(d):\r\n    if isinstance(d, dict):\r\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\r\n    return 0", "metadata": {}}
{"_id": "302_code", "title": "set_Bit_Number", "text": "# Write a python function to find the most significant bit number which is also a set bit.\ndef set_Bit_Number(n): \r\n    if (n == 0): \r\n        return 0; \r\n    msb = 0; \r\n    n = int(n / 2); \r\n    while (n > 0): \r\n        n = int(n / 2); \r\n        msb += 1; \r\n    return (1 << msb)", "metadata": {}}
{"_id": "303_code", "title": "solve", "text": "# Write a python function to check whether the count of inversion of two types are same or not.\nimport sys \r\ndef solve(a,n):   \r\n    mx = -sys.maxsize - 1\r\n    for j in range(1,n):  \r\n        if (mx > a[j]):  \r\n            return False  \r\n        mx = max(mx,a[j - 1])    \r\n    return True", "metadata": {}}
{"_id": "304_code", "title": "find_Element", "text": "# Write a python function to find element at a given index after number of rotations.\ndef find_Element(arr,ranges,rotations,index) :  \r\n    for i in range(rotations - 1,-1,-1 ) : \r\n        left = ranges[i][0] \r\n        right = ranges[i][1] \r\n        if (left <= index and right >= index) : \r\n            if (index == left) : \r\n                index = right \r\n            else : \r\n                index = index - 1 \r\n    return arr[index] ", "metadata": {}}
{"_id": "305_code", "title": "start_withp", "text": "# Write a function to match two words from a list of words starting with letter 'p'.\nimport re\r\ndef start_withp(words):\r\n for w in words:\r\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\r\n        if m:\r\n            return m.groups()", "metadata": {}}
{"_id": "306_code", "title": "max_sum_increasing_subseq", "text": "# Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\ndef max_sum_increasing_subseq(a, n, index, k):\r\n\tdp = [[0 for i in range(n)] \r\n\t\t\tfor i in range(n)]\r\n\tfor i in range(n):\r\n\t\tif a[i] > a[0]:\r\n\t\t\tdp[0][i] = a[i] + a[0]\r\n\t\telse:\r\n\t\t\tdp[0][i] = a[i]\r\n\tfor i in range(1, n):\r\n\t\tfor j in range(n):\r\n\t\t\tif a[j] > a[i] and j > i:\r\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\r\n\t\t\t\telse:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\t\t\telse:\r\n\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\treturn dp[index][k]", "metadata": {}}
{"_id": "307_code", "title": "colon_tuplex", "text": "# Write a function to get a colon of a tuple.\nfrom copy import deepcopy\r\ndef colon_tuplex(tuplex,m,n):\r\n  tuplex_colon = deepcopy(tuplex)\r\n  tuplex_colon[m].append(n)\r\n  return tuplex_colon", "metadata": {}}
{"_id": "308_code", "title": "large_product", "text": "# Write a function to find the specified number of largest products from two given lists.\ndef large_product(nums1, nums2, N):\r\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\r\n    return result", "metadata": {}}
{"_id": "309_code", "title": "maximum", "text": "# Write a python function to find the maximum of two numbers.\ndef maximum(a,b):   \r\n    if a >= b: \r\n        return a \r\n    else: \r\n        return b ", "metadata": {}}
{"_id": "310_code", "title": "string_to_tuple", "text": "# Write a function to convert a given string to a tuple.\ndef string_to_tuple(str1):\r\n    result = tuple(x for x in str1 if not x.isspace()) \r\n    return result", "metadata": {}}
{"_id": "311_code", "title": "set_left_most_unset_bit", "text": "# Write a python function to set the left most unset bit.\ndef set_left_most_unset_bit(n): \r\n    if not (n & (n + 1)): \r\n        return n \r\n    pos, temp, count = 0, n, 0 \r\n    while temp: \r\n        if not (temp & 1): \r\n            pos = count      \r\n        count += 1; temp>>=1\r\n    return (n | (1 << (pos))) ", "metadata": {}}
{"_id": "312_code", "title": "volume_cone", "text": "# Write a function to find the volume of a cone.\nimport math\r\ndef volume_cone(r,h):\r\n  volume = (1.0/3) * math.pi * r * r * h\r\n  return volume", "metadata": {}}
{"_id": "313_code", "title": "pos_nos", "text": "# Write a python function to print positive numbers in a list.\ndef pos_nos(list1):\r\n  for num in list1: \r\n    if num >= 0: \r\n       return num ", "metadata": {}}
{"_id": "314_code", "title": "max_sum_rectangular_grid", "text": "# Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\ndef max_sum_rectangular_grid(grid, n) : \r\n\tincl = max(grid[0][0], grid[1][0]) \r\n\texcl = 0\r\n\tfor i in range(1, n) : \r\n\t\texcl_new = max(excl, incl) \r\n\t\tincl = excl + max(grid[0][i], grid[1][i]) \r\n\t\texcl = excl_new \r\n\treturn max(excl, incl)", "metadata": {}}
{"_id": "315_code", "title": "find_Max_Len_Even", "text": "# Write a python function to find the first maximum length of even word.\ndef find_Max_Len_Even(str): \r\n    n = len(str) \r\n    i = 0\r\n    currlen = 0\r\n    maxlen = 0\r\n    st = -1\r\n    while (i < n): \r\n        if (str[i] == ' '): \r\n            if (currlen % 2 == 0): \r\n                if (maxlen < currlen): \r\n                    maxlen = currlen \r\n                    st = i - currlen \r\n            currlen = 0 \r\n        else : \r\n            currlen += 1\r\n        i += 1\r\n    if (currlen % 2 == 0): \r\n        if (maxlen < currlen): \r\n            maxlen = currlen \r\n            st = i - currlen \r\n    if (st == -1): \r\n        return \"-1\" \r\n    return str[st: st + maxlen] ", "metadata": {}}
{"_id": "316_code", "title": "find_last_occurrence", "text": "# Write a function to find the index of the last occurrence of a given number in a sorted array.\ndef find_last_occurrence(A, x):\r\n    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            left = mid + 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result ", "metadata": {}}
{"_id": "317_code", "title": "modified_encode", "text": "# Write a function to reflect the modified run-length encoding from a list.\nfrom itertools import groupby\r\ndef modified_encode(alist):\r\n        def ctr_ele(el):\r\n            if len(el)>1: return [len(el), el[0]]\r\n            else: return el[0]\r\n        return [ctr_ele(list(group)) for key, group in groupby(alist)]", "metadata": {}}
{"_id": "318_code", "title": "max_volume ", "text": "# Write a python function to find the maximum volume of a cuboid with given sum of sides.\ndef max_volume (s): \r\n    maxvalue = 0\r\n    i = 1\r\n    for i in range(s - 1): \r\n        j = 1\r\n        for j in range(s): \r\n            k = s - i - j \r\n            maxvalue = max(maxvalue, i * j * k)         \r\n    return maxvalue ", "metadata": {}}
{"_id": "319_code", "title": "find_long_word", "text": "# Write a function to find all five characters long word in the given string by using regex.\nimport re\r\ndef find_long_word(text):\r\n  return (re.findall(r\"\\b\\w{5}\\b\", text))", "metadata": {}}
{"_id": "320_code", "title": "sum_difference", "text": "# Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\ndef sum_difference(n):\r\n    sumofsquares = 0\r\n    squareofsum = 0\r\n    for num in range(1, n+1):\r\n        sumofsquares += num * num\r\n        squareofsum += num\r\n    squareofsum = squareofsum ** 2\r\n    return squareofsum - sumofsquares", "metadata": {}}
{"_id": "321_code", "title": "find_demlo", "text": "# Write a function to find the demlo number for the given number.\ndef find_demlo(s): \r\n\tl = len(s) \r\n\tres = \"\" \r\n\tfor i in range(1,l+1): \r\n\t\tres = res + str(i) \r\n\tfor i in range(l-1,0,-1): \r\n\t\tres = res + str(i) \r\n\treturn res \t", "metadata": {}}
{"_id": "322_code", "title": "position_min", "text": "# Write a function to find all index positions of the minimum values in a given list.\ndef position_min(list1):\r\n    min_val = min(list1)\r\n    min_result = [i for i, j in enumerate(list1) if j == min_val]\r\n    return min_result", "metadata": {}}
{"_id": "323_code", "title": "right_rotate", "text": "# Write a function to re-arrange the given array in alternating positive and negative items.\ndef right_rotate(arr, n, out_of_place, cur):\r\n\ttemp = arr[cur]\r\n\tfor i in range(cur, out_of_place, -1):\r\n\t\tarr[i] = arr[i - 1]\r\n\tarr[out_of_place] = temp\r\n\treturn arr\r\ndef re_arrange(arr, n):\r\n\tout_of_place = -1\r\n\tfor index in range(n):\r\n\t\tif (out_of_place >= 0):\r\n\t\t\tif ((arr[index] >= 0 and arr[out_of_place] < 0) or\r\n\t\t\t(arr[index] < 0 and arr[out_of_place] >= 0)):\r\n\t\t\t\tarr = right_rotate(arr, n, out_of_place, index)\r\n\t\t\t\tif (index-out_of_place > 2):\r\n\t\t\t\t\tout_of_place += 2\r\n\t\t\t\telse:\r\n\t\t\t\t\tout_of_place = - 1\r\n\t\tif (out_of_place == -1):\r\n\t\t\tif ((arr[index] >= 0 and index % 2 == 0) or\r\n\t\t\t (arr[index] < 0 and index % 2 == 1)):\r\n\t\t\t\tout_of_place = index\r\n\treturn arr", "metadata": {}}
{"_id": "324_code", "title": "sum_of_alternates", "text": "# Write a function to extract the sum of alternate chains of tuples.\ndef sum_of_alternates(test_tuple):\r\n  sum1 = 0\r\n  sum2 = 0\r\n  for idx, ele in enumerate(test_tuple):\r\n    if idx % 2:\r\n      sum1 += ele\r\n    else:\r\n      sum2 += ele\r\n  return ((sum1),(sum2)) ", "metadata": {}}
{"_id": "325_code", "title": "get_Min_Squares", "text": "# Write a python function to find the minimum number of squares whose sum is equal to a given number.\ndef get_Min_Squares(n):\r\n    if n <= 3:\r\n        return n;\r\n    res = n \r\n    for x in range(1,n + 1):\r\n        temp = x * x;\r\n        if temp > n:\r\n            break\r\n        else:\r\n            res = min(res,1 + get_Min_Squares(n  - temp)) \r\n    return res;", "metadata": {}}
{"_id": "326_code", "title": "most_occurrences", "text": "# Write a function to get the word with most number of occurrences in the given strings list.\nfrom collections import defaultdict \r\n\r\ndef most_occurrences(test_list):\r\n  temp = defaultdict(int)\r\n  for sub in test_list:\r\n    for wrd in sub.split():\r\n      temp[wrd] += 1\r\n  res = max(temp, key=temp.get)\r\n  return (str(res)) ", "metadata": {}}
{"_id": "327_code", "title": "check_isosceles", "text": "# Write a function to print check if the triangle is isosceles or not.\ndef check_isosceles(x,y,z):\r\n  if x==y or y==z or z==x:\r\n\t   return True\r\n  else:\r\n     return False", "metadata": {}}
{"_id": "328_code", "title": "rotate_left", "text": "# Write a function to rotate a given list by specified number of items to the left direction.\ndef rotate_left(list1,m,n):\r\n  result =  list1[m:]+list1[:n]\r\n  return result", "metadata": {}}
{"_id": "329_code", "title": "neg_count", "text": "# Write a python function to count negative numbers in a list.\ndef neg_count(list):\r\n  neg_count= 0\r\n  for num in list: \r\n    if num <= 0: \r\n      neg_count += 1\r\n  return neg_count ", "metadata": {}}
{"_id": "330_code", "title": "find_char", "text": "# Write a function to find all three, four, five characters long words in the given string by using regex.\nimport re\r\ndef find_char(text):\r\n  return (re.findall(r\"\\b\\w{3,5}\\b\", text))", "metadata": {}}
{"_id": "331_code", "title": "count_unset_bits", "text": "# Write a python function to count unset bits of a given number.\ndef count_unset_bits(n): \r\n    count = 0\r\n    x = 1\r\n    while(x < n + 1): \r\n        if ((x & n) == 0): \r\n            count += 1\r\n        x = x << 1\r\n    return count  ", "metadata": {}}
{"_id": "332_code", "title": "char_frequency", "text": "# Write a function to count character frequency of a given string.\ndef char_frequency(str1):\r\n    dict = {}\r\n    for n in str1:\r\n        keys = dict.keys()\r\n        if n in keys:\r\n            dict[n] += 1\r\n        else:\r\n            dict[n] = 1\r\n    return dict", "metadata": {}}
{"_id": "333_code", "title": "Sort", "text": "# Write a python function to sort a list according to the second element in sublist.\ndef Sort(sub_li): \r\n    sub_li.sort(key = lambda x: x[1]) \r\n    return sub_li ", "metadata": {}}
{"_id": "334_code", "title": "check_Validity", "text": "# Write a python function to check whether the triangle is valid or not if sides are given.\ndef check_Validity(a,b,c):  \r\n    if (a + b <= c) or (a + c <= b) or (b + c <= a) : \r\n        return False\r\n    else: \r\n        return True        ", "metadata": {}}
{"_id": "335_code", "title": "ap_sum", "text": "# Write a function to find the sum of arithmetic progression.\ndef ap_sum(a,n,d):\r\n  total = (n * (2 * a + (n - 1) * d)) / 2\r\n  return total", "metadata": {}}
{"_id": "336_code", "title": "check_monthnum", "text": "# Write a function to check whether the given month name contains 28 days or not.\ndef check_monthnum(monthname1):\r\n  if monthname1 == \"February\":\r\n    return True\r\n  else:\r\n    return False", "metadata": {}}
{"_id": "337_code", "title": "text_match_word", "text": "# Write a function that matches a word at the end of a string, with optional punctuation.\nimport re\r\ndef text_match_word(text):\r\n        patterns = '\\w+\\S*$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'", "metadata": {}}
{"_id": "338_code", "title": "check_Equality", "text": "# Write a python function to count the number of substrings with same first and last characters.\ndef check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n):\r\n        for j in range(1,n-i+1): \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; ", "metadata": {}}
{"_id": "339_code", "title": "find_Divisor", "text": "# Write a python function to find the maximum occuring divisor in an interval.\ndef find_Divisor(x,y):  \r\n    if (x==y): \r\n        return y \r\n    return 2", "metadata": {}}
{"_id": "340_code", "title": "sum_three_smallest_nums", "text": "# Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.\ndef sum_three_smallest_nums(lst):\r\n\treturn sum(sorted([x for x in lst if x > 0])[:3])", "metadata": {}}
{"_id": "341_code", "title": "set_to_tuple", "text": "# Write a function to convert the given set into ordered tuples.\ndef set_to_tuple(s):\r\n  t = tuple(sorted(s))\r\n  return (t)", "metadata": {}}
{"_id": "342_code", "title": "__init__", "text": "# Write a function to find the smallest range that includes at-least one element from each of the given arrays.\nfrom heapq import heappop, heappush\r\nclass Node:\r\n    def __init__(self, value, list_num, index):\r\n        self.value = value\r\n        self.list_num = list_num\r\n        self.index = index\r\n    def __lt__(self, other):\r\n        return self.value < other.value\r\ndef find_minimum_range(list):\r\n    high = float('-inf')\r\n    p = (0, float('inf'))\r\n    pq = []\r\n    for i in range(len(list)):\r\n        heappush(pq, Node(list[i][0], i, 0))\r\n        high = max(high, list[i][0])\r\n    while True:\r\n        top = heappop(pq)\r\n        low = top.value\r\n        i = top.list_num\r\n        j = top.index\r\n        if high - low < p[1] - p[0]:\r\n            p = (low, high)\r\n        if j == len(list[i]) - 1:\r\n            return p\r\n        heappush(pq, Node(list[i][j + 1], i, j + 1))\r\n        high = max(high, list[i][j + 1])", "metadata": {}}
{"_id": "343_code", "title": "dig_let", "text": "# Write a function to calculate the number of digits and letters in a string.\ndef dig_let(s):\r\n d=l=0\r\n for c in s:\r\n    if c.isdigit():\r\n        d=d+1\r\n    elif c.isalpha():\r\n        l=l+1\r\n    else:\r\n        pass\r\n return (l,d)", "metadata": {}}
{"_id": "344_code", "title": "count_Odd_Squares", "text": "# Write a python function to find number of elements with odd factors in a given range.\ndef count_Odd_Squares(n,m): \r\n    return int(m**0.5) - int((n-1)**0.5) ", "metadata": {}}
{"_id": "345_code", "title": "diff_consecutivenums", "text": "# Write a function to find the difference between two consecutive numbers in a given list.\ndef diff_consecutivenums(nums):\r\n    result = [b-a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result", "metadata": {}}
{"_id": "346_code", "title": "zigzag", "text": "# Write a function to find entringer number e(n, k).\ndef zigzag(n, k): \r\n\tif (n == 0 and k == 0): \r\n\t\treturn 1\r\n\tif (k == 0): \r\n\t\treturn 0\r\n\treturn zigzag(n, k - 1) + zigzag(n - 1, n - k)", "metadata": {}}
{"_id": "347_code", "title": "count_Squares", "text": "# Write a python function to count the number of squares in a rectangle.\ndef count_Squares(m,n): \r\n    if (n < m): \r\n        temp = m \r\n        m = n \r\n        n = temp \r\n    return n * (n + 1) * (3 * m - n + 1) // 6", "metadata": {}}
{"_id": "348_code", "title": "bin_coff", "text": "# Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\ndef bin_coff(n, r): \r\n\tval = 1\r\n\tif (r > (n - r)): \r\n\t\tr = (n - r) \r\n\tfor i in range(0, r): \r\n\t\tval *= (n - i) \r\n\t\tval //= (i + 1) \r\n\treturn val \r\ndef find_ways(M): \r\n\tn = M // 2\r\n\ta = bin_coff(2 * n, n) \r\n\tb = a // (n + 1) \r\n\treturn (b) ", "metadata": {}}
{"_id": "349_code", "title": "check", "text": "# Write a python function to check whether the given string is a binary string or not.\ndef check(string) :\r\n    p = set(string) \r\n    s = {'0', '1'} \r\n    if s == p or p == {'0'} or p == {'1'}: \r\n        return (\"Yes\") \r\n    else : \r\n        return (\"No\") ", "metadata": {}}
{"_id": "350_code", "title": "minimum_Length", "text": "# Write a python function to minimize the length of the string by removing occurrence of only one character.\ndef minimum_Length(s) : \r\n    maxOcc = 0\r\n    n = len(s) \r\n    arr = [0]*26\r\n    for i in range(n) : \r\n        arr[ord(s[i]) -ord('a')] += 1\r\n    for i in range(26) : \r\n        if arr[i] > maxOcc : \r\n            maxOcc = arr[i] \r\n    return n - maxOcc ", "metadata": {}}
{"_id": "351_code", "title": "first_Element", "text": "# Write a python function to find the first element occurring k times in a given array.\ndef first_Element(arr,n,k): \r\n    count_map = {}; \r\n    for i in range(0, n): \r\n        if(arr[i] in count_map.keys()): \r\n            count_map[arr[i]] += 1\r\n        else: \r\n            count_map[arr[i]] = 1\r\n        i += 1\r\n    for i in range(0, n):  \r\n        if (count_map[arr[i]] == k): \r\n            return arr[i] \r\n        i += 1 \r\n    return -1", "metadata": {}}
{"_id": "352_code", "title": "unique_Characters", "text": "# Write a python function to check whether all the characters in a given string are unique.\ndef unique_Characters(str):\r\n    for i in range(len(str)):\r\n        for j in range(i + 1,len(str)): \r\n            if (str[i] == str[j]):\r\n                return False;\r\n    return True;", "metadata": {}}
{"_id": "353_code", "title": "remove_column", "text": "# Write a function to remove a specified column from a given nested list.\ndef remove_column(list1, n):\r\n   for i in list1: \r\n    del i[n] \r\n   return list1", "metadata": {}}
{"_id": "354_code", "title": "tn_ap", "text": "# Write a function to find t-nth term of arithemetic progression.\ndef tn_ap(a,n,d):\r\n  tn = a + (n - 1) * d\r\n  return tn", "metadata": {}}
{"_id": "355_code", "title": "count_Rectangles", "text": "# Write a python function to count the number of rectangles in a circle of radius r.\ndef count_Rectangles(radius):  \r\n    rectangles = 0 \r\n    diameter = 2 * radius \r\n    diameterSquare = diameter * diameter \r\n    for a in range(1, 2 * radius):  \r\n        for b in range(1, 2 * radius): \r\n            diagnalLengthSquare = (a * a +  b * b)  \r\n            if (diagnalLengthSquare <= diameterSquare) : \r\n                rectangles += 1\r\n    return rectangles ", "metadata": {}}
{"_id": "356_code", "title": "find_angle", "text": "# Write a function to find the third angle of a triangle using two angles.\ndef find_angle(a,b):\r\n c = 180 - (a + b)\r\n return c\r\n", "metadata": {}}
{"_id": "357_code", "title": "find_max", "text": "# Write a function to find the maximum element of all the given tuple records.\ndef find_max(test_list):\r\n  res = max(int(j) for i in test_list for j in i)\r\n  return (res) ", "metadata": {}}
{"_id": "358_code", "title": "moddiv_list", "text": "# Write a function to find modulo division of two lists using map and lambda function.\ndef moddiv_list(nums1,nums2):\r\n  result = map(lambda x, y: x % y, nums1, nums2)\r\n  return list(result)", "metadata": {}}
{"_id": "359_code", "title": "Check_Solution", "text": "# Write a python function to check whether one root of the quadratic equation is twice of the other or not.\ndef Check_Solution(a,b,c): \r\n    if (2*b*b == 9*a*c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); ", "metadata": {}}
{"_id": "360_code", "title": "get_carol", "text": "# Write a function to find the n’th carol number.\ndef get_carol(n): \r\n\tresult = (2**n) - 1\r\n\treturn result * result - 2", "metadata": {}}
{"_id": "361_code", "title": "remove_empty", "text": "# Write a function to remove empty lists from a given list of lists.\ndef remove_empty(list1):\r\n  remove_empty = [x for x in list1 if x]\r\n  return remove_empty", "metadata": {}}
{"_id": "362_code", "title": "max_occurrences", "text": "# Write a python function to find the item with maximum occurrences in a given list.\ndef max_occurrences(nums):\r\n    max_val = 0\r\n    result = nums[0] \r\n    for i in nums:\r\n        occu = nums.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result", "metadata": {}}
{"_id": "363_code", "title": "add_K_element", "text": "# Write a function to add the k elements to each element in the tuple.\ndef add_K_element(test_list, K):\r\n  res = [tuple(j + K for j in sub ) for sub in test_list]\r\n  return (res) ", "metadata": {}}
{"_id": "364_code", "title": "make_flip", "text": "# Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.\ndef make_flip(ch): \r\n\treturn '1' if (ch == '0') else '0'\r\ndef get_flip_with_starting_charcter(str, expected): \r\n\tflip_count = 0\r\n\tfor i in range(len( str)): \r\n\t\tif (str[i] != expected): \r\n\t\t\tflip_count += 1\r\n\t\texpected = make_flip(expected) \r\n\treturn flip_count \r\ndef min_flip_to_make_string_alternate(str): \r\n\treturn min(get_flip_with_starting_charcter(str, '0'),get_flip_with_starting_charcter(str, '1')) ", "metadata": {}}
{"_id": "365_code", "title": "count_Digit", "text": "# Write a python function to count the number of digits of a given number.\ndef count_Digit(n):\r\n    count = 0\r\n    while n != 0:\r\n        n //= 10\r\n        count += 1\r\n    return count", "metadata": {}}
{"_id": "366_code", "title": "adjacent_num_product", "text": "# Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.\ndef adjacent_num_product(list_nums):\r\n    return max(a*b for a, b in zip(list_nums, list_nums[1:]))", "metadata": {}}
{"_id": "367_code", "title": "__init__", "text": "# Write a function to check if a binary tree is balanced or not.\nclass Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef get_height(root): \r\n\tif root is None: \r\n\t\treturn 0\r\n\treturn max(get_height(root.left), get_height(root.right)) + 1\r\ndef is_tree_balanced(root): \r\n\tif root is None: \r\n\t\treturn True\r\n\tlh = get_height(root.left) \r\n\trh = get_height(root.right) \r\n\tif (abs(lh - rh) <= 1) and is_tree_balanced( \r\n\troot.left) is True and is_tree_balanced( root.right) is True: \r\n\t\treturn True\r\n\treturn False", "metadata": {}}
{"_id": "368_code", "title": "repeat_tuples", "text": "# Write a function to repeat the given tuple n times.\ndef repeat_tuples(test_tup, N):\r\n  res = ((test_tup, ) * N)\r\n  return (res) ", "metadata": {}}
{"_id": "369_code", "title": "lateralsurface_cuboid", "text": "# Write a function to find the lateral surface area of cuboid\ndef lateralsurface_cuboid(l,w,h):\r\n  LSA = 2*h*(l+w)\r\n  return LSA", "metadata": {}}
{"_id": "370_code", "title": "float_sort", "text": "# Write a function to sort a tuple by its float element.\ndef float_sort(price):\r\n  float_sort=sorted(price, key=lambda x: float(x[1]), reverse=True)\r\n  return float_sort", "metadata": {}}
{"_id": "371_code", "title": "smallest_missing", "text": "# Write a function to find the smallest missing element in a sorted array.\ndef smallest_missing(A, left_element, right_element):\r\n    if left_element > right_element:\r\n        return left_element\r\n    mid = left_element + (right_element - left_element) // 2\r\n    if A[mid] == mid:\r\n        return smallest_missing(A, mid + 1, right_element)\r\n    else:\r\n        return smallest_missing(A, left_element, mid - 1)", "metadata": {}}
{"_id": "372_code", "title": "heap_assending", "text": "# Write a function to sort a given list of elements in ascending order using heap queue algorithm.\nimport heapq as hq\r\ndef heap_assending(nums):\r\n  hq.heapify(nums)\r\n  s_result = [hq.heappop(nums) for i in range(len(nums))]\r\n  return s_result", "metadata": {}}
{"_id": "373_code", "title": "volume_cuboid", "text": "# Write a function to find the volume of a cuboid.\ndef volume_cuboid(l,w,h):\r\n  volume=l*w*h\r\n  return volume", "metadata": {}}
{"_id": "374_code", "title": "permute_string", "text": "# Write a function to print all permutations of a given string including duplicates.\ndef permute_string(str):\r\n    if len(str) == 0:\r\n        return ['']\r\n    prev_list = permute_string(str[1:len(str)])\r\n    next_list = []\r\n    for i in range(0,len(prev_list)):\r\n        for j in range(0,len(str)):\r\n            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]\r\n            if new_str not in next_list:\r\n                next_list.append(new_str)\r\n    return next_list", "metadata": {}}
{"_id": "375_code", "title": "round_num", "text": "# Write a function to round the given number to the nearest multiple of a specific number.\ndef round_num(n,m):\r\n    a = (n //m) * m\r\n    b = a + m\r\n    return (b if n - a > b - n else a)", "metadata": {}}
{"_id": "376_code", "title": "remove_replica", "text": "# Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\ndef remove_replica(test_tup):\r\n  temp = set()\r\n  res = tuple(ele if ele not in temp and not temp.add(ele) \r\n\t\t\t\telse 'MSP' for ele in test_tup)\r\n  return (res)", "metadata": {}}
{"_id": "377_code", "title": "remove_Char", "text": "# Write a python function to remove all occurrences of a character in a given string.\ndef remove_Char(s,c) :  \r\n    counts = s.count(c) \r\n    s = list(s) \r\n    while counts :  \r\n        s.remove(c) \r\n        counts -= 1 \r\n    s = '' . join(s)   \r\n    return (s) ", "metadata": {}}
{"_id": "378_code", "title": "move_first", "text": "# Write a python function to shift last element to first position in the given list.\ndef move_first(test_list):\r\n  test_list = test_list[-1:] + test_list[:-1]  \r\n  return test_list", "metadata": {}}
{"_id": "379_code", "title": "surfacearea_cuboid", "text": "# Write a function to find the surface area of a cuboid.\ndef surfacearea_cuboid(l,w,h):\r\n  SA = 2*(l*w + l * h + w * h)\r\n  return SA", "metadata": {}}
{"_id": "380_code", "title": "multi_list", "text": "# Write a function to generate a two-dimensional array.\ndef multi_list(rownum,colnum):\r\n  multi_list = [[0 for col in range(colnum)] for row in range(rownum)]\r\n  for row in range(rownum):\r\n    for col in range(colnum):\r\n        multi_list[row][col]= row*col\r\n  return multi_list\r\n", "metadata": {}}
{"_id": "381_code", "title": "index_on_inner_list", "text": "# Write a function to sort a list of lists by a given index of the inner list.\nfrom operator import itemgetter\r\ndef index_on_inner_list(list_data, index_no):\r\n    result = sorted(list_data, key=itemgetter(index_no))\r\n    return result", "metadata": {}}
{"_id": "382_code", "title": "find_rotation_count", "text": "# Write a function to find the number of rotations in a circularly sorted array.\ndef find_rotation_count(A):\r\n    (left, right) = (0, len(A) - 1)\r\n    while left <= right:\r\n        if A[left] <= A[right]:\r\n            return left\r\n        mid = (left + right) // 2\r\n        next = (mid + 1) % len(A)\r\n        prev = (mid - 1 + len(A)) % len(A)\r\n        if A[mid] <= A[next] and A[mid] <= A[prev]:\r\n            return mid\r\n        elif A[mid] <= A[right]:\r\n            right = mid - 1\r\n        elif A[mid] >= A[left]:\r\n            left = mid + 1\r\n    return -1", "metadata": {}}
{"_id": "383_code", "title": "even_bit_toggle_number", "text": "# Write a python function to toggle all odd bits of a given number.\ndef even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n    \r\n    while(temp > 0 ) : \r\n        if (count % 2 == 0) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res ", "metadata": {}}
{"_id": "384_code", "title": "frequency_Of_Smallest", "text": "# Write a python function to find the frequency of the smallest value in a given array.\ndef frequency_Of_Smallest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] < mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq ", "metadata": {}}
{"_id": "385_code", "title": "get_perrin", "text": "# Write a function to find the n'th perrin number using recursion.\ndef get_perrin(n):\r\n  if (n == 0):\r\n    return 3\r\n  if (n == 1):\r\n    return 0\r\n  if (n == 2):\r\n    return 2 \r\n  return get_perrin(n - 2) + get_perrin(n - 3)", "metadata": {}}
{"_id": "386_code", "title": "swap_count", "text": "# Write a function to find out the minimum no of swaps required for bracket balancing in the given string.\ndef swap_count(s):\r\n\tchars = s\r\n\tcount_left = 0\r\n\tcount_right = 0\r\n\tswap = 0\r\n\timbalance = 0; \r\n\tfor i in range(len(chars)):\r\n\t\tif chars[i] == '[':\r\n\t\t\tcount_left += 1\r\n\t\t\tif imbalance > 0:\r\n\t\t\t\tswap += imbalance\r\n\t\t\t\timbalance -= 1\r\n\t\telif chars[i] == ']':\r\n\t\t\tcount_right += 1\r\n\t\t\timbalance = (count_right - count_left) \r\n\treturn swap", "metadata": {}}
{"_id": "387_code", "title": "even_or_odd", "text": "# Write a python function to check whether the hexadecimal number is even or odd.\ndef even_or_odd(N): \r\n    l = len(N) \r\n    if (N[l-1] =='0'or N[l-1] =='2'or \r\n        N[l-1] =='4'or N[l-1] =='6'or \r\n        N[l-1] =='8'or N[l-1] =='A'or \r\n        N[l-1] =='C'or N[l-1] =='E'): \r\n        return (\"Even\") \r\n    else: \r\n        return (\"Odd\") ", "metadata": {}}
{"_id": "388_code", "title": "highest_Power_of_2", "text": "# Write a python function to find the highest power of 2 that is less than or equal to n.\ndef highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1): \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break; \r\n    return res; ", "metadata": {}}
{"_id": "389_code", "title": "find_lucas", "text": "# Write a function to find the n'th lucas number.\ndef find_lucas(n): \r\n\tif (n == 0): \r\n\t\treturn 2\r\n\tif (n == 1): \r\n\t\treturn 1\r\n\treturn find_lucas(n - 1) + find_lucas(n - 2) ", "metadata": {}}
{"_id": "390_code", "title": "add_string", "text": "# Write a function to insert a given string at the beginning of all items in a list.\ndef add_string(list,string):\r\n add_string=[string.format(i) for i in  list]\r\n return add_string", "metadata": {}}
{"_id": "391_code", "title": "convert_list_dictionary", "text": "# Write a function to convert more than one list to nested dictionary.\ndef convert_list_dictionary(l1, l2, l3):\r\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\r\n     return result", "metadata": {}}
{"_id": "392_code", "title": "get_max_sum ", "text": "# Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\ndef get_max_sum (n):\r\n\tres = list()\r\n\tres.append(0)\r\n\tres.append(1)\r\n\ti = 2\r\n\twhile i<n + 1:\r\n\t\tres.append(max(i, (res[int(i / 2)] \r\n\t\t\t\t\t\t+ res[int(i / 3)] +\r\n\t\t\t\t\t\t\tres[int(i / 4)]\r\n\t\t\t\t\t\t+ res[int(i / 5)])))\r\n\t\ti = i + 1\r\n\treturn res[n]", "metadata": {}}
{"_id": "393_code", "title": "max_length_list", "text": "# Write a function to find the list with maximum length using lambda function.\ndef max_length_list(input_list):\r\n    max_length = max(len(x) for x in input_list )   \r\n    max_list = max(input_list, key = lambda i: len(i))    \r\n    return(max_length, max_list)", "metadata": {}}
{"_id": "394_code", "title": "check_distinct", "text": "# Write a function to check if given tuple is distinct or not.\ndef check_distinct(test_tup):\r\n  res = True\r\n  temp = set()\r\n  for ele in test_tup:\r\n    if ele in temp:\r\n      res = False\r\n      break\r\n    temp.add(ele)\r\n  return (res) ", "metadata": {}}
{"_id": "395_code", "title": "first_non_repeating_character", "text": "# Write a python function to find the first non-repeated character in a given string.\ndef first_non_repeating_character(str1):\r\n  char_order = []\r\n  ctr = {}\r\n  for c in str1:\r\n    if c in ctr:\r\n      ctr[c] += 1\r\n    else:\r\n      ctr[c] = 1 \r\n      char_order.append(c)\r\n  for c in char_order:\r\n    if ctr[c] == 1:\r\n      return c\r\n  return None", "metadata": {}}
{"_id": "396_code", "title": "check_char", "text": "# Write a function to check whether the given string starts and ends with the same character or not using regex.\nimport re  \r\nregex = r'^[a-z]$|^([a-z]).*\\1$'\r\ndef check_char(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn \"Valid\" \r\n\telse: \r\n\t\treturn \"Invalid\" ", "metadata": {}}
{"_id": "397_code", "title": "median_numbers", "text": "# Write a function to find the median of three specific numbers.\ndef median_numbers(a,b,c):\r\n if a > b:\r\n    if a < c:\r\n        median = a\r\n    elif b > c:\r\n        median = b\r\n    else:\r\n        median = c\r\n else:\r\n    if a > c:\r\n        median = a\r\n    elif b < c:\r\n        median = b\r\n    else:\r\n        median = c\r\n return median", "metadata": {}}
{"_id": "398_code", "title": "sum_of_digits", "text": "# Write a function to compute the sum of digits of each number of a given list.\ndef sum_of_digits(nums):\r\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())", "metadata": {}}
{"_id": "399_code", "title": "bitwise_xor", "text": "# Write a function to perform the mathematical bitwise xor operation across the given tuples.\ndef bitwise_xor(test_tup1, test_tup2):\r\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ", "metadata": {}}
{"_id": "400_code", "title": "extract_freq", "text": "# Write a function to extract the frequency of unique tuples in the given list order irrespective.\ndef extract_freq(test_list):\r\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\r\n  return (res)", "metadata": {}}
{"_id": "401_code", "title": "add_nested_tuples", "text": "# Write a function to perform index wise addition of tuple elements in the given two nested tuples.\ndef add_nested_tuples(test_tup1, test_tup2):\r\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) ", "metadata": {}}
{"_id": "402_code", "title": "ncr_modp", "text": "# Write a function to compute the value of ncr%p.\ndef ncr_modp(n, r, p): \r\n    C = [0 for i in range(r+1)]   \r\n    C[0] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(min(i, r), 0, -1): \r\n            C[j] = (C[j] + C[j-1]) % p   \r\n    return C[r] ", "metadata": {}}
{"_id": "403_code", "title": "is_valid_URL", "text": "# Write a function to check if a url is valid or not using regex.\nimport re\r\ndef is_valid_URL(str):\r\n\tregex = (\"((http|https)://)(www.)?\" +\r\n\t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\r\n\t\t\t\"{2,256}\\\\.[a-z]\" +\r\n\t\t\t\"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\r\n\t\t\t\"._\\\\+~#?&//=]*)\")\r\n\tp = re.compile(regex)\r\n\tif (str == None):\r\n\t\treturn False\r\n\tif(re.search(p, str)):\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False", "metadata": {}}
{"_id": "404_code", "title": "minimum", "text": "# Write a python function to find the minimum of two numbers.\ndef minimum(a,b):   \r\n    if a <= b: \r\n        return a \r\n    else: \r\n        return b ", "metadata": {}}
{"_id": "405_code", "title": "check_tuplex", "text": "# Write a function to check whether an element exists within a tuple.\ndef check_tuplex(tuplex,tuple1): \r\n  if tuple1 in tuplex:\r\n    return True\r\n  else:\r\n     return False", "metadata": {}}
{"_id": "406_code", "title": "find_Parity", "text": "# Write a python function to find the parity of a given number.\ndef find_Parity(x): \r\n    y = x ^ (x >> 1); \r\n    y = y ^ (y >> 2); \r\n    y = y ^ (y >> 4); \r\n    y = y ^ (y >> 8); \r\n    y = y ^ (y >> 16); \r\n    if (y & 1): \r\n        return (\"Odd Parity\"); \r\n    return (\"Even Parity\"); ", "metadata": {}}
{"_id": "407_code", "title": "rearrange_bigger", "text": "# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n):\r\n    nums = list(str(n))\r\n    for i in range(len(nums)-2,-1,-1):\r\n        if nums[i] < nums[i+1]:\r\n            z = nums[i:]\r\n            y = min(filter(lambda x: x > z[0], z))\r\n            z.remove(y)\r\n            z.sort()\r\n            nums[i:] = [y] + z\r\n            return int(\"\".join(nums))\r\n    return False", "metadata": {}}
{"_id": "408_code", "title": "k_smallest_pairs", "text": "# Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nimport heapq\r\ndef k_smallest_pairs(nums1, nums2, k):\r\n   queue = []\r\n   def push(i, j):\r\n       if i < len(nums1) and j < len(nums2):\r\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\r\n   push(0, 0)\r\n   pairs = []\r\n   while queue and len(pairs) < k:\r\n       _, i, j = heapq.heappop(queue)\r\n       pairs.append([nums1[i], nums2[j]])\r\n       push(i, j + 1)\r\n       if j == 0:\r\n           push(i + 1, 0)\r\n   return pairs", "metadata": {}}
{"_id": "409_code", "title": "min_product_tuple", "text": "# Write a function to find the minimum product from the pairs of tuples within a given list.\ndef min_product_tuple(list1):\r\n    result_min = min([abs(x * y) for x, y in list1] )\r\n    return result_min", "metadata": {}}
{"_id": "410_code", "title": "min_val", "text": "# Write a function to find the minimum value in a given heterogeneous list.\ndef min_val(listval):\r\n     min_val = min(i for i in listval if isinstance(i, int))\r\n     return min_val", "metadata": {}}
{"_id": "411_code", "title": "snake_to_camel", "text": "# Write a function to convert the given snake case string to camel case string by using regex.\nimport re\r\ndef snake_to_camel(word):\r\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))", "metadata": {}}
{"_id": "412_code", "title": "remove_odd", "text": "# Write a python function to remove odd numbers from a given list.\ndef remove_odd(l):\r\n    for i in l:\r\n        if i % 2 != 0:\r\n            l.remove(i)\r\n    return l", "metadata": {}}
{"_id": "413_code", "title": "extract_nth_element", "text": "# Write a function to extract the nth element from a given list of tuples.\ndef extract_nth_element(list1, n):\r\n    result = [x[n] for x in list1]\r\n    return result", "metadata": {}}
{"_id": "414_code", "title": "overlapping", "text": "# Write a python function to check whether the value exists in a sequence or not.\ndef overlapping(list1,list2):  \r\n    c=0\r\n    d=0\r\n    for i in list1: \r\n        c+=1\r\n    for i in list2: \r\n        d+=1\r\n    for i in range(0,c): \r\n        for j in range(0,d): \r\n            if(list1[i]==list2[j]): \r\n                return 1\r\n    return 0", "metadata": {}}
{"_id": "415_code", "title": "max_Product", "text": "# Write a python function to find a pair with highest product from a given array of integers.\ndef max_Product(arr): \r\n    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return (\"No pairs exists\")           \r\n    x = arr[0]; y = arr[1]      \r\n    for i in range(0,arr_len): \r\n        for j in range(i + 1,arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y    ", "metadata": {}}
{"_id": "416_code", "title": "breakSum", "text": "# Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nMAX = 1000000\r\ndef breakSum(n): \r\n\tdp = [0]*(n+1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i); \r\n\treturn dp[n]", "metadata": {}}
{"_id": "417_code", "title": "group_tuples", "text": "# Write a function to find common first element in given list of tuple.\ndef group_tuples(Input): \r\n\tout = {} \r\n\tfor elem in Input: \r\n\t\ttry: \r\n\t\t\tout[elem[0]].extend(elem[1:]) \r\n\t\texcept KeyError: \r\n\t\t\tout[elem[0]] = list(elem) \r\n\treturn [tuple(values) for values in out.values()] ", "metadata": {}}
{"_id": "418_code", "title": "Find_Max", "text": "# Write a python function to find the sublist having maximum length.\ndef Find_Max(lst): \r\n    maxList = max((x) for x in lst) \r\n    return maxList", "metadata": {}}
{"_id": "419_code", "title": "round_and_sum", "text": "# Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\ndef round_and_sum(list1):\r\n  lenght=len(list1)\r\n  round_and_sum=sum(list(map(round,list1))* lenght)\r\n  return round_and_sum", "metadata": {}}
{"_id": "420_code", "title": "cube_Sum", "text": "# Write a python function to find the cube sum of first n even natural numbers.\ndef cube_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += (2*i)*(2*i)*(2*i) \r\n    return sum", "metadata": {}}
{"_id": "421_code", "title": "concatenate_tuple", "text": "# Write a function to concatenate each element of tuple by the delimiter.\ndef concatenate_tuple(test_tup):\r\n    delim = \"-\"\r\n    res = ''.join([str(ele) + delim for ele in test_tup])\r\n    res = res[ : len(res) - len(delim)]\r\n    return (str(res)) ", "metadata": {}}
{"_id": "422_code", "title": "find_Average_Of_Cube", "text": "# Write a python function to find the average of cubes of first n natural numbers.\ndef find_Average_Of_Cube(n):  \r\n    sum = 0\r\n    for i in range(1, n + 1): \r\n        sum += i * i * i  \r\n    return round(sum / n, 6) ", "metadata": {}}
{"_id": "423_code", "title": "get_maxgold", "text": "# Write a function to solve gold mine problem.\ndef get_maxgold(gold, m, n): \r\n    goldTable = [[0 for i in range(n)] \r\n                        for j in range(m)]   \r\n    for col in range(n-1, -1, -1): \r\n        for row in range(m):  \r\n            if (col == n-1): \r\n                right = 0\r\n            else: \r\n                right = goldTable[row][col+1] \r\n            if (row == 0 or col == n-1): \r\n                right_up = 0\r\n            else: \r\n                right_up = goldTable[row-1][col+1] \r\n            if (row == m-1 or col == n-1): \r\n                right_down = 0\r\n            else: \r\n                right_down = goldTable[row+1][col+1] \r\n            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down) \r\n    res = goldTable[0][0] \r\n    for i in range(1, m): \r\n        res = max(res, goldTable[i][0])  \r\n    return res ", "metadata": {}}
{"_id": "424_code", "title": "extract_rear", "text": "# Write a function to extract only the rear index element of each string in the given tuple.\ndef extract_rear(test_tuple):\r\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\r\n  return (res) ", "metadata": {}}
{"_id": "425_code", "title": "count_element_in_list", "text": "# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x): \r\n    ctr = 0\r\n    for i in range(len(list1)): \r\n        if x in list1[i]: \r\n            ctr+= 1          \r\n    return ctr", "metadata": {}}
{"_id": "426_code", "title": "filter_oddnumbers", "text": "# Write a function to filter odd numbers using lambda function.\ndef filter_oddnumbers(nums):\r\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\r\n return odd_nums", "metadata": {}}
{"_id": "427_code", "title": "change_date_format", "text": "# Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nimport re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)", "metadata": {}}
{"_id": "428_code", "title": "shell_sort", "text": "# Write a function to sort the given array by using shell sort.\ndef shell_sort(my_list):\r\n    gap = len(my_list) // 2\r\n    while gap > 0:\r\n        for i in range(gap, len(my_list)):\r\n            current_item = my_list[i]\r\n            j = i\r\n            while j >= gap and my_list[j - gap] > current_item:\r\n                my_list[j] = my_list[j - gap]\r\n                j -= gap\r\n            my_list[j] = current_item\r\n        gap //= 2\r\n\r\n    return my_list", "metadata": {}}
{"_id": "429_code", "title": "and_tuples", "text": "# Write a function to extract the elementwise and tuples from the given two tuples.\ndef and_tuples(test_tup1, test_tup2):\r\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ", "metadata": {}}
{"_id": "430_code", "title": "parabola_directrix", "text": "# Write a function to find the directrix of a parabola.\ndef parabola_directrix(a, b, c): \r\n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\r\n  return directrix", "metadata": {}}
{"_id": "431_code", "title": "common_element", "text": "# Write a function that takes two lists and returns true if they have at least one common element.\ndef common_element(list1, list2):\r\n     result = False\r\n     for x in list1:\r\n         for y in list2:\r\n             if x == y:\r\n                 result = True\r\n                 return result", "metadata": {}}
{"_id": "432_code", "title": "median_trapezium", "text": "# Write a function to find the median of a trapezium.\ndef median_trapezium(base1,base2,height):\r\n median = 0.5 * (base1+ base2)\r\n return median", "metadata": {}}
{"_id": "433_code", "title": "check_greater", "text": "# Write a function to check whether the entered number is greater than the elements of the given array.\ndef check_greater(arr, number):\r\n  arr.sort()\r\n  if number > arr[-1]:\r\n    return ('Yes, the entered number is greater than those in the array')\r\n  else:\r\n    return ('No, entered number is less than those in the array')", "metadata": {}}
{"_id": "434_code", "title": "text_match_one", "text": "# Write a function that matches a string that has an a followed by one or more b's.\nimport re\r\ndef text_match_one(text):\r\n        patterns = 'ab+?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')\r\n", "metadata": {}}
{"_id": "435_code", "title": "last_Digit", "text": "# Write a python function to find the last digit of a given number.\ndef last_Digit(n) :\r\n    return (n % 10) ", "metadata": {}}
{"_id": "436_code", "title": "neg_nos", "text": "# Write a python function to print negative numbers in a list.\ndef neg_nos(list1):\r\n  for num in list1: \r\n    if num < 0: \r\n       return num ", "metadata": {}}
{"_id": "437_code", "title": "remove_odd", "text": "# Write a function to remove odd characters in a string.\ndef remove_odd(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 == 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2", "metadata": {}}
{"_id": "438_code", "title": "count_bidirectional", "text": "# Write a function to count bidirectional tuple pairs.\ndef count_bidirectional(test_list):\r\n  res = 0\r\n  for idx in range(0, len(test_list)):\r\n    for iidx in range(idx + 1, len(test_list)):\r\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\r\n        res += 1\r\n  return (str(res)) ", "metadata": {}}
{"_id": "439_code", "title": "multiple_to_single", "text": "# Write a function to convert a list of multiple integers into a single integer.\ndef multiple_to_single(L):\r\n  x = int(\"\".join(map(str, L)))\r\n  return x", "metadata": {}}
{"_id": "440_code", "title": "find_adverb_position", "text": "# Write a function to find all adverbs and their positions in a given sentence.\nimport re\r\ndef find_adverb_position(text):\r\n for m in re.finditer(r\"\\w+ly\", text):\r\n    return (m.start(), m.end(), m.group(0))", "metadata": {}}
{"_id": "441_code", "title": "surfacearea_cube", "text": "# Write a function to find the surface area of a cube.\ndef surfacearea_cube(l):\r\n  surfacearea= 6*l*l\r\n  return surfacearea", "metadata": {}}
{"_id": "442_code", "title": "positive_count", "text": "# Write a function to find the ration of positive numbers in an array of integers.\nfrom array import array\r\ndef positive_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x > 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)", "metadata": {}}
{"_id": "443_code", "title": "largest_neg", "text": "# Write a python function to find the largest negative number from the given list.\ndef largest_neg(list1): \r\n    max = list1[0] \r\n    for x in list1: \r\n        if x < max : \r\n             max = x  \r\n    return max", "metadata": {}}
{"_id": "444_code", "title": "trim_tuple", "text": "# Write a function to trim each tuple by k in the given tuple list.\ndef trim_tuple(test_list, K):\r\n  res = []\r\n  for ele in test_list:\r\n    N = len(ele)\r\n    res.append(tuple(list(ele)[K: N - K]))\r\n  return (str(res)) ", "metadata": {}}
{"_id": "445_code", "title": "index_multiplication", "text": "# Write a function to perform index wise multiplication of tuple elements in the given two tuples.\ndef index_multiplication(test_tup1, test_tup2):\r\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) ", "metadata": {}}
{"_id": "446_code", "title": "count_Occurrence", "text": "# Write a python function to count the occurence of all elements of list in a tuple.\nfrom collections import Counter \r\ndef count_Occurrence(tup, lst): \r\n    count = 0\r\n    for item in tup: \r\n        if item in lst: \r\n            count+= 1 \r\n    return count  ", "metadata": {}}
{"_id": "447_code", "title": "cube_nums", "text": "# Write a function to find cubes of individual elements in a list using lambda function.\ndef cube_nums(nums):\r\n cube_nums = list(map(lambda x: x ** 3, nums))\r\n return cube_nums", "metadata": {}}
{"_id": "448_code", "title": "cal_sum", "text": "# Write a function to calculate the sum of perrin numbers.\ndef cal_sum(n): \r\n\ta = 3\r\n\tb = 0\r\n\tc = 2\r\n\tif (n == 0): \r\n\t\treturn 3\r\n\tif (n == 1): \r\n\t\treturn 3\r\n\tif (n == 2): \r\n\t\treturn 5\r\n\tsum = 5\r\n\twhile (n > 2): \r\n\t\td = a + b \r\n\t\tsum = sum + d \r\n\t\ta = b \r\n\t\tb = c \r\n\t\tc = d \r\n\t\tn = n-1\r\n\treturn sum", "metadata": {}}
{"_id": "449_code", "title": "check_Triangle", "text": "# Write a python function to check whether the triangle is valid or not if 3 points are given.\ndef check_Triangle(x1,y1,x2,y2,x3,y3): \r\n    a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))   \r\n    if a == 0: \r\n        return ('No') \r\n    else: \r\n        return ('Yes') ", "metadata": {}}
{"_id": "450_code", "title": "extract_string", "text": "# Write a function to extract specified size of strings from a give list of string values.\ndef extract_string(str, l):\r\n    result = [e for e in str if len(e) == l] \r\n    return result", "metadata": {}}
{"_id": "451_code", "title": "remove_whitespaces", "text": "# Write a function to remove all whitespaces from the given string using regex.\nimport re\r\ndef remove_whitespaces(text1):\r\n  return (re.sub(r'\\s+', '',text1))", "metadata": {}}
{"_id": "452_code", "title": "loss_amount", "text": "# Write a function that gives loss amount if the given amount has loss else return none.\ndef loss_amount(actual_cost,sale_amount): \r\n  if(sale_amount > actual_cost):\r\n    amount = sale_amount - actual_cost\r\n    return amount\r\n  else:\r\n    return None", "metadata": {}}
{"_id": "453_code", "title": "sumofFactors", "text": "# Write a python function to find the sum of even factors of a number.\nimport math \r\ndef sumofFactors(n) : \r\n    if (n % 2 != 0) : \r\n        return 0\r\n    res = 1\r\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while (n % i == 0) : \r\n            count= count + 1\r\n            n = n // i \r\n            if (i == 2 and count == 1) : \r\n                curr_sum = 0\r\n            curr_term = curr_term * i \r\n            curr_sum = curr_sum + curr_term \r\n        res = res * curr_sum  \r\n    if (n >= 2) : \r\n        res = res * (1 + n) \r\n    return res ", "metadata": {}}
{"_id": "454_code", "title": "text_match_wordz", "text": "# Write a function that matches a word containing 'z'.\nimport re\r\ndef text_match_wordz(text):\r\n        patterns = '\\w*z.\\w*'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')", "metadata": {}}
{"_id": "455_code", "title": "check_monthnumb_number", "text": "# Write a function to check whether the given month number contains 31 days or not.\ndef check_monthnumb_number(monthnum2):\r\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\r\n    return True\r\n  else:\r\n    return False", "metadata": {}}
{"_id": "456_code", "title": "reverse_string_list", "text": "# Write a function to reverse strings in a given list of string values.\ndef reverse_string_list(stringlist):\r\n    result = [x[::-1] for x in stringlist]\r\n    return result", "metadata": {}}
{"_id": "457_code", "title": "Find_Min", "text": "# Write a python function to find the sublist having minimum length.\ndef Find_Min(lst): \r\n    minList = min((x) for x in lst) \r\n    return minList", "metadata": {}}
{"_id": "458_code", "title": "rectangle_area", "text": "# Write a function to find the area of a rectangle.\ndef rectangle_area(l,b):\r\n  area=l*b\r\n  return area", "metadata": {}}
{"_id": "459_code", "title": "remove_uppercase", "text": "# Write a function to remove uppercase substrings from a given string by using regex.\nimport re\r\ndef remove_uppercase(str1):\r\n  remove_upper = lambda text: re.sub('[A-Z]', '', text)\r\n  result =  remove_upper(str1)\r\n  return (result)", "metadata": {}}
{"_id": "460_code", "title": "Extract", "text": "# Write a python function to get the first element of each sublist.\ndef Extract(lst): \r\n    return [item[0] for item in lst] ", "metadata": {}}
{"_id": "461_code", "title": "upper_ctr", "text": "# Write a python function to count the upper case characters in a given string.\ndef upper_ctr(str):\r\n    upper_ctr = 0\r\n    for i in range(len(str)):\r\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\r\n          return upper_ctr", "metadata": {}}
{"_id": "462_code", "title": "combinations_list", "text": "# Write a function to find all possible combinations of the elements of a given list.\ndef combinations_list(list1):\r\n    if len(list1) == 0:\r\n        return [[]]\r\n    result = []\r\n    for el in combinations_list(list1[1:]):\r\n        result += [el, el+[list1[0]]]\r\n    return result", "metadata": {}}
{"_id": "463_code", "title": "max_subarray_product", "text": "# Write a function to find the maximum product subarray of the given array.\ndef max_subarray_product(arr):\r\n\tn = len(arr)\r\n\tmax_ending_here = 1\r\n\tmin_ending_here = 1\r\n\tmax_so_far = 0\r\n\tflag = 0\r\n\tfor i in range(0, n):\r\n\t\tif arr[i] > 0:\r\n\t\t\tmax_ending_here = max_ending_here * arr[i]\r\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\r\n\t\t\tflag = 1\r\n\t\telif arr[i] == 0:\r\n\t\t\tmax_ending_here = 1\r\n\t\t\tmin_ending_here = 1\r\n\t\telse:\r\n\t\t\ttemp = max_ending_here\r\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\r\n\t\t\tmin_ending_here = temp * arr[i]\r\n\t\tif (max_so_far < max_ending_here):\r\n\t\t\tmax_so_far = max_ending_here\r\n\tif flag == 0 and max_so_far == 0:\r\n\t\treturn 0\r\n\treturn max_so_far", "metadata": {}}
{"_id": "464_code", "title": "check_value", "text": "# Write a function to check if all values are same in a dictionary.\ndef check_value(dict, n):\r\n    result = all(x == n for x in dict.values()) \r\n    return result", "metadata": {}}
{"_id": "465_code", "title": "drop_empty", "text": "# Write a function to drop empty items from a given dictionary.\ndef drop_empty(dict1):\r\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\r\n  return dict1", "metadata": {}}
{"_id": "466_code", "title": "find_peak_util", "text": "# Write a function to find the peak element in the given array.\ndef find_peak_util(arr, low, high, n): \r\n\tmid = low + (high - low)/2\r\n\tmid = int(mid) \r\n\tif ((mid == 0 or arr[mid - 1] <= arr[mid]) and\r\n\t\t(mid == n - 1 or arr[mid + 1] <= arr[mid])): \r\n\t\treturn mid \r\n\telif (mid > 0 and arr[mid - 1] > arr[mid]): \r\n\t\treturn find_peak_util(arr, low, (mid - 1), n) \r\n\telse: \r\n\t\treturn find_peak_util(arr, (mid + 1), high, n) \r\ndef find_peak(arr, n): \r\n\treturn find_peak_util(arr, 0, n - 1, n) ", "metadata": {}}
{"_id": "467_code", "title": "decimal_to_Octal", "text": "# Write a python function to convert decimal number to octal number.\ndef decimal_to_Octal(deciNum):\r\n    octalNum = 0\r\n    countval = 1;\r\n    dNo = deciNum;\r\n    while (deciNum!= 0):\r\n        remainder= deciNum % 8;\r\n        octalNum+= remainder*countval;\r\n        countval= countval*10;\r\n        deciNum //= 8; \r\n    return (octalNum)", "metadata": {}}
{"_id": "468_code", "title": "max_product", "text": "# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\ndef max_product(arr, n ): \r\n\tmpis =[0] * (n) \r\n\tfor i in range(n): \r\n\t\tmpis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\t\tmpis[i] < (mpis[j] * arr[i])): \r\n\t\t\t\t\t\tmpis[i] = mpis[j] * arr[i] \r\n\treturn max(mpis)", "metadata": {}}
{"_id": "469_code", "title": "max_profit", "text": "# Write a function to find the maximum profit earned from a maximum of k stock transactions\ndef max_profit(price, k):\r\n    n = len(price)\r\n    final_profit = [[None for x in range(n)] for y in range(k + 1)]\r\n    for i in range(k + 1):\r\n        for j in range(n):\r\n            if i == 0 or j == 0:\r\n                final_profit[i][j] = 0\r\n            else:\r\n                max_so_far = 0\r\n                for x in range(j):\r\n                    curr_price = price[j] - price[x] + final_profit[i-1][x]\r\n                    if max_so_far < curr_price:\r\n                        max_so_far = curr_price\r\n                final_profit[i][j] = max(final_profit[i][j-1], max_so_far)\r\n    return final_profit[k][n-1]", "metadata": {}}
{"_id": "470_code", "title": "add_pairwise", "text": "# Write a function to find the pairwise addition of the elements of the given tuples.\ndef add_pairwise(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) ", "metadata": {}}
{"_id": "471_code", "title": "find_remainder", "text": "# Write a python function to find remainder of array multiplication divided by n.\ndef find_remainder(arr, lens, n): \r\n    mul = 1\r\n    for i in range(lens):  \r\n        mul = (mul * (arr[i] % n)) % n \r\n    return mul % n ", "metadata": {}}
{"_id": "472_code", "title": "check_Consecutive", "text": "# Write a python function to check whether the given list contains consecutive numbers or not.\ndef check_Consecutive(l): \r\n    return sorted(l) == list(range(min(l),max(l)+1)) ", "metadata": {}}
{"_id": "473_code", "title": "tuple_intersection", "text": "# Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\ndef tuple_intersection(test_list1, test_list2):\r\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\r\n  return (res)", "metadata": {}}
{"_id": "474_code", "title": "replace_char", "text": "# Write a function to replace characters in a string.\ndef replace_char(str1,ch,newch):\r\n str2 = str1.replace(ch, newch)\r\n return str2", "metadata": {}}
{"_id": "475_code", "title": "sort_counter", "text": "# Write a function to sort counter by value.\nfrom collections import Counter\r\ndef sort_counter(dict1):\r\n x = Counter(dict1)\r\n sort_counter=x.most_common()\r\n return sort_counter", "metadata": {}}
{"_id": "476_code", "title": "big_sum", "text": "# Write a python function to find the sum of the largest and smallest value in a given array.\ndef big_sum(nums):\r\n      sum= max(nums)+min(nums)\r\n      return sum", "metadata": {}}
{"_id": "477_code", "title": "is_lower", "text": "# Write a python function to convert the given string to lower case.\ndef is_lower(string):\r\n  return (string.lower())", "metadata": {}}
{"_id": "478_code", "title": "remove_lowercase", "text": "# Write a function to remove lowercase substrings from a given string.\nimport re\r\ndef remove_lowercase(str1):\r\n remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n result =  remove_lower(str1)\r\n return result", "metadata": {}}
{"_id": "479_code", "title": "first_Digit", "text": "# Write a python function to find the first digit of a given number.\ndef first_Digit(n) :  \r\n    while n >= 10:  \r\n        n = n / 10; \r\n    return int(n) ", "metadata": {}}
{"_id": "480_code", "title": "get_max_occuring_char", "text": "# Write a python function to find the maximum occurring character in a given string.\ndef get_max_occuring_char(str1):\r\n  ASCII_SIZE = 256\r\n  ctr = [0] * ASCII_SIZE\r\n  max = -1\r\n  ch = ''\r\n  for i in str1:\r\n    ctr[ord(i)]+=1;\r\n  for i in str1:\r\n    if max < ctr[ord(i)]:\r\n      max = ctr[ord(i)]\r\n      ch = i\r\n  return ch", "metadata": {}}
{"_id": "481_code", "title": "is_subset_sum", "text": "# Write a function to determine if there is a subset of the given set with sum equal to the given sum.\ndef is_subset_sum(set, n, sum):\r\n\tif (sum == 0):\r\n\t\treturn True\r\n\tif (n == 0):\r\n\t\treturn False\r\n\tif (set[n - 1] > sum):\r\n\t\treturn is_subset_sum(set, n - 1, sum)\r\n\treturn is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])", "metadata": {}}
{"_id": "482_code", "title": "match", "text": "# Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nimport re \r\ndef match(text): \r\n\t\tpattern = '[A-Z]+[a-z]+$'\r\n\t\tif re.search(pattern, text): \r\n\t\t\t\treturn('Yes') \r\n\t\telse: \r\n\t\t\t\treturn('No') ", "metadata": {}}
{"_id": "483_code", "title": "first_Factorial_Divisible_Number", "text": "# Write a python function to find the first natural number whose factorial is divisible by x.\ndef first_Factorial_Divisible_Number(x): \r\n    i = 1;\r\n    fact = 1; \r\n    for i in range(1,x): \r\n        fact = fact * i \r\n        if (fact % x == 0): \r\n            break\r\n    return i ", "metadata": {}}
{"_id": "484_code", "title": "remove_matching_tuple", "text": "# Write a function to remove the matching tuples from the given two tuples.\ndef remove_matching_tuple(test_list1, test_list2):\r\n  res = [sub for sub in test_list1 if sub not in test_list2]\r\n  return (res) ", "metadata": {}}
{"_id": "485_code", "title": "is_palindrome", "text": "# Write a function to find the largest palindromic number in the given array.\ndef is_palindrome(n) : \r\n\tdivisor = 1\r\n\twhile (n / divisor >= 10) : \r\n\t\tdivisor *= 10\r\n\twhile (n != 0) : \r\n\t\tleading = n // divisor \r\n\t\ttrailing = n % 10\r\n\t\tif (leading != trailing) : \r\n\t\t\treturn False\r\n\t\tn = (n % divisor) // 10\r\n\t\tdivisor = divisor // 100\r\n\treturn True\r\ndef largest_palindrome(A, n) : \r\n\tA.sort() \r\n\tfor i in range(n - 1, -1, -1) : \r\n\t\tif (is_palindrome(A[i])) : \r\n\t\t\treturn A[i] \r\n\treturn -1", "metadata": {}}
{"_id": "486_code", "title": "nCr", "text": "# Write a function to compute binomial probability for the given number.\ndef nCr(n, r): \r\n\tif (r > n / 2): \r\n\t\tr = n - r \r\n\tanswer = 1 \r\n\tfor i in range(1, r + 1): \r\n\t\tanswer *= (n - r + i) \r\n\t\tanswer /= i \r\n\treturn answer \r\ndef binomial_probability(n, k, p): \r\n\treturn (nCr(n, k) * pow(p, k) *\tpow(1 - p, n - k)) ", "metadata": {}}
{"_id": "487_code", "title": "sort_tuple", "text": "# Write a function to sort a list of tuples in increasing order by the last element in each tuple.\ndef sort_tuple(tup): \r\n\tlst = len(tup) \r\n\tfor i in range(0, lst): \r\n\t\tfor j in range(0, lst-i-1): \r\n\t\t\tif (tup[j][-1] > tup[j + 1][-1]): \r\n\t\t\t\ttemp = tup[j] \r\n\t\t\t\ttup[j]= tup[j + 1] \r\n\t\t\t\ttup[j + 1]= temp \r\n\treturn tup", "metadata": {}}
{"_id": "488_code", "title": "area_pentagon", "text": "# Write a function to find the area of a pentagon.\nimport math\r\ndef area_pentagon(a):\r\n  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0\r\n  return area", "metadata": {}}
{"_id": "489_code", "title": "frequency_Of_Largest", "text": "# Write a python function to find the frequency of the largest value in a given array.\ndef frequency_Of_Largest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] >mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq ", "metadata": {}}
{"_id": "490_code", "title": "extract_symmetric", "text": "# Write a function to extract all the pairs which are symmetric in the given tuple list.\ndef extract_symmetric(test_list):\r\n  temp = set(test_list) & {(b, a) for a, b in test_list}\r\n  res = {(a, b) for a, b in temp if a < b}\r\n  return (res) ", "metadata": {}}
{"_id": "491_code", "title": "sum_gp", "text": "# Write a function to find the sum of geometric progression series.\nimport math\r\ndef sum_gp(a,n,r):\r\n total = (a * (1 - math.pow(r, n ))) / (1- r)\r\n return total", "metadata": {}}
{"_id": "492_code", "title": "binary_search", "text": "# Write a function to search an element in the given array by using binary search.\ndef binary_search(item_list,item):\r\n\tfirst = 0\r\n\tlast = len(item_list)-1\r\n\tfound = False\r\n\twhile( first<=last and not found):\r\n\t\tmid = (first + last)//2\r\n\t\tif item_list[mid] == item :\r\n\t\t\tfound = True\r\n\t\telse:\r\n\t\t\tif item < item_list[mid]:\r\n\t\t\t\tlast = mid - 1\r\n\t\t\telse:\r\n\t\t\t\tfirst = mid + 1\t\r\n\treturn found", "metadata": {}}
{"_id": "493_code", "title": "calculate_polygons", "text": "# Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nimport math\r\ndef calculate_polygons(startx, starty, endx, endy, radius):\r\n    sl = (2 * radius) * math.tan(math.pi / 6)\r\n    p = sl * 0.5\r\n    b = sl * math.cos(math.radians(30))\r\n    w = b * 2\r\n    h = 2 * sl   \r\n    startx = startx - w\r\n    starty = starty - h\r\n    endx = endx + w\r\n    endy = endy + h\r\n    origx = startx\r\n    origy = starty\r\n    xoffset = b\r\n    yoffset = 3 * p\r\n    polygons = []\r\n    row = 1\r\n    counter = 0\r\n    while starty < endy:\r\n        if row % 2 == 0:\r\n            startx = origx + xoffset\r\n        else:\r\n            startx = origx\r\n        while startx < endx:\r\n            p1x = startx\r\n            p1y = starty + p\r\n            p2x = startx\r\n            p2y = starty + (3 * p)\r\n            p3x = startx + b\r\n            p3y = starty + h\r\n            p4x = startx + w\r\n            p4y = starty + (3 * p)\r\n            p5x = startx + w\r\n            p5y = starty + p\r\n            p6x = startx + b\r\n            p6y = starty\r\n            poly = [\r\n                (p1x, p1y),\r\n                (p2x, p2y),\r\n                (p3x, p3y),\r\n                (p4x, p4y),\r\n                (p5x, p5y),\r\n                (p6x, p6y),\r\n                (p1x, p1y)]\r\n            polygons.append(poly)\r\n            counter += 1\r\n            startx += w\r\n        starty += yoffset\r\n        row += 1\r\n    return polygons", "metadata": {}}
{"_id": "494_code", "title": "binary_to_integer", "text": "# Write a function to convert the given binary tuple to integer.\ndef binary_to_integer(test_tup):\r\n  res = int(\"\".join(str(ele) for ele in test_tup), 2)\r\n  return (str(res)) ", "metadata": {}}
{"_id": "495_code", "title": "remove_lowercase", "text": "# Write a function to remove lowercase substrings from a given string by using regex.\nimport re\r\ndef remove_lowercase(str1):\r\n  remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n  result =  remove_lower(str1)\r\n  return (result)", "metadata": {}}
{"_id": "496_code", "title": "heap_queue_smallest", "text": "# Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nimport heapq as hq\r\ndef heap_queue_smallest(nums,n):\r\n  smallest_nums = hq.nsmallest(n, nums)\r\n  return smallest_nums", "metadata": {}}
{"_id": "497_code", "title": "surfacearea_cone", "text": "# Write a function to find the surface area of a cone.\nimport math\r\ndef surfacearea_cone(r,h):\r\n  l = math.sqrt(r * r + h * h)\r\n  SA = math.pi * r * (r + l)\r\n  return SA", "metadata": {}}
{"_id": "498_code", "title": "gcd", "text": "# Write a python function to find gcd of two positive integers.\ndef gcd(x, y):\r\n    gcd = 1\r\n    if x % y == 0:\r\n        return y\r\n    for k in range(int(y / 2), 0, -1):\r\n        if x % k == 0 and y % k == 0:\r\n            gcd = k\r\n            break  \r\n    return gcd", "metadata": {}}
{"_id": "499_code", "title": "diameter_circle", "text": "# Write a function to find the diameter of a circle.\ndef diameter_circle(r):\r\n  diameter=2*r\r\n  return diameter", "metadata": {}}
{"_id": "500_code", "title": "concatenate_elements", "text": "# Write a function to concatenate all elements of the given list into a string.\ndef concatenate_elements(list):\r\n  ans = ' '\r\n  for i in list:\r\n    ans = ans+ ' '+i\r\n  return (ans) ", "metadata": {}}
{"_id": "501_code", "title": "ngcd", "text": "# Write a python function to find common divisor between two numbers in a given pair.\ndef ngcd(x,y):\r\n    i=1\r\n    while(i<=x and i<=y):\r\n        if(x%i==0 and y%i == 0):\r\n            gcd=i;\r\n        i+=1\r\n    return gcd;\r\ndef num_comm_div(x,y):\r\n  n = ngcd(x,y)\r\n  result = 0\r\n  z = int(n**0.5)\r\n  i = 1\r\n  while(i <= z):\r\n    if(n % i == 0):\r\n      result += 2 \r\n      if(i == n/i):\r\n        result-=1\r\n    i+=1\r\n  return result", "metadata": {}}
{"_id": "502_code", "title": "find", "text": "# Write a python function to find remainder of two numbers.\ndef find(n,m):\r\n  r = n%m\r\n  return (r)", "metadata": {}}
{"_id": "503_code", "title": "add_consecutive_nums", "text": "# Write a function to add consecutive numbers of a given list.\ndef add_consecutive_nums(nums):\r\n    result = [b+a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result", "metadata": {}}
{"_id": "504_code", "title": "sum_Of_Series", "text": "# Write a python function to find the cube sum of first n natural numbers.\ndef sum_Of_Series(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += i * i*i       \r\n    return sum", "metadata": {}}
{"_id": "505_code", "title": "re_order", "text": "# Write a function to move all zeroes to the end of the given array.\ndef re_order(A):\r\n    k = 0\r\n    for i in A:\r\n        if i:\r\n            A[k] = i\r\n            k = k + 1\r\n    for i in range(k, len(A)):\r\n        A[i] = 0\r\n    return A", "metadata": {}}
{"_id": "506_code", "title": "permutation_coefficient", "text": "# Write a function to calculate the permutation coefficient of given p(n, k).\ndef permutation_coefficient(n, k): \r\n\tP = [[0 for i in range(k + 1)] \r\n\t\t\tfor j in range(n + 1)] \r\n\tfor i in range(n + 1): \r\n\t\tfor j in range(min(i, k) + 1): \r\n\t\t\tif (j == 0): \r\n\t\t\t\tP[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tP[i][j] = P[i - 1][j] + ( \r\n\t\t\t\t\t\tj * P[i - 1][j - 1]) \r\n\t\t\tif (j < k): \r\n\t\t\t\tP[i][j + 1] = 0\r\n\treturn P[n][k] ", "metadata": {}}
{"_id": "507_code", "title": "remove_words", "text": "# Write a function to remove specific words from a given list.\ndef remove_words(list1, removewords):\r\n    for word in list(list1):\r\n        if word in removewords:\r\n            list1.remove(word)\r\n    return list1  ", "metadata": {}}
{"_id": "508_code", "title": "same_order", "text": "# Write a function to check if the common elements between two given lists are in the same order or not.\ndef same_order(l1, l2):\r\n    common_elements = set(l1) & set(l2)\r\n    l1 = [e for e in l1 if e in common_elements]\r\n    l2 = [e for e in l2 if e in common_elements]\r\n    return l1 == l2", "metadata": {}}
{"_id": "509_code", "title": "average_Odd", "text": "# Write a python function to find the average of odd numbers till a given odd number.\ndef average_Odd(n) : \r\n    if (n%2==0) : \r\n        return (\"Invalid Input\") \r\n        return -1 \r\n    sm =0\r\n    count =0\r\n    while (n>=1) : \r\n        count=count+1\r\n        sm = sm + n \r\n        n = n-2\r\n    return sm//count ", "metadata": {}}
{"_id": "510_code", "title": "no_of_subsequences", "text": "# Write a function to find the number of subsequences having product smaller than k for the given non negative array.\ndef no_of_subsequences(arr, k): \r\n\tn = len(arr) \r\n\tdp = [[0 for i in range(n + 1)] \r\n\t\t\tfor j in range(k + 1)] \r\n\tfor i in range(1, k + 1): \r\n\t\tfor j in range(1, n + 1): \r\n\t\t\tdp[i][j] = dp[i][j - 1] \r\n\t\t\tif arr[j - 1] <= i and arr[j - 1] > 0: \r\n\t\t\t\tdp[i][j] += dp[i // arr[j - 1]][j - 1] + 1\r\n\treturn dp[k][n]", "metadata": {}}
